"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[4976],{9613:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(9496);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",N={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=o(a),k=l,d=u["".concat(s,".").concat(k)]||u[k]||N[k]||r;return a?n.createElement(d,p(p({ref:t},m),{},{components:a})):n.createElement(d,p({ref:t},m))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,p=new Array(r);p[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,p[1]=i;for(var o=2;o<r;o++)p[o]=a[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},3135:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>N,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var n=a(4778),l=(a(9496),a(9613));const r={title:"SQL Statements",slug:"sql-statements",hidden:!1,metadata:{title:"Supported SQL Statements in ByConity",description:"The supported statements in ByConity are similar to ClickHouse, but it's still recommended to follow the manual to ensure proper use. See some examples."},createdAt:"2021-06-17T15:31:57.358Z",updatedAt:"2022-02-28T02:27:53.768Z",tags:["Docs"]},p=void 0,i={unversionedId:"SQL\u8bed\u6cd5\u8bf4\u660e/sql-statements",id:"SQL\u8bed\u6cd5\u8bf4\u660e/sql-statements",title:"SQL Statements",description:"The supported statements in ByConity are similar to ClickHouse, but it is still recommended to follow the ByConity manual to ensure proper use. Some of the examples below are referenced from ClickHouse Documentation but have been adapted and modified to work in ByConity.",source:"@site/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/sql-statements.mdx",sourceDirName:"SQL\u8bed\u6cd5\u8bf4\u660e",slug:"/SQL\u8bed\u6cd5\u8bf4\u660e/sql-statements",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/sql-statements",draft:!1,editUrl:"https://github.com/ByConity/ByConity/tree/main/website/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/sql-statements.mdx",tags:[{label:"Docs",permalink:"/docs/tags/docs"}],version:"current",frontMatter:{title:"SQL Statements",slug:"sql-statements",hidden:!1,metadata:{title:"Supported SQL Statements in ByConity",description:"The supported statements in ByConity are similar to ClickHouse, but it's still recommended to follow the manual to ensure proper use. See some examples."},createdAt:"2021-06-17T15:31:57.358Z",updatedAt:"2022-02-28T02:27:53.768Z",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Mathematical",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/mathematical"},next:{title:"String",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/string"}},s={},o=[{value:"Alter Statement",id:"alter-statement",level:2},{value:"ADD COLUMN",id:"add-column",level:3},{value:"MODIFY COLUMN",id:"modify-column",level:3},{value:"DROP COLUMN",id:"drop-column",level:3},{value:"RENAME COLUMN",id:"rename-column",level:3},{value:"ADD CONSTRAINT",id:"add-constraint",level:3},{value:"DROP CONSTRAINT",id:"drop-constraint",level:3},{value:"MODIFYTTL",id:"modifyttl",level:3},{value:"REMOVETTL",id:"removettl",level:3},{value:"AST Statement",id:"ast-statement",level:2},{value:"Create Statement",id:"create-statement",level:2},{value:"CREATE DATABASE",id:"create-database",level:3},{value:"CREATE TABLE",id:"create-table",level:3},{value:"Create Table With Explicit Schema",id:"create-table-with-explicit-schema",level:4},{value:"CREATE VIEW",id:"create-view",level:3},{value:"CREATE NORMAL VIEW",id:"create-normal-view",level:4},{value:"Describe Statement",id:"describe-statement",level:2},{value:"Explain Statement",id:"explain-statement",level:2},{value:"EXPLAIN SYNTAX",id:"explain-syntax",level:3},{value:"Drop Statement",id:"drop-statement",level:2},{value:"DROP DATABASE",id:"drop-database",level:3},{value:"DROP TABLE",id:"drop-table",level:3},{value:"Insert Statement",id:"insert-statement",level:2},{value:"INSERT VALUES",id:"insert-values",level:3},{value:"INSERT FORMAT",id:"insert-format",level:3},{value:"INSERT SELECT",id:"insert-select",level:3},{value:"INSERT INFILE",id:"insert-infile",level:3},{value:"Rename Statement",id:"rename-statement",level:2},{value:"RENAME TABLE",id:"rename-table",level:3},{value:"Select Union Statement",id:"select-union-statement",level:2},{value:"Select Statement",id:"select-statement",level:2},{value:"Set Statement",id:"set-statement",level:2},{value:"Show Statement",id:"show-statement",level:2},{value:"SHOW DATABASES",id:"show-databases",level:3},{value:"SHOW TABLES",id:"show-tables",level:3},{value:"SHOW CREATE TABLE",id:"show-create-table",level:3},{value:"Truncate Statement",id:"truncate-statement",level:2},{value:"Use Statement",id:"use-statement",level:2},{value:"Database Identifier",id:"database-identifier",level:2},{value:"Table Identifier",id:"table-identifier",level:2},{value:"Table Column Definition",id:"table-column-definition",level:2},{value:"Table Column Property Expression",id:"table-column-property-expression",level:2},{value:"Setting Expression List",id:"setting-expression-list",level:2},{value:"EngineClause",id:"engineclause",level:2},{value:"orderByClause",id:"orderbyclause",level:2},{value:"partitionByClause",id:"partitionbyclause",level:2},{value:"primaryKeyClause",id:"primarykeyclause",level:2},{value:"uniqueKeyClause",id:"uniquekeyclause",level:2},{value:"sampleByClause",id:"samplebyclause",level:2},{value:"ttlClause",id:"ttlclause",level:2},{value:"settingsClause",id:"settingsclause",level:2},{value:"columnsClause",id:"columnsclause",level:2},{value:"withClause",id:"withclause",level:2},{value:"limitClause",id:"limitclause",level:2},{value:"limitByClause",id:"limitbyclause",level:2},{value:"havingClause",id:"havingclause",level:2},{value:"arrayJoinClause",id:"arrayjoinclause",level:2},{value:"prewhereClause",id:"prewhereclause",level:2},{value:"whereClause",id:"whereclause",level:2},{value:"fromClause",id:"fromclause",level:2},{value:"groupByClause",id:"groupbyclause",level:2},{value:"subqueryClause",id:"subqueryclause",level:2},{value:"sampleClause",id:"sampleclause",level:2},{value:"joinClause",id:"joinclause",level:2},{value:"columnExprList",id:"columnexprlist",level:2},{value:"columnExpr",id:"columnexpr",level:2}],m={toc:o},u="wrapper";function N(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The supported statements in ByConity are similar to ClickHouse, but it is still recommended to follow the ByConity manual to ensure proper use. Some of the examples below are referenced from ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.tech/docs/en/sql-reference/statements/"},"ClickHouse Documentation")," but have been adapted and modified to work in ByConity.\n","[block:callout]",'\n{\n"type": "info",\n"body": "Symbols between token [] are optional. For example ',"[IF NOT EXISTS]",'\\nToken | means or\\nToken ... means can repeat more times",\n"title": "Note"\n}\n',"[/block]"),(0,l.kt)("h2",{id:"alter-statement"},"Alter Statement"),(0,l.kt)("h3",{id:"add-column"},"ADD COLUMN"),(0,l.kt)("p",null,"Adds a new column to the table.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] ADD COLUMN [IF NOT EXISTS] [tableColumnDfnt] [AFTER name_after]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"IF NOT EXISTS")," clause is included, the query won\u2019t return an error if the column already exists. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"AFTER name_after")," (the name of another column), the column is added after the specified one in the list of table columns. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table \nCREATE TABLE db_name.table_name\n(\n    `order_by_column` String\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# Step 2: add column\nALTER TABLE db_name.table_name ADD COLUMN IF NOT EXISTS column_name String COMMENT 'column comment here' AFTER order_by_column\n")),(0,l.kt)("h3",{id:"modify-column"},"MODIFY COLUMN"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("p",null,"Modify Column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] MODIFY COLUMN [IF EXISTS] [tableColumnDfnt] \n")),(0,l.kt)("p",null,"If the modify column is:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Order by column: can modify its default_expr, comment, codec. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Partition by column: can modify its comment. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Normal column: can modify itstype, default_expr, comment, codec. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table \nCREATE TABLE db_name.table_name\n(\n    `order_by_column` String,\n    `normal_column` Int64 DEFAULT 0\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# Step 2: modify column normal_column_name & update its data type, comment and default value\nALTER TABLE db_name.table_name MODIFY COLUMN IF EXISTS normal_column String DEFAULT 'new_default_value' COMMENT 'new comment' \n")),(0,l.kt)("h3",{id:"drop-column"},"DROP COLUMN"),(0,l.kt)("p",null,"Deletes a column in the table. Partition by columns and order by columns are not allowed to drop.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] DROP COLUMN [IF EXISTS] column_name;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the column does not exist. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table \nCREATE TABLE db_name.table_name\n(\n    `order_by_column` String,\n    `normal_column` Int64\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# Step 2: drop the normal column\nALTER TABLE db_name.table_name DROP COLUMN IF EXISTS normal_column\n")),(0,l.kt)("h3",{id:"rename-column"},"RENAME COLUMN"),(0,l.kt)("p",null,"Rename a column in the table. There are some usage notes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Cannot rename column to an existing column. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Cannot rename column to itself. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Rename from column must exists. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] RENAME COLUMN [IF EXISTS] column_name_from TO column_name_to;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the column does not exist. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table \nCREATE TABLE db_name.table_name\n(\n    `order_by_column` String,\n    `old_column_name` Int64\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# Step 2: rename column\nALTER TABLE db_name.table_name RENAME COLUMN old_column_name TO new_column_name\n")),(0,l.kt)("h3",{id:"add-constraint"},"ADD CONSTRAINT"),(0,l.kt)("p",null,"Adds a constraint to the table.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] ADD CONSTRAINT [IF NOT EXISTS] constraint_name CHECK columnExpr;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"IF NOT EXISTS")," clause is included, the query won\u2019t return an error if the constraint already exists. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table\nCREATE TABLE `example_table`\n(\n    `order_by_column` String\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# Step 2: add constraint check_str\nALTER TABLE example_table ADD CONSTRAINT IF NOT EXISTS check_str CHECK order_by_column != 'forbidden_string'\n")),(0,l.kt)("h3",{id:"drop-constraint"},"DROP CONSTRAINT"),(0,l.kt)("p",null,"Deletes a constraint to the table.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] DROP CONSTRAINT [IF EXISTS] constraint_name;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the constraint does not exist. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table with the constraint check_str\nCREATE TABLE `example_table`\n(\n    `order_by_column` String,\n    CONSTRAINT check_str CHECK order_by_column != 'forbidden_string'\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# Step 2: drop constraint check_str\nALTER TABLE example_table DROP CONSTRAINT IF EXISTS check_str\n")),(0,l.kt)("h3",{id:"modifyttl"},"MODIFYTTL"),(0,l.kt)("p",null,"Change table TTL. Columns used in ttl Clause must be in partition by columns.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] MODIFY [ttlClause];\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table with table TTL to be 1 day\nCREATE TABLE `example_table`\n(\n    `d` DateTime\n)\nENGINE = `CnchMergeTree`\nPARTITION BY d\nORDER BY `d`\nTTL d + INTERVAL 1 DAY\n\n# Step 2: modify table ttl & change the TTL to 2 month\nALTER TABLE example_table\n    MODIFY TTL d + INTERVAL 2 MONTH\n")),(0,l.kt)("h3",{id:"removettl"},"REMOVETTL"),(0,l.kt)("p",null,"Remove table TTL.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [tableIdentifier] REMOVE TTL;\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table with table TTL to be 1 day\nCREATE TABLE `example_table`\n(\n    `d` DateTime\n)\nENGINE = `CnchMergeTree`\nPARTITION BY d\nORDER BY d\nTTL d + INTERVAL 1 DAY\n\n# Step 2: remove table ttl\nALTER TABLE example_table\n    REMOVE TTL\n")),(0,l.kt)("h3",{id:""}),(0,l.kt)("h2",{id:"ast-statement"},"AST Statement"),(0,l.kt)("p",null,"Shows the execution plan of a statement. Dumps the query AST.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"AST query\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Column")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"explain"),(0,l.kt)("td",{parentName:"tr",align:null},"The parsedASTof the statement")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"AST SELECT 1;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"Explain ParsedAST (children 1)\n SelectWithUnionQuery (children 1)\n ExpressionList (children 1)\n  SelectQuery (children 1)\n  ExpressionList (children 1)\n   Literal UInt64_1\n")),(0,l.kt)("h2",{id:"create-statement"},"Create Statement"),(0,l.kt)("h3",{id:"create-database"},"CREATE DATABASE"),(0,l.kt)("p",null,"Creates a new database\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE [IF NOT EXISTS] [databaseIdentifier] [ENGINE=Cnch]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"IF NOT EXISTS")," : query won\u2019t return an error if the database already exists. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create database with default database engine. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE IF NOT EXISTS test;\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Create database with optional engine clause. Currently only Cnch engine is allowed. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE IF NOT EXISTS test ENGINE=Cnch;\n")),(0,l.kt)("h3",{id:"create-table"},"CREATE TABLE"),(0,l.kt)("p",null,"Creates a new table."),(0,l.kt)("h4",{id:"create-table-with-explicit-schema"},"Create Table With Explicit Schema"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [tableIdentifier] [UUID uuid]\n(\n    [tableColumnDfnt],\n    [CONSTRAINT constraint_name CHECK columnExpr,]\n    ...\n) [engineClause]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"IF NOT EXISTS")," : query won\u2019t return an error if the table already exists. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"UUID")," : table will have an uuid provided by user. Otherwise, a generated uuid will be used. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[CONSTRAINT constraint_name CHECK columnExpr]")," : add a constraint to table. "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"columnExpr after ",(0,l.kt)("inlineCode",{parentName:"p"},"CHECK")," should be a boolean expression. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If constraints are checked for every row in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," query. Exception will be raised if any constraint is not satisfied. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Adding large amount of constraints can negatively affect performance of big ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," queries. "))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create Table ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.createTable(\n    id UInt32,\n    name String DEFAULT '',\n    CONSTRAINT constraint1 CHECK id > 10\n) \nENGINE=CnchMergeTree\nORDER BY id\n")),(0,l.kt)("h3",{id:"create-view"},"CREATE VIEW"),(0,l.kt)("h4",{id:"create-normal-view"},"CREATE NORMAL VIEW"),(0,l.kt)("p",null,"Normal views don\u2019t store any data. They just perform a read from another table on each access. In other words, a normal view is nothing more than a saved query. When reading from a view, this saved query is used as a subquery in the FROM clause.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE [OR REPLACE] VIEW [IF NOT EXISTS] [tableIdentifier] [UUID uuid] AS [selectUnionStmt]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"OR REPLACE")," is included, ByConity will create a new view and replace the old view with the same name. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"IF NOT EXISTS")," clause is included, the query won\u2019t return an error if the table already exists. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"UUID")," is specified, table will have an uuid provided by user. Otherwise, a generated uuid will be used. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# Step 1: create a table\nCREATE TABLE `example_table`\n(\n    `order_by_column` String\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# step 2: create a view based on the created table\nCREATE VIEW example_view AS SELECT * FROM example_table\n")),(0,l.kt)("h2",{id:"describe-statement"},"Describe Statement"),(0,l.kt)("p",null,"Returns the columns definition of a table\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DESC|DESCRIBE [TABLE] [tableIdentifier]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE example_view\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"N")," ",(0,l.kt)("strong",{parentName:"th"},"ame")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Type")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"DefaultType")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"DefaultExpression")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Comment")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"CodecExpression")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"TTLExpression")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"LastQueriedAt")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"LastQueriedBy")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"order_by_column"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"explain-statement"},"Explain Statement"),(0,l.kt)("h3",{id:"explain-syntax"},"EXPLAIN SYNTAX"),(0,l.kt)("p",null,"checks the syntax validity.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SYNTAX query\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SYNTAX SELECT 1\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"syntax_correct")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"syntax_message")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"has_join")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"has_asterisk")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("h2",{id:"drop-statement"},"Drop Statement"),(0,l.kt)("h3",{id:"drop-database"},"DROP DATABASE"),(0,l.kt)("p",null,"Deletes the Database.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DROP DATABASE [IF EXISTS] [databaseIdentifier]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# create a database\nCREATE DATABASE example_db\n\n# drop a database\nDROP DATABASE example_db\n")),(0,l.kt)("h3",{id:"drop-table"},"DROP TABLE"),(0,l.kt)("p",null,"Deletes the table.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DROP TABLE [IF EXISTS] [tableIdentifier]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# step 1: create a table\nCREATE TABLE `example_table`\n(\n    `order_by_column` String\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# step 2: drop a table\nDROP TABLE example_table\n")),(0,l.kt)("h2",{id:"insert-statement"},"Insert Statement"),(0,l.kt)("p",null,"Adds data into a table."),(0,l.kt)("h3",{id:"insert-values"},"INSERT VALUES"),(0,l.kt)("p",null,"Data can be inserted with this basic query format.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO [TABLE] [tableIdentifier] [columnsClause] VALUES\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# step 1: create a table\nCREATE TABLE `example_table`\n(\n    `a` Int8,\n    `b` String,\n    `c` Date\n)\nENGINE = `CnchMergeTree`\nORDER BY (`a`)\n\n# step 2: insert 2 rows into the table\nINSERT INTO example_table VALUES (1, 'a', '2021-07-27'), (2, 'b', '2021-07-27')\n")),(0,l.kt)("h3",{id:"insert-format"},"INSERT FORMAT"),(0,l.kt)("p",null,"Data can be passed to the INSERT in a format supported by ByConity.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO [TABLE] [tableIdentifier] [columnsClause] FORMAT format_name\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# step 1: create a table\nCREATE TABLE `example_table`\n(\n    `a` Int8,\n    `b` String,\n    `c` Date\n)\nENGINE = `CnchMergeTree`\nORDER BY (`a`) \n\n# step 2: insert 2 rows in value format into the table\nINSERT INTO example_table FORMAT TabSeparated\n1 a 2021-07-27\n2 b 2021-07-27\n")),(0,l.kt)("h3",{id:"insert-select"},"INSERT SELECT"),(0,l.kt)("p",null,"Inserts the results of a SELECT query.  Columns are mapped according to their position in the SELECT clause. However, their names in the SELECT expression and the table for INSERT may differ. If necessary, typecasting is performed.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO [TABLE] [tableIdentifier] [columnsClause] [selectUnionStmt]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO example_table SELECT * FROM example_table\n")),(0,l.kt)("h3",{id:"insert-infile"},"INSERT INFILE"),(0,l.kt)("p",null,"Insert data to a table from a file.  gateway-client only\nSupported file format:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},".csv ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},".json ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},".avro ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},".parquet "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO [TABLE] [tableIdentifier] [columnsClause] [FORMAT format_name] INFILE filepath\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO my_table FORMAT csvwithnames INFILE '/Users/my_name/Downloads/ETH-USD.csv'\n")),(0,l.kt)("h2",{id:"rename-statement"},"Rename Statement"),(0,l.kt)("h3",{id:"rename-table"},"RENAME TABLE"),(0,l.kt)("p",null,"Renames one or more tables.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"RENAME TABLE [tableIdentifier] TO [tableIdentifier], [tableIdentifier] TO [tableIdentifier]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# step 1: create a table\nCREATE TABLE `example_table`\n(\n    `a` Int8,\n    `b` String,\n    `c` Date\n)\nENGINE = `CnchMergeTree`\nORDER BY (`a`)\n\n# step 2: rename the new created table\nRENAME TABLE example_table to new_table_name\n")),(0,l.kt)("h2",{id:"select-union-statement"},"Select Union Statement"),(0,l.kt)("p",null,"SELECT query,  possibly with UNION ALL.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"[selectStmt] [UNION ALL [selectStmt]...\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.example_table1 (column1 Date, column2 UInt32) ENGINE=CnchMergeTree ORDER BY column1;\nCREATE TABLE IF NOT EXISTS test.example_table2 (column1 Date, column2 UInt32) ENGINE=CnchMergeTree ORDER BY column1;\nINSERT INTO test.example_table1 VALUES ('2015-08-07',1);\nINSERT INTO test.example_table2 VALUES ('2015-08-08',2);\nSELECT * FROM test.example_table1 UNION ALL SELECT * FROM test.example_table2;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"column1")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"column2")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2015-08-07"),(0,l.kt)("td",{parentName:"tr",align:null},"1")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"column1")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"column2")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2015-08-08"),(0,l.kt)("td",{parentName:"tr",align:null},"2")))),(0,l.kt)("h2",{id:"select-statement"},"Select Statement"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries perform data retrieval from tables.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"[withClause]\nSELECT [DISTINCT][columnExprList])\n[fromClause]\n[arrayJoinClause]\n[joinClause]\n[prewhereClause]\n[whereClause]\n[groupByClause]\n[havingClause]\n[orderByClause]\n[limitByClause]\n[limitClause]\n[settingsClause]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"DISTINCT")," , only unique rows will remain in a query result. It works with NULL as if ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," were a specific value, and ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL==NULL")," . ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Asterisk symbol (*)")," , An asterisk can be put in any part of a query instead of an expression. When the query is analyzed, the asterisk is expanded to a list of all table columns (excluding the ",(0,l.kt)("inlineCode",{parentName:"p"},"MATERIALIZED")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ALIAS")," columns). "))),(0,l.kt)("h2",{id:"set-statement"},"Set Statement"),(0,l.kt)("p",null,"Set a list of settings for the current session.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SET [settingExprList]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# set virtual warehouse\nSET WAREHOUSE your_warehouse_name\n\n# set role\nSET ROLE AccountAdmin\n\n# set if to choose ansi mode or not\nSET ansi_sql = 1\n")),(0,l.kt)("h2",{id:"show-statement"},"Show Statement"),(0,l.kt)("h3",{id:"show-databases"},"SHOW DATABASES"),(0,l.kt)("p",null,"Prints a list of all databases. The command does not require a running warehouse to execute.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW DATABASES\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),"s"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW DATABASES\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Name")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"db_name1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"db_name2")))),(0,l.kt)("h3",{id:"show-tables"},"SHOW TABLES"),(0,l.kt)("p",null,"Displays a list of tables. The command does not require a running warehouse to execute.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW TABLES [FROM [databaseIdentifier] [LIKE STRING_LITERAL]\n")),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"FROM")," clause is not specified, the query returns the list of tables from the current database.\n",(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW TABLES FROM my_db LIKE '%table'\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Name")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sells_table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"view_table")))),(0,l.kt)("h3",{id:"show-create-table"},"SHOW CREATE TABLE"),(0,l.kt)("p",null,"Display table create sql\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW CREATE [TABLE] [tableIdentifier]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"# step 1: create a table\nCREATE TABLE `example_table`\n(\n    `order_by_column` String\n)\nENGINE = `CnchMergeTree`\nORDER BY (`order_by_column`)\n\n# step 2: show create table\nSHOW CREATE TABLE example_table\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Query"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CREATE TABLE "),"example_db",(0,l.kt)("inlineCode",{parentName:"td"},"."),"example_table",(0,l.kt)("inlineCode",{parentName:"td"},"COMMENT '',(,   "),"order_by_column",(0,l.kt)("inlineCode",{parentName:"td"}," String,),ENGINE="),"CnchMergeTree",(0,l.kt)("inlineCode",{parentName:"td"},",PRIMARY KEY "),"order_by_column",(0,l.kt)("inlineCode",{parentName:"td"},",ORDER BY "),"order_by_column",(0,l.kt)("inlineCode",{parentName:"td"},";"))))),(0,l.kt)("h2",{id:"truncate-statement"},"Truncate Statement"),(0,l.kt)("p",null,"Removes all data from a table.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"TRUNCATE TABLE [IF EXISTS] [tableIdentifier]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"TRUNCATE TABLE IF EXISTS example_table\n")),(0,l.kt)("h2",{id:"use-statement"},"Use Statement"),(0,l.kt)("p",null,"Sets the current database for the session. The current database is used for searching for tables if the database is not explicitly defined in the query with a dot before the table name.\nNote: This query can\u2019t be made when using the HTTP protocol, since there is no concept of a session."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"USE [databaseIdentifier];\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"USE example_db\n")),(0,l.kt)("h2",{id:"database-identifier"},"Database Identifier"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"database_name\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"database_name: String. Name of the database. ")),(0,l.kt)("h2",{id:"table-identifier"},"Table Identifier"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"[database_name.]table_name\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"database_name: String. Name of the database. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"table_name: String. Name of the table. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If database_name is not provided, current database will be used. "))),(0,l.kt)("h2",{id:"table-column-definition"},"Table Column Definition"),(0,l.kt)("p",null,"Column definition"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"column_name column_type [tableColumnPropertyExpr] [COMMENT comment] [codecExpr]\ncolumn_name [column_type] [tableColumnPropertyExpr] [COMMENT comment] [codecExpr]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If column_type is not explicit declared, ","[tableColumnPropertyExpr]"," must be provided for column type inference. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Column with explicit type ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"id UInt32\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Column with inexplicit type but type can be inferred from ","[tableColumnPropertyExpr]"," . ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"id DEFAULT 1\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Column with comment ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"id UInt32 COMMENT 'id'\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Column with codec ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"id UInt32 CODEC(LZ4)\n")),(0,l.kt)("h2",{id:"table-column-property-expression"},"Table Column Property Expression"),(0,l.kt)("p",null,"Column properties."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DEFAULT [columnExpr]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DEFAULT columnExpr")," : Normal default value. If the INSERT query doesn\u2019t specify the corresponding column, it will be filled in by computing the corresponding expression. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Column with default expression ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"id UInt32 DEFAULT 1\n")),(0,l.kt)("h2",{id:"setting-expression-list"},"Setting Expression List"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("p",null,"settingExprList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"settingExpr [,settingExpr]...\n")),(0,l.kt)("p",null,"settingExpr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"setting_name=setting_val\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"setting_name: String. Name of the setting. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"setting_val: number or string. Value of the setting. "))),(0,l.kt)("h2",{id:"engineclause"},"EngineClause"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ENGINE=engine_name\n-- below are optinal field for table engine only\n[orderByClause]\n[partitionByClause]\n[primaryKeyClause]\n[uniqueKeyClause]\n[sampleByClause]\n[ttlClause]\n[settingsClause]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For database engine, engine_name can only be Cnch. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For table engine, engine_name can only be CnchMergeTree. "))),(0,l.kt)("h2",{id:"orderbyclause"},"orderByClause"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("p",null,"orderByClause"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ORDER BY orderExpr [,orderExpr]...\n")),(0,l.kt)("p",null,"orderExpr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"[columnExpr] [ASCENDING|ASC|DESCENDING|DESC] [NULLS [FIRST|LAST] [COLLATE STRING_LITERAL]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[ASCENDING|ASC|DESCENDING|DESC]")," : determines the sorting direction. If the direction is not specified, ",(0,l.kt)("inlineCode",{parentName:"p"},"ASC")," is assumed. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[NULLS [FIRST|LAST]")," : determines ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," sorting order. "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"By default or with the ",(0,l.kt)("inlineCode",{parentName:"p"},"NULLS LAST")," modifier: first the values, then ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," , then ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," . ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"With the ",(0,l.kt)("inlineCode",{parentName:"p"},"NULLS FIRST")," modifier: first ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," , then ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," , then other values. ")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[COLLATE STRING_LITERAL]")," : For sorting by String values, you can specify collation. "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Collate is supported in LowCardinality, Nullable, Array and Tuple ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When using ",(0,l.kt)("inlineCode",{parentName:"p"},"COLLATE")," , sorting is always case-insensitive. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"only recommend using ",(0,l.kt)("inlineCode",{parentName:"p"},"COLLATE")," for final sorting of a small number of rows, since sorting with ",(0,l.kt)("inlineCode",{parentName:"p"},"COLLATE")," is less efficient than normal sorting by bytes. "))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Order by multiple orderExpr ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.orderByClause (id UInt32, val UInt32) ENGINE=CnchMergeTree() ORDER BY id;\nINSERT INTO TABLE test.orderByClause VALUES (1,5),(1,15),(2,5),(2,15);\nSELECT * FROM test.orderByClause ORDER BY id ASC, val DESC;\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Order by NULLS FIRST ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.orderByClause (id UInt32, val Nullable(UInt32)) ENGINE=CnchMergeTree() ORDER BY id;\nINSERT INTO test.orderByClause VALUES (1,2),(2,NULL),(3,2),(3,3),(3,NULL);\nSELECT * FROM test.orderByClause ORDER BY val DESC NULLS FIRST;\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Order by with COLLATE ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.orderByClause (x UInt32, s Nullable(String)) ENGINE=CnchMergeTree ORDER BY x;\nINSERT INTO test.orderByClause VALUES (1,'bca'),(2,NULL),(3,'ABC'),(4,'123a'),(5,'abc'),(6,NULL),(7,'BCA');\nSELECT * FROM test.orderByClause ORDER BY s ASC COLLATE 'ru';\n")),(0,l.kt)("h2",{id:"partitionbyclause"},"partitionByClause"),(0,l.kt)("p",null,"Used by engineClause to define the partition key. Partition key can be any expression from the table columns.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"PARTITION BY [columnExpr]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Partition key defined by a columnExpr ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.partitionByClause\n(\n    VisitDate Date,\n    Hour UInt8,\n    ClientID UUID\n)\nENGINE = CnchMergeTree\nPARTITION BY VisitDate\nORDER BY Hour;\n")),(0,l.kt)("p",null,"In this example, records will be partitioned by the VisitDate.\n2. Partition key defined in a tuple of columnExpr "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.partitionByClause\n(\n    VisitDate Date,\n    Hour UInt8,\n    ClientID UUID\n)\nENGINE = CnchMergeTree\nPARTITION BY (VisitDate,Hour)\nORDER BY Hour;\n")),(0,l.kt)("p",null,"In this example, records will be partitioned by the hour of the visitDate."),(0,l.kt)("h2",{id:"primarykeyclause"},"primaryKeyClause"),(0,l.kt)("p",null,"Used by engineClause to define the primary key if it differs from order by key.\nBy default the primary key is the same as the order by key. Thus in most cases it is unnecessary to specify a separate primaryKeyClause.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"PRIMARY KEY [columnExpr]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.primaryKeyClause\n(\n    VisitDate Date,\n    Hour UInt8,\n    ClientID UUID\n)\nENGINE = CnchMergeTree\nORDER BY (VisitDate,Hour)\nPRIMARY KEY VisitDate;\n")),(0,l.kt)("h2",{id:"uniquekeyclause"},"uniqueKeyClause"),(0,l.kt)("p",null,"Used by engineClause to define the unique key. If specified, the table creates a partition-level constraint that all unique key values in the same partition must be distinct. If you try to insert a row with a unique key that matches an existing row, it will first delete the old row and then insert the new row.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"UNIQUE KEY [columnExpr]\n")),(0,l.kt)("p",null,"Note that only expressions with the following data types can be used in UNIQUE KEY"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Primary data type: ",(0,l.kt)("inlineCode",{parentName:"p"},"[U]Int8/16/32/64, Boolean, Date, DateTime, String")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Composite date type: ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," composed of elements in supported primary data types "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Unique key defined by a single column ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.uniqueKeyClause\n(\n  `event_date` Date,\n  `order_id` UInt64,\n  `state` UInt32,\n  `amount` UInt64\n)\nENGINE = CnchMergeTree\nPARTITION BY event_date\nORDER BY state\nUNIQUE KEY order_id;\n\n-- rows with the same key will replace previous rows\nINSERT INTO test.uniqueKeyClause VALUES\n('2021-03-01', 1001, 1, 100),\n('2021-03-01', 1002, 1, 200),\n('2021-03-01', 1001, 2, 100),\n('2021-03-02', 1001, 1, 400);\n\nSELECT * FROM test.uniqueKeyClause ORDER BY event_date, order_id;\n\u250c\u2500event_date\u2500\u252c\u2500order_id\u2500\u252c\u2500state\u2500\u252c\u2500amount\u2500\u2510\n\u2502 2021-03-01 \u2502     1001 \u2502     2 \u2502    100 \u2502\n\u2502 2021-03-01 \u2502     1002 \u2502     1 \u2502    200 \u2502\n\u2502 2021-03-02 \u2502     1001 \u2502     1 \u2502    400 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nINSERT INTO test.uniqueKeyClause VALUES\n('2021-03-01', 1002, 2, 200),\n('2021-03-02', 1001, 2, 400),\n('2021-03-02', 1002, 1, 300);\n\nSELECT * FROM test.uniqueKeyClause ORDER BY event_date, order_id;\n\u250c\u2500event_date\u2500\u252c\u2500order_id\u2500\u252c\u2500state\u2500\u252c\u2500amount\u2500\u2510\n\u2502 2021-03-01 \u2502     1001 \u2502     2 \u2502    100 \u2502\n\u2502 2021-03-01 \u2502     1002 \u2502     2 \u2502    200 \u2502\n\u2502 2021-03-02 \u2502     1001 \u2502     2 \u2502    400 \u2502\n\u2502 2021-03-02 \u2502     1002 \u2502     1 \u2502    300 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Composite unique key ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.uniqueKeyClause\n(\n  `event_date` Date,\n  `region` UInt64,\n  `state` String,\n  `amount` UInt64\n)\nENGINE = CnchMergeTree\nPARTITION BY event_date\nORDER BY state\nUNIQUE KEY (region, state);\n")),(0,l.kt)("h2",{id:"samplebyclause"},"sampleByClause"),(0,l.kt)("p",null,"Used by engineClause to define the sample key. The sampling expression must contain primary key and result of sampling expression must be unsigned integer.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SAMPLE BY [columnExpr]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.sampleByClause \n(\n    id UInt32\n) \nENGINE=CnchMergeTree \nORDER BY id \nSAMPLE BY id;\n")),(0,l.kt)("h2",{id:"ttlclause"},"ttlClause"),(0,l.kt)("p",null,"Expression to specify storage duration of rows."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"columnExpr return results must have one ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime")," column. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Columns used in ttlClause must be in partition by columns. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"TTL [columnExpr]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.ttlClause\n(\n    VisitDate Date,\n    Hour UInt8,\n    ClientID UUID\n)\nENGINE = CnchMergeTree\nORDER BY Hour\nPARTITION BY VisitDate\nTTL VisitDate + INTERVAL 1 DAY\uff1b\n")),(0,l.kt)("h2",{id:"settingsclause"},"settingsClause"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SETTINGS [settingExprList]\n")),(0,l.kt)("h2",{id:"columnsclause"},"columnsClause"),(0,l.kt)("p",null,"Used by insertStmt to represent a list of columns.\n",(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"(column_name[,column_name]...)\n")),(0,l.kt)("h2",{id:"withclause"},"withClause"),(0,l.kt)("p",null,"ByConity supports Common Table Expressions( ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hierarchical_and_recursive_queries_in_SQL"},"CTE")," ). The results of WITH clause can be used in the remaining ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," query. There are certain limitations to the support, including"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Recursions are not allowed in CTE ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Subqueries are not allowed in CTE "))),(0,l.kt)("p",null,"We only support below syntax."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH [columnExpr] AS identifier\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Using constant expression as \u201cvariable\u201d ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH '2019-08-01 15:23:00' as ts SELECT ts\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Using results of a scalar subquery (1 row) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"/* this example would return TOP 10 of most huge tables */\nWITH\n(\n    SELECT 1\n) AS number\nSELECT number;\n")),(0,l.kt)("h2",{id:"limitclause"},"limitClause"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("p",null,"select the first ",(0,l.kt)("inlineCode",{parentName:"p"},"m")," rows from the result."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LIMIT m\n")),(0,l.kt)("p",null,"select the ",(0,l.kt)("inlineCode",{parentName:"p"},"m")," rows from the result after skipping the first ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," rows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LIMIT n, m\nLIMIT m OFFSET n\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"n")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"m")," must be non-negative integers. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If there is no orderByClause that explicitly sorts results, the choice of rows for the result may be arbitrary and non-deterministic. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Example of Limit m. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.limitClause (id UInt32) engine=CnchMergeTree() order by id;\nINSERT INTO test.limitClause VALUES (1),(2),(3),(4),(5);\nSELECT * FROM test.limitClause LIMIT 2; -- first 2 values will be return\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Example of Limit n,m ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.limitClause (id UInt32) engine=CnchMergeTree() order by id;\nINSERT INTO test.limitClause VALUES (1),(2),(3),(4),(5);\nSELECT * FROM test.limitClause LIMIT 1,2; -- skip first value\uff0cnext 2 values will be return\nSELECT * FROM test.limitClause LIMIT 2 OFFSET 1; -- skip first value\uff0cnext 2 values will be return\n")),(0,l.kt)("h2",{id:"limitbyclause"},"limitByClause"),(0,l.kt)("p",null,"select the ",(0,l.kt)("inlineCode",{parentName:"p"},"m")," rows for each distinct value of ",(0,l.kt)("inlineCode",{parentName:"p"},"expressions"),"\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("p",null,"select the first ",(0,l.kt)("inlineCode",{parentName:"p"},"m")," rows from the result for each distinct value of columnExpr."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LIMIT m BY [columnExprList]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Example of Limit m by columnExpr ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.limitByClause(id UInt32, val UInt32) ENGINE = CnchMergeTree() order by id;\nINSERT INTO test.limitByClause VALUES (1, 10), (1, 11), (1, 12), (2, 20), (2, 21);\nSELECT * FROM test.limitByClause ORDER BY id, val LIMIT 2 BY id; -- expect 4 rows. (1, 10), (1, 11), (2, 20), (2, 21) \n")),(0,l.kt)("p",null,"In this example, for each id (include value 1 and 2), we need to return 2 rows."),(0,l.kt)("h2",{id:"havingclause"},"havingClause"),(0,l.kt)("p",null,"Filtering the aggregation results produced by groupByClause. It is similar to the whereClause, but the difference is that ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," is performed before aggregation, while ",(0,l.kt)("inlineCode",{parentName:"p"},"HAVING")," is performed after it.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"HAVING [columnExpr](http://columnexpr/)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.havingClause(id UInt32, val UInt32) ENGINE = CnchMergeTree() ORDER BY id;\nINSERT INTO test.havingClause VALUES (1, 10), (1, 11), (1, 12), (2, 20), (2, 21);\nSELECT id FROM test.havingClause GROUP BY id HAVING count(id)>2; -- only 1 is expected. \n")),(0,l.kt)("h2",{id:"arrayjoinclause"},"arrayJoinClause"),(0,l.kt)("p",null,"For table contains array column, array join can produce a new table that has a column with each individual array element of that initial column, while values of other columns are duplicated\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"[LEFT] ARRAY JOIN [columnExprList]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You can specify only one arrayJoinClause in a ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," query. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[LEFT] ARRAY JOIN")," : types of ARRAY JOIN "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"ARRAY JOIN")," - In base case, empty arrays are not included in the result of ",(0,l.kt)("inlineCode",{parentName:"p"},"JOIN")," . ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"LEFT ARRAY JOIN")," - The result of ",(0,l.kt)("inlineCode",{parentName:"p"},"JOIN")," contains rows with empty arrays. The value for an empty array is set to the default value for the array element type (usually 0, empty string or NULL). "))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.arrayJoinClause(s String, arr Array(UInt8)) ENGINE = CnchMergeTree ORDER BY s;\nINSERT INTO test.arrayJoinClause VALUES ('Hello', [1,2]), ('World', [3,4,5]), ('Goodbye', []);\nSELECT s, arr FROM test.arrayJoinClause ARRAY JOIN arr;\n")),(0,l.kt)("h2",{id:"prewhereclause"},"prewhereClause"),(0,l.kt)("p",null,"Prewhere is an optimization to apply filtering more efficiently. It is enabled by default even if ",(0,l.kt)("inlineCode",{parentName:"p"},"PREWHERE")," clause is not specified explicitly. It works by automatically moving part of WHERE condition to prewhere stage. The role of ",(0,l.kt)("inlineCode",{parentName:"p"},"PREWHERE")," clause is only to control this optimization if you think that you know how to do it better than it happens by default.\nWith prewhere optimization, at first only the columns necessary for executing prewhere expression are read. Then the other columns are read that are needed for running the rest of the query, but only those blocks where the prewhere expression is \u201ctrue\u201d at least for some rows. If there are a lot of blocks where prewhere expression is \u201cfalse\u201d for all rows and prewhere needs less columns than other parts of query, this often allows to read a lot less data from disk for query execution.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"PREWHERE [columnExpr](http://columnexpr/)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.prewhereClause(id UInt32, val UInt32) ENGINE = CnchMergeTree() ORDER BY id;\nINSERT INTO test.prewhereClause VALUES (1, 10), (1, 11), (1, 12), (2, 20), (2, 21);\nSELECT * FROM test.prewhereClause PREWHERE id=1 WHERE val>10; -- (1, 11), (1, 12) expected\n")),(0,l.kt)("h2",{id:"whereclause"},"whereClause"),(0,l.kt)("p",null,"whereClause allows to filter the data that is coming from fromClause of ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," . It must contain an expression with the ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt8")," type. This is usually an expression with comparison and logical operators.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WHERE [columnExpr]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.whereClause(id UInt32, val UInt32) ENGINE = CnchMergeTree() ORDER BY id;\nINSERT INTO test.whereClause VALUES (1, 10), (1, 11), (1, 12), (2, 20), (2, 21);\nSELECT * FROM test.whereClause WHERE val>10; -- (1, 11), (1, 12), (2, 20), (2, 21) expected\n")),(0,l.kt)("h2",{id:"fromclause"},"fromClause"),(0,l.kt)("p",null,"The fromClause specifies the source to read data from:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Table ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Subquery ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Table Function "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("p",null,"Read data from table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"FROM [tableIdentifier] [FINAL] [sampleClause] \n")),(0,l.kt)("p",null,"Read data from subquery:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"FROM ([selectUnionStmt]) [FINAL] [sampleClause]\n")),(0,l.kt)("p",null,"Read data from table function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"FROM tableFunctionExpr [FINAL] [sampleClause]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FINAL")," : When ",(0,l.kt)("inlineCode",{parentName:"li"},"FINAL")," is specified, ByConity fully merges the data before returning the result and thus performs all data transformations that happen during merges. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Select from table ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.fromClause (id UInt32, val UInt32) ENGINE=CnchMergeTree() ORDER BY id;\nINSERT INTO test.fromClause VALUES (1, 10), (1, 11), (1, 12), (2, 20), (2, 21);\nSELECT * FROM test.fromClause; -- expect 5 rows \n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Select from subquery ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.fromClause (id UInt32, val UInt32) ENGINE=CnchMergeTree() ORDER BY id;\nINSERT INTO test.fromClause VALUES (1, 10), (1, 11), (1, 12), (2, 20), (2, 21);\nSELECT * FROM (SELECT * FROM test.fromClause LIMIT 3); -- expect 3 rows \n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Select from tableFunctionExpr ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM numbers(10); -- expect 10 rows \n")),(0,l.kt)("p",null,"We use table function numbers here to generate a table with 10 rows."),(0,l.kt)("h2",{id:"groupbyclause"},"groupByClause"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"groupByClause")," switches the ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," query into an aggregation mode. ","[columnExprList]"," under ",(0,l.kt)("inlineCode",{parentName:"p"},"groupByClause")," acts as grouping key and result of aggregating ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," query will contain as many rows as there were unique values of grouping key in source table.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"GROUP BY [(][columnExprList][)] [WITH ROLLUP|WITH CUBE] [WITH TOTALS]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"NULL processing")," : ByConity interprets NULL as a value. If group by keys contains NULL value, it will appear in the result. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[WITH ROLLUP]")," :  calculate subtotals for the key expressions, based on their order in the ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," list. "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The subtotals rows are added after the result table. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'In the subtotals rows the values of already "grouped" key expressions are set to ',(0,l.kt)("inlineCode",{parentName:"p"},"0")," or empty line. ")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[WITH CUBE]")," : calculate subtotals for every combination of the key expressions in the ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," list. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[WITH TOTALS]")," : calculate subtotals for a combination of all key expressions in the ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," list. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Group by key contains NULL value. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.groupByClause (x UInt32, y Nullable(UInt32)) ENGINE=CnchMergeTree ORDER BY x;\nINSERT INTO test.groupByClause VALUES (1,2),(2,NULL),(3,2),(3,3),(3,NULL);\nSELECT sum(x), y FROM test.groupByClause GROUP BY y; \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"sum(x)")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"y")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL")))),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Group by WITH ROLLUP modifier ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.groupByClause (year UInt32, month UInt32, day UInt32) ENGINE=CnchMergeTree ORDER BY year;\nINSERT INTO test.groupByClause VALUES (2019,1,5),(2019,1,15),(2020,1,5),(2020,1,15),(2021,1,5),(2021,1,15);\nSELECT year, month, day, count() FROM test.groupByClause GROUP BY year, month, day WITH ROLLUP;\n")),(0,l.kt)("p",null,"As ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY"),' section has three key expressions, the result contains four tables with subtotals "rolled up" from right to left:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year, month, day")," ; ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year, month")," (and ",(0,l.kt)("inlineCode",{parentName:"p"},"day")," column is filled with zeros); ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year")," (now ",(0,l.kt)("inlineCode",{parentName:"p"},"month, day")," columns are both filled with zeros); ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"and totals (and all three key expression columns are zeros). "))),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Group by WITH CUBE modifier ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.groupByClause (year UInt32, month UInt32, day UInt32) ENGINE=CnchMergeTree ORDER BY year;\nINSERT INTO test.groupByClause VALUES (2019,1,5),(2019,1,15),(2020,1,5),(2020,1,15),(2021,1,5),(2021,1,15);\nSELECT year, month, day, count() FROM test.groupByClause GROUP BY year, month, day WITH CUBE;\n")),(0,l.kt)("p",null,"As ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," section has three key expressions, the result contains eight tables with subtotals for all key expression combinations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year, month, day")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year, month")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year, day")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY month, day")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY month")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY day")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"and totals. (and all three key expression columns are zeros). "))),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Group by WITH TOTAL modifier ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.groupByClause (year UInt32, month UInt32, day UInt32) ENGINE=CnchMergeTree ORDER BY year;\nINSERT INTO test.groupByClause VALUES (2019,1,5),(2019,1,15),(2020,1,5),(2020,1,15),(2021,1,5),(2021,1,15);\nSELECT year, month, day, count() FROM test.groupByClause GROUP BY year, month, day WITH TOTALS;\n")),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"WITH TOTALS")," modifier is specified, another row will be calculated."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY year, month, day")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"and totals. (and all three key expression columns are zeros). "))),(0,l.kt)("h2",{id:"subqueryclause"},"subqueryClause"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"AS [selectUnionStmt]\n")),(0,l.kt)("h2",{id:"sampleclause"},"sampleClause"),(0,l.kt)("p",null,"The sampleClause allows for approximated ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," query processing. With sampleClause enabled, query is not performed on all the data, but only on a certain fraction of data. This is useful when:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Have strict timing requirements (like \\<100ms) but you can\u2019t justify the cost of additional hardware resources to meet them. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Raw data is not accurate, so approximation does not noticeably degrade the quality. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Business requirements target approximate results (for cost-effectiveness, or to market exact results to premium users). "))),(0,l.kt)("p",null,"Note: To use sampling, you must declare sampling expression was specified during CnchMergeTree table creation, see ","[sampleByClause]",".\n",(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("p",null,"Sample K. K is the number from 0 to 1."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SAMPLE K\n")),(0,l.kt)("p",null,"Sample N. N is integer larger than 1."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SAMPLE N\n")),(0,l.kt)("p",null,"SAMPLE K OFFSET M. K and M are numbers from 0 to 1."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SAMPLE K OFFSET M\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Sample K ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.sampleClause (id UInt32) ENGINE=CnchMergeTree ORDER BY id SAMPLE BY id;\nINSERT INTO test.sampleClause SELECT * FROM numbers(1000);\nSELECT COUNT() FROM test.sampleClause SAMPLE 0.1; -- 1000 is expected\n")),(0,l.kt)("p",null,"In this example, 10% of data will be used for approximation.\n2. Sample N "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.sampleClause (id UInt32) ENGINE=CnchMergeTree ORDER BY id SAMPLE BY id;\nINSERT INTO test.sampleClause SELECT * FROM numbers(1000);\nSELECT COUNT() FROM test.sampleClause SAMPLE 2; -- 1000 is expected\n")),(0,l.kt)("p",null,"In this example 2 rows of data will be used for approximation.\n3. SAMPLE K OFFSET M "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.sampleClause (id UInt32) ENGINE=CnchMergeTree ORDER BY id SAMPLE BY id;\nINSERT INTO test.sampleClause SELECT * FROM numbers(1000);\nSELECT COUNT() FROM test.sampleClause SAMPLE 0.1 OFFSET 0.2;\n")),(0,l.kt)("p",null,"In this example, 10% of data will be used for approximation after skipping 20% of data."),(0,l.kt)("h2",{id:"joinclause"},"joinClause"),(0,l.kt)("p",null,"Join produces a new table by combining columns from one or multiple tables by using values common to each.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"[GLOBAL|LOCAL] [ANY|ALL|ASOF] [INNER|LEFT|RIGHT|FULL|CROSS] [OUTER] JOIN [tableIdentifier] ON|USING [columnExprList]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[GLOBAL|LOCAL]")," : "),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"- `GLOBAL` , broadcast Join. Broadcast joins cannot be used when joining two large DataFrames. \n  \n- `LOCAL` , local join. Using distribution keys on the join columns can use local join. \n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[ANY|ALL|ASOF]")," : "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"ANY")," ,  If the right table has several matching rows, only the first one found is joined. If the right table has only one matching row, the results of ANY and ALL are the same. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"ALL")," , If the right table has several matching rows, ByConity creates a Cartesian product from matching rows. This is the normal JOIN behaviour from standard SQL. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"ASOF")," ,  For joining sequences with an uncertain match. ")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"[INNER|LEFT|RIGHT|FULL|CROSS]")," : All standard ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Join_(SQL)"},"SQL JOIN")," types "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"INNER JOIN")," , only matching rows are returned. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN")," , non-matching rows from left table are returned in addition to matching rows. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"RIGHT OUTER JOIN")," , non-matching rows from right table are returned in addition to matching rows. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"FULL OUTER JOIN")," , non-matching rows from both tables are returned in addition to matching rows. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"CROSS JOIN")," , produces cartesian product of whole tables, \u201cjoin keys\u201d are not specified. ")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"ON|USING")," : Expressions from ",(0,l.kt)("inlineCode",{parentName:"p"},"ON")," clause and columns from ",(0,l.kt)("inlineCode",{parentName:"p"},"USING")," clause are called \u201cjoin keys\u201d. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.joinClause (number UInt64) ENGINE=CnchMergeTree ORDER BY number;\nINSERT INTO test.joinClause SELECT * FROM numbers(10);\n\nSELECT number, joined FROM test.joinClause ANY LEFT JOIN (SELECT number * 2 AS number, number * 10 + 1 AS joined FROM test.joinClause LIMIT 10) js2 USING number LIMIT 10\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"number")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"joined")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"21")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"41")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"61")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"7"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},"81")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"9"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL")))),(0,l.kt)("h2",{id:"columnexprlist"},"columnExprList"),(0,l.kt)("p",null,"A list of columnExpr seperate by Comma.\n",(0,l.kt)("strong",{parentName:"p"}," Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-prolog"},"[columnExpr] [columnExpr]...\n")),(0,l.kt)("h2",{id:"columnexpr"},"columnExpr"),(0,l.kt)("p",null,"A columnExpr is a function, identifier, literal, application of an operator, expression in brackets, subquery, or asterisk. It can also contain an alias."))}N.isMDXComponent=!0}}]);