"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[1164],{9613:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(9496);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),_=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=_(e.components);return n.createElement(c.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},i=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=_(t),i=a,m=p["".concat(c,".").concat(i)]||p[i]||d[i]||l;return t?n.createElement(m,o(o({ref:r},u),{},{components:t})):n.createElement(m,o({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=i;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var _=2;_<l;_++)o[_]=t[_];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}i.displayName="MDXCreateElement"},4999:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>_});var n=t(4778),a=(t(9496),t(9613));const l={title:"\u76d1\u63a7\u96c6\u7fa4",tags:["Docs"]},o="\u76d1\u63a7\u96c6\u7fa4",s={unversionedId:"\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u76d1\u63a7\u96c6\u7fa4",id:"\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u76d1\u63a7\u96c6\u7fa4",title:"\u76d1\u63a7\u96c6\u7fa4",description:"Prometheus \u76d1\u63a7\u6307\u6807\uff1a",source:"@site/../docs/en/\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u76d1\u63a7\u96c6\u7fa4.mdx",sourceDirName:"\u57fa\u7840\u4f7f\u7528\u624b\u518c",slug:"/\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u76d1\u63a7\u96c6\u7fa4",permalink:"/docs/\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u76d1\u63a7\u96c6\u7fa4",draft:!1,editUrl:"https://github.com/ByConity/ByConity/tree/main/website/../docs/en/\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u76d1\u63a7\u96c6\u7fa4.mdx",tags:[{label:"Docs",permalink:"/docs/tags/docs"}],version:"current",frontMatter:{title:"\u76d1\u63a7\u96c6\u7fa4",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"\u6570\u636e\u7c7b\u578b",permalink:"/docs/\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u6570\u636e\u7c7b\u578b"},next:{title:"\u7ba1\u7406\u540e\u53f0\u4efb\u52a1",permalink:"/docs/\u57fa\u7840\u4f7f\u7528\u624b\u518c/\u7ba1\u7406\u540e\u53f0\u4efb\u52a1"}},c={},_=[{value:"Prometheus \u76d1\u63a7\u6307\u6807\uff1a",id:"prometheus-\u76d1\u63a7\u6307\u6807",level:2},{value:"VictoriaMetric \u6307\u6807\u805a\u5408\uff1a",id:"victoriametric-\u6307\u6807\u805a\u5408",level:2},{value:"\u76d1\u63a7\u670d\u52a1\u8282\u70b9\uff08Server\uff09",id:"\u76d1\u63a7\u670d\u52a1\u8282\u70b9server",level:2},{value:"\u91cd\u8981\u6307\u6807",id:"\u91cd\u8981\u6307\u6807",level:3},{value:"\u7ed9\u670d\u52a1\u8282\u70b9\uff08Server\uff09 \u914d\u7f6e Grafana \u770b\u677f",id:"\u7ed9\u670d\u52a1\u8282\u70b9server-\u914d\u7f6e-grafana-\u770b\u677f",level:3},{value:"\u76d1\u63a7 TSO",id:"\u76d1\u63a7-tso",level:2},{value:"\u91cd\u8981\u6307\u6807",id:"\u91cd\u8981\u6307\u6807-1",level:3},{value:"\u7ed9 TSO \u914d\u7f6e Grafana \u770b\u677f",id:"\u7ed9-tso-\u914d\u7f6e-grafana-\u770b\u677f",level:3},{value:"\u5176\u4ed6\u53ef\u4ee5\u76d1\u63a7\u7684\u4fe1\u606f",id:"\u5176\u4ed6\u53ef\u4ee5\u76d1\u63a7\u7684\u4fe1\u606f",level:2}],u={toc:_},p="wrapper";function d(e){let{components:r,...l}=e;return(0,a.kt)(p,(0,n.Z)({},u,l,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u76d1\u63a7\u96c6\u7fa4"},"\u76d1\u63a7\u96c6\u7fa4"),(0,a.kt)("h1",{id:"\u5e38\u89c1\u7684\u76d1\u63a7\u6307\u6807"},"\u5e38\u89c1\u7684\u76d1\u63a7\u6307\u6807"),(0,a.kt)("h2",{id:"prometheus-\u76d1\u63a7\u6307\u6807"},"Prometheus \u76d1\u63a7\u6307\u6807\uff1a"),(0,a.kt)("p",null,"\u5f15\u64ce\u5728 HTTP \u63a5\u53e3 ",(0,a.kt)("inlineCode",{parentName:"p"},"/metrics")," \u8def\u5f84\u4e0b\u5410\u51fa\u76d1\u63a7\u9879\uff0c\u9ed8\u8ba4\u7aef\u53e3 8123\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5bf9\u5e94\u7aef\u53e3\u8f93\u51fa\u3002"),(0,a.kt)("p",null,"\u53ef\u901a\u8fc7 kubectl \u67e5\u770b\u5bf9\u5e94\u7684 metric \u8f93\u51fa"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl port-forward -n cnch cnch-default-server-0 8123:8123\n# \u7528port-forward\u529f\u80fd\u4ee3\u7406\u7aef\u53e3\n\n")),(0,a.kt)("p",null,"\u4e4b\u540e\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u6253\u5f00 localhost:8123/metrics \uff0c\u53ef\u67e5\u770b\u5230\u5982\u4e0b\u56fe\u6240\u793a\u7684\u6307\u6807\u663e\u793a\u3002\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u5177\u4f53\u6307\u6807\u9879\uff0c\u7b26\u5408 Prometheus \u7ea6\u5b9a\u7684\u6307\u6807\u683c\u5f0f\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(6758).Z,width:"2208",height:"496"})),(0,a.kt)("h2",{id:"victoriametric-\u6307\u6807\u805a\u5408"},"VictoriaMetric \u6307\u6807\u805a\u5408\uff1a"),(0,a.kt)("p",null,"\u5bf9\u6307\u6807\u7684\u5b58\u50a8\u9009\u62e9 VictoriaMetric\uff0c\u65b9\u4fbf\u8fdb\u884c\u5b58\u50a8\u7684\u6a2a\u5411\u6269\u5c55\u548c\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u529f\u80fd\u3002"),(0,a.kt)("p",null,"\u5176\u4e2d\u91cd\u8981\u7684\u529f\u80fd\u662f VMRule\uff0c\u53ef\u5bf9\u539f\u59cb\u6307\u6807\u8fdb\u884c\u805a\u5408\u3002\u56e0\u5404\u7ec4\u4ef6\u5410\u51fa\u7684\u539f\u59cb Prometheus \u6307\u6807\u5176\u4e2d\u4e00\u90e8\u5206\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6765\u6784\u5efa\u76d1\u63a7\u544a\u8b66\uff0c\u53e6\u4e00\u90e8\u5206\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u5bb9\u6613\u76f4\u63a5\u6784\u5efa\u76d1\u63a7\u770b\u677f\u548c\u544a\u8b66\uff0c\u6240\u4ee5\u901a\u8fc7 VWRule \u8fdb\u884c\u805a\u5408\u3002\u4ee5\u4e0b\u4e3a\u89c4\u5219\u914d\u7f6e\u6587\u4ef6 cnch-metrics.yaml\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# Source: victoria-rules/templates/cnch-metrics.yaml\napiVersion: operator.victoriametrics.com/v1beta1\nkind: VMRule\nmetadata:\n  name: release-name-victoria-rule-cnch-metrics\n  namespace: cnch-operator-default-system\n  labels:\n    app: victoria-rules\n\n    chart: victoria-rules-0.1.6\n    release: "release-name"\n    heritage: "Helm"\nspec:\n  groups:\n    - name: CnchMetricsLatency\n      rules:\n        # Histogram at VW level\n        - record: cnch:latency:queries_vw:pct95\n          expr: |-\n            histogram_quantile(0.95,\n              sum by (cluster, namespace, vw, le)(\n                rate(cnch_histogram_metrics_query_latency_bucket[5m])\n              )\n            )\n        # Histogram at Cluster level\n        - record: cnch:latency:queries_cluster:pct95\n          expr: |-\n            histogram_quantile(0.95,\n              sum by (cluster, namespace, le)(\n                rate(cnch_histogram_metrics_query_latency_bucket[5m])\n              )\n            )\n\n        # Trends Metrics\n        # Trend Latency VW level\n        - record: cnch:latency:queries_vw:pct95:avg_1d\n          expr: avg_over_time(cnch:latency:queries_vw:pct95[1d])\n\n        # Trend Latency Cluster level\n        - record: cnch:latency:queries_cluster:pct95:avg_1d\n          expr: avg_over_time(cnch:latency:queries_cluster:pct95[1d])\n        # Histogram at VW level\n        - record: cnch:latency:queries_vw:pct99\n          expr: |-\n            histogram_quantile(0.99,\n              sum by (cluster, namespace, vw, le)(\n                rate(cnch_histogram_metrics_query_latency_bucket[5m])\n              )\n            )\n        # Histogram at Cluster level\n        - record: cnch:latency:queries_cluster:pct99\n          expr: |-\n            histogram_quantile(0.99,\n              sum by (cluster, namespace, le)(\n                rate(cnch_histogram_metrics_query_latency_bucket[5m])\n              )\n            )\n\n        # Trends Metrics\n        # Trend Latency VW level\n        - record: cnch:latency:queries_vw:pct99:avg_1d\n          expr: avg_over_time(cnch:latency:queries_vw:pct99[1d])\n\n        # Trend Latency Cluster level\n        - record: cnch:latency:queries_cluster:pct99:avg_1d\n          expr: avg_over_time(cnch:latency:queries_cluster:pct99[1d])\n\n        # Trend Slow Q VW level\n        - record: cnch:latency:queries_vw:slow_ratio:avg_1d\n          expr: avg_over_time(cnch:latency:queries_vw:slow_ratio[1d])\n\n        # Trend Slow Q Cluster level\n        - record: cnch:latency:queries_cluster:slow_ratio:avg_1d\n          expr: avg_over_time(cnch:latency:queries_cluster:slow_ratio[1d])\n\n        # Slow Q VW level  (Percentage of query > 10s)\n        - record: cnch:latency:queries_vw:slow_ratio\n          expr: |-\n            sum by (cluster, namespace, vw)(\n              rate(cnch_histogram_metrics_query_latency_count[5m])\n              - on (namespace, pod, cluster, vw, instance) rate(cnch_histogram_metrics_query_latency_bucket{le="10000"}[5m])\n            )\n            /\n            sum by (cluster, namespace, vw)(\n              rate(cnch_histogram_metrics_query_latency_count[5m])\n            )\n\n        # Slow Q Cluster level (Percentage of query > 10s)\n        - record: cnch:latency:queries_cluster:slow_ratio\n          expr: |-\n            sum by (cluster, namespace)(\n              rate(cnch_histogram_metrics_query_latency_count[5m])\n              - on (namespace, pod, cluster, vw, instance) rate(cnch_histogram_metrics_query_latency_bucket{le="10000"}[5m])\n            )\n            /\n            sum by (cluster, namespace)(\n              rate(cnch_histogram_metrics_query_latency_count[5m])\n            )\n\n        # Slow Q Cluster level (count queries > 10s) used by OP portal\n        - record: cnch:latency:queries_cluster:slow_count\n          expr: |-\n            sum by (cluster, namespace)(\n              increase(cnch_histogram_metrics_query_latency_count[1h])\n              - on (namespace, pod, cluster, vw, instance) increase(cnch_histogram_metrics_query_latency_bucket{le="10000"}[1h])\n            )\n\n        # Todo check if this metric became server only\n        - record: cnch:latency:queries_timeout:rate5m\n          expr: |-\n            sum by (cluster, namespace, pod, workload) (\n              rate(cnch_profile_events_timed_out_query_total[5m])\n              * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n            )\n\n    - name: CnchMetricsQPS\n      rules:\n        # Trend WG workload level\n        # - record: cnch:profile_events:query:total_rate5m:avg_1d\n        #   expr: avg_over_time(sum by (cluster, namespace, workload, type) (cnch:profile_events:query:total_rate5m)[1d])\n\n        # Trend VW QPS VW level. server POV only\n        - record: cnch:profile_events:labelled_query_vw:total_rate5m:avg_1d\n          expr: avg_over_time(sum by (cluster, namespace, vw, query_type) (cnch:profile_events:labelled_query_vw:total_rate5m)[1d])\n\n        # VW QPS cluster level Todo use sum(avg_1d{vw != ""}) if no similar reenable this Trend\n        - record: cnch:profile_events:labelled_query_cluster:total_rate5m:avg_1d\n          expr: |-\n            avg_over_time(sum by (cluster, namespace, query_type) (cnch:profile_events:labelled_query_vw:total_rate5m)[1d])\n\n        # Trend VW Error Ratio VW level (can\'t sum burnrate % so we pre-recorded a burnrate summed at vw level)\n        - record: cnch:profile_events:labelled_query_vw_sum:error_burnrate5m:avg_1d\n          expr: |-\n            avg_over_time(cnch:profile_events:labelled_query_vw_sum:error_burnrate5m[1d])\n\n        # Number of workers in a WG that use more than 80% memory\n        - record: cnch:workers:high_mem_rss:80pct_count\n          expr: |-\n            (\n              count(\n                (sum(\n                    container_memory_rss{container!="", image!=""}\n                  * on(namespace,pod)\n                    group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{workload=~"cnch.*worker.*|vw.*"}\n                ) by (pod, namespace, workload)\n                / sum(\n                    kube_pod_container_resource_limits{resource="memory"}\n                  * on(namespace,pod)\n                    group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{workload=~"cnch.*worker.*|vw.*"}\n                ) by (pod, namespace, workload)) > 0.80\n              ) by (namespace, workload)\n            /\n              count(namespace_workload_pod:kube_pod_owner:relabel{workload=~"cnch.*worker.*|vw.*"}) by (namespace, workload)\n            )\n\n        # Byteyard Usage Profiler metrics\n        - record: cnch:vw:metrics:running_queries:time_milliseconds_total\n          expr: sum by (vw_id, cluster) (increase(cnch_internal_metrics_running_queries_time_milliseconds_total[30s]))\n        - record: cnch:vw:metrics:queued_queries:time_milliseconds_total\n          expr: sum by (vw_id, cluster) (increase(cnch_internal_metrics_queued_queries_time_milliseconds_total[30s]))\n\n      # Query Error Ratio over multiple intervals aka burn rate\n\n        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule\n        # Worker POV is used in workers dashboard only\n        - record: cnch:profile_events:labelled_query_vw:total_rate5m\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[5m])) by (pod, cluster, namespace, query_type, vw, wg)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n\n        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph\n        - record: cnch:profile_events:labelled_query_vw_workers:total_rate5m\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[5m])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload!~".*server.*"}\n        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers\n        # TODO remove this\n        - record: cnch:profile_event:queries_vw_only:total_rate5m\n          expr: |-\n            cnch:profile_events:labelled_query_vw_workers:total_rate5m\n\n        - record: cnch:tso:requests:total_rate5m\n          expr: |-\n            sum(rate(cnch_profile_events_tso_request_total[5m])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Err/s default to 0 if a request total exist (e.g. only success request) so it\'s included in availability\n        - record: cnch:profile_events:labelled_query_vw:error_rate5m\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_queries_failed_total{failure_type!="QueriesFailedFromUser", resource_type="vw"}[5m])) by (pod, cluster, namespace, query_type, vw, wg)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate5m)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n        - record: cnch:tso:requests:error_rate5m\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_tso_error_total[5m])) by (pod, cluster, namespace)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate5m)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Use WG level precision\n        - record: cnch:profile_events:labelled_query_vw:error_burnrate5m\n          expr: |\n            sum(cnch:profile_events:labelled_query_vw:error_rate5m) by (workload, cluster, namespace, vw, wg)\n            /\n            sum(cnch:profile_events:labelled_query_vw:total_rate5m) by (workload, cluster, namespace, vw, wg)\n\n        - record: cnch:tso:requests:error_burnrate5m\n          expr: |\n            sum(cnch:tso:requests:error_rate5m) by (workload, cluster, namespace)\n                /\n            sum(cnch:tso:requests:total_rate5m) by (workload, cluster, namespace)\n\n        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule\n        # Worker POV is used in workers dashboard only\n        - record: cnch:profile_events:labelled_query_vw:total_rate30m\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[30m])) by (pod, cluster, namespace, query_type, vw, wg)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n\n        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph\n        - record: cnch:profile_events:labelled_query_vw_workers:total_rate30m\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[30m])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload!~".*server.*"}\n        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers\n        # TODO remove this\n        - record: cnch:profile_event:queries_vw_only:total_rate30m\n          expr: |-\n            cnch:profile_events:labelled_query_vw_workers:total_rate30m\n\n        - record: cnch:tso:requests:total_rate30m\n          expr: |-\n            sum(rate(cnch_profile_events_tso_request_total[30m])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Err/s default to 0 if a request total exist (e.g. only success request) so it\'s included in availability\n        - record: cnch:profile_events:labelled_query_vw:error_rate30m\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_queries_failed_total{failure_type!="QueriesFailedFromUser", resource_type="vw"}[30m])) by (pod, cluster, namespace, query_type, vw, wg)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate30m)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n        - record: cnch:tso:requests:error_rate30m\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_tso_error_total[30m])) by (pod, cluster, namespace)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate30m)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Use WG level precision\n        - record: cnch:profile_events:labelled_query_vw:error_burnrate30m\n          expr: |\n            sum(cnch:profile_events:labelled_query_vw:error_rate30m) by (workload, cluster, namespace, vw, wg)\n            /\n            sum(cnch:profile_events:labelled_query_vw:total_rate30m) by (workload, cluster, namespace, vw, wg)\n\n        - record: cnch:tso:requests:error_burnrate30m\n          expr: |\n            sum(cnch:tso:requests:error_rate30m) by (workload, cluster, namespace)\n                /\n            sum(cnch:tso:requests:total_rate30m) by (workload, cluster, namespace)\n\n        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule\n        # Worker POV is used in workers dashboard only\n        - record: cnch:profile_events:labelled_query_vw:total_rate1h\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[1h])) by (pod, cluster, namespace, query_type, vw, wg)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n\n        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph\n        - record: cnch:profile_events:labelled_query_vw_workers:total_rate1h\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[1h])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload!~".*server.*"}\n        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers\n        # TODO remove this\n        - record: cnch:profile_event:queries_vw_only:total_rate1h\n          expr: |-\n            cnch:profile_events:labelled_query_vw_workers:total_rate1h\n\n        - record: cnch:tso:requests:total_rate1h\n          expr: |-\n            sum(rate(cnch_profile_events_tso_request_total[1h])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Err/s default to 0 if a request total exist (e.g. only success request) so it\'s included in availability\n        - record: cnch:profile_events:labelled_query_vw:error_rate1h\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_queries_failed_total{failure_type!="QueriesFailedFromUser", resource_type="vw"}[1h])) by (pod, cluster, namespace, query_type, vw, wg)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate1h)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n        - record: cnch:tso:requests:error_rate1h\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_tso_error_total[1h])) by (pod, cluster, namespace)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate1h)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Use WG level precision\n        - record: cnch:profile_events:labelled_query_vw:error_burnrate1h\n          expr: |\n            sum(cnch:profile_events:labelled_query_vw:error_rate1h) by (workload, cluster, namespace, vw, wg)\n            /\n            sum(cnch:profile_events:labelled_query_vw:total_rate1h) by (workload, cluster, namespace, vw, wg)\n\n        - record: cnch:tso:requests:error_burnrate1h\n          expr: |\n            sum(cnch:tso:requests:error_rate1h) by (workload, cluster, namespace)\n                /\n            sum(cnch:tso:requests:total_rate1h) by (workload, cluster, namespace)\n\n        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule\n        # Worker POV is used in workers dashboard only\n        - record: cnch:profile_events:labelled_query_vw:total_rate6h\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[6h])) by (pod, cluster, namespace, query_type, vw, wg)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n\n        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph\n        - record: cnch:profile_events:labelled_query_vw_workers:total_rate6h\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[6h])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload!~".*server.*"}\n        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers\n        # TODO remove this\n        - record: cnch:profile_event:queries_vw_only:total_rate6h\n          expr: |-\n            cnch:profile_events:labelled_query_vw_workers:total_rate6h\n\n        - record: cnch:tso:requests:total_rate6h\n          expr: |-\n            sum(rate(cnch_profile_events_tso_request_total[6h])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Err/s default to 0 if a request total exist (e.g. only success request) so it\'s included in availability\n        - record: cnch:profile_events:labelled_query_vw:error_rate6h\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_queries_failed_total{failure_type!="QueriesFailedFromUser", resource_type="vw"}[6h])) by (pod, cluster, namespace, query_type, vw, wg)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate6h)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n        - record: cnch:tso:requests:error_rate6h\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_tso_error_total[6h])) by (pod, cluster, namespace)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate6h)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Use WG level precision\n        - record: cnch:profile_events:labelled_query_vw:error_burnrate6h\n          expr: |\n            sum(cnch:profile_events:labelled_query_vw:error_rate6h) by (workload, cluster, namespace, vw, wg)\n            /\n            sum(cnch:profile_events:labelled_query_vw:total_rate6h) by (workload, cluster, namespace, vw, wg)\n\n        - record: cnch:tso:requests:error_burnrate6h\n          expr: |\n            sum(cnch:tso:requests:error_rate6h) by (workload, cluster, namespace)\n                /\n            sum(cnch:tso:requests:total_rate6h) by (workload, cluster, namespace)\n\n        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule\n        # Worker POV is used in workers dashboard only\n        - record: cnch:profile_events:labelled_query_vw:total_rate3d\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[3d])) by (pod, cluster, namespace, query_type, vw, wg)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n\n        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph\n        - record: cnch:profile_events:labelled_query_vw_workers:total_rate3d\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="vw"}[3d])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload!~".*server.*"}\n        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers\n        # TODO remove this\n        - record: cnch:profile_event:queries_vw_only:total_rate3d\n          expr: |-\n            cnch:profile_events:labelled_query_vw_workers:total_rate3d\n\n        - record: cnch:tso:requests:total_rate3d\n          expr: |-\n            sum(rate(cnch_profile_events_tso_request_total[3d])) by (pod, cluster, namespace)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Err/s default to 0 if a request total exist (e.g. only success request) so it\'s included in availability\n        - record: cnch:profile_events:labelled_query_vw:error_rate3d\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_queries_failed_total{failure_type!="QueriesFailedFromUser", resource_type="vw"}[3d])) by (pod, cluster, namespace, query_type, vw, wg)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate3d)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel{workload=~".*server.*"}\n        - record: cnch:tso:requests:error_rate3d\n          expr: |\n            ((\n              sum(rate(cnch_profile_events_tso_error_total[3d])) by (pod, cluster, namespace)\n            )\n            or\n            (\n              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate3d)\n            ))\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        # Use WG level precision\n        - record: cnch:profile_events:labelled_query_vw:error_burnrate3d\n          expr: |\n            sum(cnch:profile_events:labelled_query_vw:error_rate3d) by (workload, cluster, namespace, vw, wg)\n            /\n            sum(cnch:profile_events:labelled_query_vw:total_rate3d) by (workload, cluster, namespace, vw, wg)\n\n        - record: cnch:tso:requests:error_burnrate3d\n          expr: |\n            sum(cnch:tso:requests:error_rate3d) by (workload, cluster, namespace)\n                /\n            sum(cnch:tso:requests:total_rate3d) by (workload, cluster, namespace)\n\n        # Use VW level precision only 5m timeframe used for dashboard only (trend avg_1d)\n        - record: cnch:profile_events:labelled_query_vw_sum:error_burnrate5m\n          expr: |\n            sum(cnch:profile_events:labelled_query_vw:error_rate5m) by (cluster, namespace, vw)\n            /\n            sum(cnch:profile_events:labelled_query_vw:total_rate5m) by (cluster, namespace, vw)\n\n        # Only used for few dashboard and 1 error alert rule, no need burn rate worker+ server POV\n        - record: cnch:profile_events:labelled_query_unlimited:total_rate5m\n          expr: |-\n            sum(rate(cnch_profile_events_labelled_query_total{resource_type="unlimited"}[5m])) by (pod, cluster, namespace, query_type)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n        - record: cnch:profile_events:labelled_query_unlimited:error_rate5m\n          expr: |-\n            sum(rate(cnch_profile_events_queries_failed_total{failure_type!="QueriesFailedFromUser", resource_type="unlimited"}[5m])) by (pod, cluster, namespace, query_type, vw, wg)\n            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel\n\n    - name: CnchMetricsAvailability\n      rules:\n        - record: cnch:wg:availability\n          labels:\n            slo: error_rate\n          # 1 = available, 0 = unavailable\n          # min() check if any of the burn rate is firing (1, 1, 0) -> 0\n          # For any burn rate, both time window must be triggered (Multiwindow) so we use max() (1, 0) -> 1 avail\n          # TODO maybe change this with a ALERTS{alertstate="firing",severity="critical", alertname=~".*BudgetBurn"}\n          # As we can\'t have the \'for 15m\' here see: https://github.com/metalmatze/slo-libsonnet/issues/52\n          expr: |\n            min by (cluster, namespace, vw, wg) (\n              max by (cluster, namespace, vw, wg) (\n                cnch:profile_events:labelled_query_vw:error_burnrate5m{vw=~".*"} <= bool (14.40 * (1 - 0.99)),\n                cnch:profile_events:labelled_query_vw:error_burnrate1h{vw=~".*"} <= bool (14.40 * (1 - 0.99))\n              ),\n              max by (cluster, namespace, vw, wg) (\n                cnch:profile_events:labelled_query_vw:error_burnrate30m{vw=~".*"} <= bool (6.00 * (1 - 0.99)),\n                cnch:profile_events:labelled_query_vw:error_burnrate6h{vw=~".*"} <= bool (6.00 * (1 - 0.99))\n              ),\n              max by (cluster, namespace, vw, wg) (\n                cnch:profile_events:labelled_query_vw:error_burnrate6h{vw=~".*"} <= bool (1.00 * (1 - 0.99)),\n                cnch:profile_events:labelled_query_vw:error_burnrate3d{vw=~".*"} <= bool (1.00 * (1 - 0.99))\n              )\n            )\n        - record: cnch:cluster:availability\n          expr: |\n            1 - (sum by (cluster, namespace) (cnch:profile_events:labelled_query_vw:error_rate5m)\n            /\n            sum by (cluster, namespace) (cnch:profile_events:labelled_query_vw:total_rate5m))\n\n')),(0,a.kt)("p",null,"\u53ef kubectl \u6267\u884c\u914d\u7f6e\u751f\u6548\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubctl apply -f cnch-metrics.yaml # \u914d\u7f6e\u5bf9\u5e94rule\n\n")),(0,a.kt)("h2",{id:"\u76d1\u63a7\u670d\u52a1\u8282\u70b9server"},"\u76d1\u63a7\u670d\u52a1\u8282\u70b9\uff08Server\uff09"),(0,a.kt)("h3",{id:"\u91cd\u8981\u6307\u6807"},"\u91cd\u8981\u6307\u6807"),(0,a.kt)("p",null,"\u4e0b\u9762\u6458\u5f55\u6bd4\u8f83\u91cd\u8981\u7684\u6307\u6807\uff0c\u8fdb\u884c\u8bf4\u660e"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\u6307\u6807\u540d\uff08\u5176\u4e2d\u5e26\u53cc\u5f15\u53f7\u7684\u662f\u7ecf\u8fc7 VM \u805a\u5408\u7684\uff09"),(0,a.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cnch:latency:queries_cluster:pct95 cnch:latency:queries_cluster:pct99"),(0,a.kt)("td",{parentName:"tr",align:null},"\u67e5\u8be2\u5ef6\u8fdf pct99 \u548c pct55")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cnch:latency:queries_cluster:slow_ratio"),(0,a.kt)("td",{parentName:"tr",align:null},"\u5927\u4e8e 10s \u7684\u6162\u67e5\u8be2\u5360\u6bd4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cnch:profile_events:labelled_query_vw:total_rate5m"),(0,a.kt)("td",{parentName:"tr",align:null},"\u6240\u6709 VW \u7684\u603b QPS\u3002")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cnch:profile_events:labelled_query_vw:error_rate5m"),(0,a.kt)("td",{parentName:"tr",align:null},"\u6240\u6709 VW \u5931\u8d25\u7684 QPS\u3002")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cnch_current_metrics_query"),(0,a.kt)("td",{parentName:"tr",align:null},"\u5176\u4e2d\u7684 label \u540d query_type \u503c\u4e3a insert \u662f\u5199\u5165\u7684 query")))),(0,a.kt)("h3",{id:"\u7ed9\u670d\u52a1\u8282\u70b9server-\u914d\u7f6e-grafana-\u770b\u677f"},"\u7ed9\u670d\u52a1\u8282\u70b9\uff08Server\uff09 \u914d\u7f6e Grafana \u770b\u677f"),(0,a.kt)("p",null,"\u770b\u677f\u7684\u5185\u5bb9\u770b\u622a\u56fe"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(8687).Z,width:"3337",height:"9813"})),(0,a.kt)("p",null,"\u6458\u5f55\u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u770b\u677f\u8fdb\u884c\u8bf4\u660e\uff1a"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\u770b\u677f\u540d"),(0,a.kt)("th",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f"),(0,a.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Queries Ducations"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'cnch:latency:queries_cluster:pct95{namespace="$namespace", cluster="$cluster"}\u548ccnch:latency:queries_cluster:pct99{namespace="$namespace", cluster="$cluster"}')),(0,a.kt)("td",{parentName:"tr",align:null},"\u67e5\u8be2\u5ef6\u8fdf\u7684 P99 \u548c P95 \u503c\u3002")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Slow Queries > 10s"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'cnch:latency:queries_cluster:slow_ratio{namespace="$namespace", cluster="$cluster"}')),(0,a.kt)("td",{parentName:"tr",align:null},"\u5927\u4e8e 10s \u7684\u6162\u67e5\u8be2\u5360\u6bd4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Queries Per Second"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'sum(cnch:profile_events:labelled_query_vw:total_rate5m{namespace="$namespace", cluster="$cluster", workload=~"$workload"})')),(0,a.kt)("td",{parentName:"tr",align:null},"\u6240\u6709 VW \u7684\u603b QPS\u3002")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"VW Queries Success"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'1 - (sum by (pod) (cnch:profile_events:labelled_query_vw:error_rate5m{cluster="$cluster", namespace="$namespace", workload=~"$workload", pod=~"$pod"}) sum by (pod) (cnch:profile_events:labelled_query_vw:total_rate5m{cluster="$cluster", namespace="$namespace", workload=~"$workload", pod=~"$pod"}))')),(0,a.kt)("td",{parentName:"tr",align:null},"\u4f7f\u7528 error_rate5m \u548c total_rate5m \u76f8\u51cf\u548c\u9664\u540e\uff0c\u5f97\u5230\u6210\u529f\u7387")))),(0,a.kt)("p",null,"Server \u7684\u5b8c\u6574 Grafana \u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff0c\u53ef\u5728 Grafana \u7684 UI \u5bfc\u5165\uff1a",(0,a.kt)("a",{target:"_blank",href:t(9603).Z},"cnch-server.json")),(0,a.kt)("h2",{id:"\u76d1\u63a7-tso"},"\u76d1\u63a7 TSO"),(0,a.kt)("h3",{id:"\u91cd\u8981\u6307\u6807-1"},"\u91cd\u8981\u6307\u6807"),(0,a.kt)("p",null,"\u4e0b\u9762\u6458\u5f55\u5bf9 TSO \u6bd4\u8f83\u91cd\u8981\u7684\u6307\u6807\uff0c\u8fdb\u884c\u8bf4\u660e\uff1a"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\u6307\u6807\u540d"),(0,a.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cnch:tso:requests:error_rate5m"),(0,a.kt)("td",{parentName:"tr",align:null},"TSO \u7ec4\u4ef6\u7684\u5931\u8d25 QPS")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cnch:tso:requests:total_rate5m"),(0,a.kt)("td",{parentName:"tr",align:null},"TSO \u7ec4\u4ef6\u7684\u603b QPS")))),(0,a.kt)("h3",{id:"\u7ed9-tso-\u914d\u7f6e-grafana-\u770b\u677f"},"\u7ed9 TSO \u914d\u7f6e Grafana \u770b\u677f"),(0,a.kt)("p",null,"\u770b\u677f\u622a\u56fe\u5982\u4e0b\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(2714).Z,width:"3355",height:"5626"})),(0,a.kt)("p",null,"\u5176\u4e2d\u91cd\u8981\u7684\u6307\u6807\u8bf4\u660e\uff1a"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\u770b\u677f\u540d"),(0,a.kt)("th",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f"),(0,a.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TSO Server Requests Per Sec"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'cnch:tso:requests:total_rate5m{namespace="$namespace", cluster="$cluster", workload=~".*server.*"}')),(0,a.kt)("td",{parentName:"tr",align:null},"Server \u7ec4\u4ef6\u5bf9 TSO \u67e5\u8be2\u7684\u7684 QPS")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TSO Worker Requests Per Sec"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'cnch:tso:requests:total_rate5m{namespace="$namespace", cluster="$cluster", workload!~".*(server\\|**kafka**).*"}')),(0,a.kt)("td",{parentName:"tr",align:null},"\u53bb\u9664 server \u548c kafka\uff0c\u53ea\u770b\u5404 worker \u5bf9 TSO \u7684\u8bf7\u6c42 QPS")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TSO Servers Requests Server Rate"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'cnch:tso:requests:error_rate5m{namespace="$namespace", cluster="$cluster", workload=~".*server.*"} cnch:tso:requests:total_rate5m{namespace="$namespace", cluster="$cluster", workload=~".*server.*"}')),(0,a.kt)("td",{parentName:"tr",align:null},"\u7528 error_rate \u548c total_rate \u76f8\u9664\uff0c\u8fc7\u6ee4\u51fa TSO \u67e5\u8be2\u7684\u5931\u8d25\u7387")))),(0,a.kt)("p",null,"TSO \u5b8c\u6574\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff1a",(0,a.kt)("a",{target:"_blank",href:t(5153).Z},"cnch-tso.json")),(0,a.kt)("h2",{id:"\u5176\u4ed6\u53ef\u4ee5\u76d1\u63a7\u7684\u4fe1\u606f"},"\u5176\u4ed6\u53ef\u4ee5\u76d1\u63a7\u7684\u4fe1\u606f"),(0,a.kt)("p",null,"\u5176\u4ed6\u5e38\u7528\u7684\u76d1\u63a7\u770b\u677f\u914d\u7f6e\u6b64\u5904\u5217\u51fa\uff0c\u4e0d\u518d\u4e00\u4e00\u622a\u56fe"),(0,a.kt)("p",null,"Cluster Overview: \u6574\u4e2a\u96c6\u7fa4\u6982\u89c8 ",(0,a.kt)("a",{target:"_blank",href:t(3674).Z},"cnch-cluster.json")),(0,a.kt)("p",null,"VW: \u5404\u8ba1\u7b97\u7ec4 Virtual Warehouse \u7684\u8be6\u60c5 ",(0,a.kt)("a",{target:"_blank",href:t(1645).Z},"cnch-vw.json")),(0,a.kt)("p",null,"DaemonManager: \u7ba1\u7406 Merge \u7b49\u540e\u53f0\u4efb\u52a1\u7684\u7ec4\u4ef6 ",(0,a.kt)("a",{target:"_blank",href:t(8832).Z},"cnch-daemonmanager.json")))}d.isMDXComponent=!0},3674:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/files/cnch-cluster-528f7b4743eed0896f1c9e1a806ecc28.json"},8832:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/files/cnch-daemonmanager-31a227d62f142b1fbe83c0790894ac4a.json"},9603:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/files/cnch-server-714ebffd7913c5ebcf50f7ad54a75559.json"},5153:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/files/cnch-tso-e5da80cfacf29b25e87fd0d44b6fdebe.json"},1645:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/files/cnch-vw-88b0cc93c60bffbd550e73900ce0d717.json"},2714:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/boxcn3CLoRUlpCEDJnEy8f6dxPe-9a6fde5cfab3aa39288f253a549a1c39.jpeg"},6758:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/boxcnMqU9e8xvq46v7IH9ORtLCf-69b89b581b04f353e3f545df9f414d45.png"},8687:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/boxcnvwueXWFISCRgsRJ66J2vKb-8988c2af21fed0034abda7d7d9f4154c.jpeg"}}]);