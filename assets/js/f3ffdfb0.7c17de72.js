"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[8714],{9613:(e,a,t)=>{t.d(a,{Zo:()=>o,kt:()=>c});var n=t(9496);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),u=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},o=function(e){var a=u(e.components);return n.createElement(i.Provider,{value:a},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},N=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),m=u(t),N=r,c=m["".concat(i,".").concat(N)]||m[N]||k[N]||l;return t?n.createElement(c,s(s({ref:a},o),{},{components:t})):n.createElement(c,s({ref:a},o))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=N;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p[m]="string"==typeof e?e:r,s[1]=p;for(var u=2;u<l;u++)s[u]=t[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}N.displayName="MDXCreateElement"},5188:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var n=t(4778),r=(t(9496),t(9613));const l={title:"Array",slug:"array",hidden:!1,createdAt:"2021-07-29T02:30:43.353Z",updatedAt:"2021-09-23T08:08:05.696Z",tags:["Docs"]},s=void 0,p={unversionedId:"SQL\u8bed\u6cd5\u8bf4\u660e/functions/array",id:"SQL\u8bed\u6cd5\u8bf4\u660e/functions/array",title:"Array",description:"Notice:",source:"@site/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/functions/array.mdx",sourceDirName:"SQL\u8bed\u6cd5\u8bf4\u660e/functions",slug:"/SQL\u8bed\u6cd5\u8bf4\u660e/functions/array",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/array",draft:!1,editUrl:"https://github.com/ByConity/ByConity/tree/main/website/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/functions/array.mdx",tags:[{label:"Docs",permalink:"/docs/tags/docs"}],version:"current",frontMatter:{title:"Array",slug:"array",hidden:!1,createdAt:"2021-07-29T02:30:43.353Z",updatedAt:"2021-09-23T08:08:05.696Z",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Arithmetic",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/arithmetic"},next:{title:"Bit & Bitmap",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/bit-bitmap"}},i={},u=[{value:"array",id:"array",level:2},{value:"arrayAll",id:"arrayall",level:2},{value:"arrayConcat",id:"arrayconcat",level:2},{value:"arrayCount",id:"arraycount",level:2},{value:"arrayCumSum",id:"arraycumsum",level:2},{value:"arrayCumSumNonNegative",id:"arraycumsumnonnegative",level:2},{value:"arrayDifference",id:"arraydifference",level:2},{value:"arrayDistinct",id:"arraydistinct",level:2},{value:"arrayElement",id:"arrayelement",level:2},{value:"arrayEnumerate",id:"arrayenumerate",level:2},{value:"arrayEnumerateDense",id:"arrayenumeratedense",level:2},{value:"arrayEnumerateUniq",id:"arrayenumerateuniq",level:2},{value:"arrayExists",id:"arrayexists",level:2},{value:"arrayFilter",id:"arrayfilter",level:2},{value:"arrayFirstIndex",id:"arrayfirstindex",level:2},{value:"arrayIntersect",id:"arrayintersect",level:2},{value:"arrayJoin",id:"arrayjoin",level:2},{value:"arrayMap",id:"arraymap",level:2},{value:"arrayPopBack",id:"arraypopback",level:2},{value:"arrayPopFront",id:"arraypopfront",level:2},{value:"arrayPushBack",id:"arraypushback",level:2},{value:"arrayPushFront",id:"arraypushfront",level:2},{value:"arrayReduce",id:"arrayreduce",level:2},{value:"arrayResize",id:"arrayresize",level:2},{value:"arrayReverse",id:"arrayreverse",level:2},{value:"arrayReverseSort",id:"arrayreversesort",level:2},{value:"arraySlice",id:"arrayslice",level:2},{value:"arraySort",id:"arraysort",level:2},{value:"arraySum",id:"arraysum",level:2},{value:"arrayUniq",id:"arrayuniq",level:2},{value:"countEqual",id:"countequal",level:2},{value:"flatten",id:"flatten",level:2},{value:"groupArrayInsertAt",id:"grouparrayinsertat",level:2},{value:"hasAll",id:"hasall",level:2},{value:"hasAny",id:"hasany",level:2},{value:"indexOf",id:"indexof",level:2},{value:"length",id:"length",level:2}],o={toc:u},m="wrapper";function k(e){let{components:a,...t}=e;return(0,r.kt)(m,(0,n.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Notice:\nSome of the examples below are referenced from ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/"},"ClickHouse Documentation")," but have been adapted and modified to work in ByConity.")),(0,r.kt)("h2",{id:"array"},"array"),(0,r.kt)("p",null,"Creates an array from the function arguments."),(0,r.kt)("p",null,"The arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn\u2019t clear which type of array to create. That is, you can\u2019t use this function to create an empty array (to do that, use the \u2018emptyArray","*","\u2019 function described above)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"array(x1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x1,...")," \u2013 must be constants and have types that have the smallest common type")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns an \u2018Array(T)\u2019 type result, where \u2018T\u2019 is the smallest common type out of the passed arguments.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT array(1,2,3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500array(1, 2, 3)\u2500\u2510\n\u2502 [1, 2, 3]      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayall"},"arrayAll"),(0,r.kt)("p",null,"Returns 1 if ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0 for all the elements in ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," . Otherwise, it returns 0.\nNote that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayAll")," is a higher-order function. You can pass a lambda function to it as the first argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayAll([func,] arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function which must return UInt8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns 1 if ",(0,r.kt)("inlineCode",{parentName:"li"},"func")," returns something other than 0 for all the elements in ",(0,r.kt)("inlineCode",{parentName:"li"},"arr"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayAll((x,y)->x==y,[1,2,3],[4,5,6]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayAll(lambda(tuple(x, y), equals(x, y)), [1, 2, 3], [4, 5, 6])\u2500\u2510\n\u2502 0                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayAll((x,y)->x==y,[1,2,3],[1,2,3]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayAll(lambda(tuple(x, y), equals(x, y)), [1, 2, 3], [1, 2, 3])\u2500\u2510\n\u2502 1                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayconcat"},"arrayConcat"),(0,r.kt)("p",null,"Combines arrays passed as arguments."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayConcat(arrays)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arrays")," \u2013 Arbitrary number of arguments of Array type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A combined array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayConcat([1, 2], [3, 4], [5, 6]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,3,4,5,6] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraycount"},"arrayCount"),(0,r.kt)("p",null,"Returns the number of elements in the arr array for which func returns something other than 0. If \u2018func\u2019 is not specified, it returns the number of non-zero elements in the array."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayCount")," is a higher-order function. You can pass a lambda function to it as the first argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayCount([func,] arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function which must return UInt8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"number of elements in the arr array for which func returns something other than 0")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCount((x,y)->x==y,[1,2,3],[1,5,3]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayCount(lambda(tuple(x, y), equals(x, y)), [1, 2, 3], [1, 5, 3])\u2500\u2510\n\u2502 2                                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraycumsum"},"arrayCumSum"),(0,r.kt)("p",null,"Returns an array of partial sums of elements in the source array (a running sum). If the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," function is specified, then the values of the array elements are converted by this function before summing."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayCumSum")," is a higher-order function. You can pass a lambda function to it as the first argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayCumSum([func,] arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An array of partial sums of elements in the source array")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCumSum([1, 1, 1, 1]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2, 3, 4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCumSum(x->x+1,[1, 1, 1, 1]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2, 4, 6, 8] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraycumsumnonnegative"},"arrayCumSumNonNegative"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayCumSum")," , returns an array of partial sums of elements in the source array (a running sum). Different ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayCumSum")," , when returned value contains a value less than zero, the value is replace with zero and the subsequent calculation is performed with zero parameters. For example:"),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySumNonNegative")," is a higher-order function. You can pass a lambda function to it as the first argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayCumSumNonNegative([func,] arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An array of partial sums of elements in the source array")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2, 0, 1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCumSumNonNegative(x->x-2,[1, 1, -4, 3]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [0, 0, 0, 1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraydifference"},"arrayDifference"),(0,r.kt)("p",null,"Calculates the difference between adjacent array elements. Returns an array where the first element will be 0, the second is the difference between ",(0,r.kt)("inlineCode",{parentName:"p"},"a[1] - a[0]")," , etc. The type of elements in the resulting array is determined by the type inference rules for subtraction (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8")," - ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"Int16")," )."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayDifference(array)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 an Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values"),"\nReturns an array of differences between adjacent elements.\nType: UInt",(0,r.kt)("em",{parentName:"p"},", Int"),", Float","*","."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayDifference([1, 2, 3, 4]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayDifference([1, 2, 3, 4])\u2500\u2510\n\u2502 [0, 1, 1, 1]                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Example of the overflow due to result type Int64:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayDifference([0, 10000000000000000000]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayDifference([0, 10000000000000000000])\u2500\u2510\n\u2502 [0, -8446744073709551616]                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraydistinct"},"arrayDistinct"),(0,r.kt)("p",null,"Takes an array, returns an array containing the distinct elements only."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayDistinct(array)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 an Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns an array containing the distinct elements.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayDistinct([1, 2, 2, 3, 1]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayDistinct([1, 2, 2, 3, 1])\u2500\u2510\n\u2502 [1, 2, 3]                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayelement"},"arrayElement"),(0,r.kt)("p",null,"Get the element with the index ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," from the array ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," . ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," must be any integer type.\nIndexes in an array begin from one."),(0,r.kt)("p",null,"Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"arr[-1]")," is the last item in the array."),(0,r.kt)("p",null,"If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error ",(0,r.kt)("inlineCode",{parentName:"p"},"Array indices are 1-based")," )."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayElement(array, n)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 an Array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n")," - an Index in the array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get the element with the index ",(0,r.kt)("inlineCode",{parentName:"li"},"n")," from the array ",(0,r.kt)("inlineCode",{parentName:"li"},"arr"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayElement([1, 2, 2, 3, 1],3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayElement([1, 2, 2, 3, 1], 3)\u2500\u2510\n\u2502 2                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayenumerate"},"arrayEnumerate"),(0,r.kt)("p",null,"Returns the array ","[1, 2, 3, \u2026 ]"),(0,r.kt)("p",null,"This function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayEnumerate(arr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2013 an Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the array ","[1, 2, 3, \u2026 ]")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT number, num FROM numbers(5) ARRAY JOIN arrayEnumerate([1,2,3]) as num\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500number\u2500\u252c\u2500num\u2500\u2510\n\u2502 0      \u2502 1   \u2502\n\u2502 0      \u2502 2   \u2502\n\u2502 0      \u2502 3   \u2502\n\u2502 1      \u2502 1   \u2502\n\u2502 1      \u2502 2   \u2502\n\u2502 1      \u2502 3   \u2502\n\u2502 2      \u2502 1   \u2502\n\u2502 2      \u2502 2   \u2502\n\u2502 2      \u2502 3   \u2502\n\u2502 3      \u2502 1   \u2502\n\u2502 3      \u2502 2   \u2502\n\u2502 3      \u2502 3   \u2502\n\u2502 4      \u2502 1   \u2502\n\u2502 4      \u2502 2   \u2502\n\u2502 4      \u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayenumeratedense"},"arrayEnumerateDense"),(0,r.kt)("p",null,"Returns an array of the same size as the source array, indicating where each element first appears in the source array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayEnumerateDense(arr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2013 an Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An array where each element first appears in the source array")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayEnumerateDense([10, 20, 10, 30])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayEnumerateDense([10, 20, 10, 30])\u2500\u2510\n\u2502 [1, 2, 1, 3]                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayenumerateuniq"},"arrayEnumerateUniq"),(0,r.kt)("p",null,"Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value."),(0,r.kt)("p",null,"For example: arrayEnumerateUniq(","[10, 20, 10, 30]",") = ","[1, 1, 2, 1]","."),(0,r.kt)("p",null,"This function is useful when using ARRAY JOIN and aggregation of array elements."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayEnumerateUniq(arr, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2013 an Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayEnumerateUniq([10, 20, 10, 30]) as res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 1, 2, 1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2, 1, 1, 2, 1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"This is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure."),(0,r.kt)("h2",{id:"arrayexists"},"arrayExists"),(0,r.kt)("p",null,"Returns 1 if there is at least one element in ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," for which ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0. Otherwise, it returns 0."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayExists")," is a higher-order function."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayExists([func,] arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function which must return UInt8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns 1 if there is at least one element in ",(0,r.kt)("inlineCode",{parentName:"li"},"arr")," for which ",(0,r.kt)("inlineCode",{parentName:"li"},"func")," returns something other than 0. Otherwise, it returns 0.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayExists((x,y)->x==y,[1, 2, 2, 3, 1],[4, 5, 6, 7, 8]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayExists(lambda(tuple(x, y), equals(x, y)), [1, 2, 2, 3, 1], [4, 5, 6, 7, 8])\u2500\u2510\n\u2502 0                                                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayExists((x,y)->x==y,[1, 2, 2, 3, 1],[1, 5, 6, 7, 8]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayExists(lambda(tuple(x, y), equals(x, y)), [1, 2, 2, 3, 1], [1, 5, 6, 7, 8])\u2500\u2510\n\u2502 1                                                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayfilter"},"arrayFilter"),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayFilter")," is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted.\nReturns an array containing only the elements in ",(0,r.kt)("inlineCode",{parentName:"p"},"arr1")," for which ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayFilter(func, arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function which must return UInt8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns an array containing only the elements in ",(0,r.kt)("inlineCode",{parentName:"li"},"arr1")," for which ",(0,r.kt)("inlineCode",{parentName:"li"},"func")," returns something other than 0.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayFilter(x -> x LIKE '%World%', ['Hello', 'abc World']) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['abc World'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayFilter((i, x) -> x LIKE '%World%', arrayEnumerate(arr), ['Hello', 'abc World'] AS arr) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2510\n\u2502 [2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"[block:api-header]",'\n{\n"title": "arrayFirst"\n}\n',"[/block]","\nReturns the first element in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arr1")," array for which ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0.\nNote that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayFirst")," is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayFirst(func, arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function which must return UInt8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the first element in the ",(0,r.kt)("inlineCode",{parentName:"li"},"arr1")," array for which ",(0,r.kt)("inlineCode",{parentName:"li"},"func")," returns something other than 0.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayFirst(x -> x LIKE '%World%', ['Hello World', 'abc World']) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello World \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayfirstindex"},"arrayFirstIndex"),(0,r.kt)("p",null,"Returns the index of the first element in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arr1")," array for which ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayFirstIndex")," is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayFirstIndex(func, arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2013 higher-order function which must return UInt8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - arrays as input for func")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the index of the first element in the ",(0,r.kt)("inlineCode",{parentName:"li"},"arr1")," array for which ",(0,r.kt)("inlineCode",{parentName:"li"},"func")," returns something other than 0.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayFirstIndex(x -> x LIKE '%World%', ['Hello World', 'abc World']) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2510\n\u2502 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayintersect"},"arrayIntersect"),(0,r.kt)("p",null,"Takes multiple arrays, returns an array with elements that are present in all source arrays. Elements order in the resulting array is the same as in the first array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayIntersect(arr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - multiple arrays")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns an array with elements that are present in all source arrays")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    arrayIntersect([1, 2], [1, 3], [2, 3]) AS no_intersect,\n    arrayIntersect([1, 2], [1, 3], [1, 4]) AS intersect\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500no_intersect\u2500\u252c\u2500intersect\u2500\u2510\n\u2502 []           \u2502 [1]       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayjoin"},"arrayJoin"),(0,r.kt)("p",null,"This is a very unusual function.\nNormal functions do not change a set of rows, but just change the values in each row (map).\nAggregate functions compress a set of rows (fold or reduce).\nThe \u2018arrayJoin\u2019 function takes each row and generates a set of rows (unfold)."),(0,r.kt)("p",null,"This function takes an array as an argument, and propagates the source row to multiple rows for the number of elements in the array."),(0,r.kt)("p",null,"All the values in columns are simply copied, except the values in the column where this function is applied; it is replaced with the corresponding array value."),(0,r.kt)("p",null,"A query can use multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayJoin")," functions. In this case, the transformation is performed multiple times."),(0,r.kt)("p",null,"Note the ARRAY JOIN syntax in the SELECT query, which provides broader possibilities."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayJoin(arr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," - an Array")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Propagates the source row to multiple rows for the number of elements in the array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayJoin([1, 2, 3] AS src) AS dst, 'Hello', src\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500dst\u2500\u252c\u2500'Hello'\u2500\u252c\u2500src\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1   \u2502 Hello   \u2502 [1, 2, 3] \u2502\n\u2502 2   \u2502 Hello   \u2502 [1, 2, 3] \u2502\n\u2502 3   \u2502 Hello   \u2502 [1, 2, 3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraymap"},"arrayMap"),(0,r.kt)("p",null,"Returns an array obtained from the original application of the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," function to each element in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," array."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayMap")," is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayMap(func, arr1, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func"),"- higher-order function"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr1,..")," - multiple arrays")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns an array obtained from the original application of the ",(0,r.kt)("inlineCode",{parentName:"li"},"func")," function to each element in the ",(0,r.kt)("inlineCode",{parentName:"li"},"arr")," array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMap(x -> (x + 2), [1, 2, 3]) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [3, 4, 5] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The following example shows how to create a tuple of elements from different arrays:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [(1, 4), (2, 5), (3, 6)] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraypopback"},"arrayPopBack"),(0,r.kt)("p",null,"Removes the last item from the array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayPopBack(array)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 An Array removes the last item from the original array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPopBack([1, 2, 3]) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraypopfront"},"arrayPopFront"),(0,r.kt)("p",null,"Removes the first item from the array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 An Array removes the first item from the original array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPopFront([1, 2, 3]) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2510\n\u2502 [2, 3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraypushback"},"arrayPushBack"),(0,r.kt)("p",null,"Adds one item to the end of the array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayPushBack(array, single_value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"single_value")," \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ByConity automatically sets the ",(0,r.kt)("inlineCode",{parentName:"li"},"single_value")," type for the data type of the array. Can be ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," . The function adds a ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," element to an array, and the type of array elements converts to ",(0,r.kt)("inlineCode",{parentName:"li"},"Nullable")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 An Array with the new item adds to the end of original array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPushBack(['a'], 'b') AS res, toTypeName(arrayPushBack(['a'], 'b')) as type;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [a, b] \u2502 Array(String) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPushBack(['a'], NULL) AS res, toTypeName(arrayPushBack(['a'], NULL)) as type\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [a, \u1d3a\u1d41\u1d38\u1d38] \u2502 Array(Nullable(String)) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraypushfront"},"arrayPushFront"),(0,r.kt)("p",null,"Adds one element to the beginning of the array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayPushFront(array, single_value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"single_value")," \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ByConity automatically sets the ",(0,r.kt)("inlineCode",{parentName:"li"},"single_value")," type for the data type of the array. Can be ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," . The function adds a ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," element to an array, and the type of array elements converts to ",(0,r.kt)("inlineCode",{parentName:"li"},"Nullable")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 An Array with the new item adds to the beginning of original array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPushFront(['b'], 'a') AS res, toTypeName(arrayPushFront(['b'], 'a')) as type;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [a, b] \u2502 Array(String) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPushFront(['b'], NULL) AS res, toTypeName(arrayPushFront(['b'], NULL)) as type;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\u1d3a\u1d41\u1d38\u1d38, b] \u2502 Array(Nullable(String)) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayreduce"},"arrayReduce"),(0,r.kt)("p",null,"Applies an aggregate function to array elements and returns its result. The name of the aggregation function is passed as a string in single quotes ",(0,r.kt)("inlineCode",{parentName:"p"},"'max'")," , ",(0,r.kt)("inlineCode",{parentName:"p"},"'sum'")," . When using parametric aggregate functions, the parameter is indicated after the function name in parentheses ",(0,r.kt)("inlineCode",{parentName:"p"},"'uniqUpTo(6)'")," ."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayReduce(agg_func, arr1, arr2, ..., arrN)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agg_func")," \u2014 The name of an aggregate function which should be a constant string."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Any number of array type columns as the parameters of the aggregation function.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Result of aggregate function to array elements.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReduce('max', [1, 2, 3]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayReduce('max', [1, 2, 3])\u2500\u2510\u2502                             3 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"If an aggregate function takes multiple arguments, then this function must be applied to multiple arrays of the same size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReduce('maxIf', [3, 5], [1, 0]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayReduce('maxIf', [3, 5], [1, 0])\u2500\u2510\u2502                                    3 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Example with a parametric aggregate function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\u2500\u2510\u2502                                                           4 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayresize"},"arrayResize"),(0,r.kt)("p",null,"Changes the length of the array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayResize(array, size[, extender])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2014 Array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size")," \u2014 Required length of the array.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"size")," is less than the original size of the array, the array is truncated from the right."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"size")," is larger than the initial size of the array, the array is extended to the right with ",(0,r.kt)("inlineCode",{parentName:"li"},"extender")," values or default values for the data type of the array items."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extender")," \u2014 Value for extending an array. Can be ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An array of length ",(0,r.kt)("inlineCode",{parentName:"li"},"size")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples of calls")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayResize([1], 3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayResize([1], 3)\u2500\u2510\n\u2502 [1, 0, 0]           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayResize([1], 3, NULL);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayResize([1], 3, NULL)\u2500\u2510\n\u2502 [1, \u1d3a\u1d41\u1d38\u1d38, \u1d3a\u1d41\u1d38\u1d38]           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayreverse"},"arrayReverse"),(0,r.kt)("p",null,"Returns an array of the same size as the original array containing the elements in reverse order."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayReverse(array)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2014 Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reversed orginal array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverse([1, 2, 3])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayReverse([1, 2, 3])\u2500\u2510\n\u2502 [3, 2, 1]               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayreversesort"},"arrayReverseSort"),(0,r.kt)("p",null,"Sorts the elements of the ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," array in descending order. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," function is specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," is sorted according to the result of the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," function applied to the elements of the array, and then the sorted array is reversed. If ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," accepts multiple arguments, the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," function is passed several arrays that the arguments of ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," will correspond to. Detailed examples are shown at the end of ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," description."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," is a higher-order function. You can pass a lambda function to it as the first argument. Example is shown below."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayReverseSort([func,] arr, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," - sort function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2014 Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reversed sorted array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples"),"\nExample of integer values sorting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort([1, 3, 3, 0]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayReverseSort([1, 3, 3, 0])\u2500\u2510\n\u2502 [3, 3, 1, 0]                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Example of string values sorting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort(['hello', 'world', '!']);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arrayReverseSort(['hello', 'world', '!'])\u2500\u2510\n\u2502 [world, hello, !]                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Consider the following sorting order for the ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," , ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Inf")," values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [+Inf, 3e+00, 2e+00, 1e+00, -4e+00, -Inf, NaN, NaN, \u1d3a\u1d41\u1d38\u1d38, \u1d3a\u1d41\u1d38\u1d38] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Inf")," values are first in the array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," values are last in the array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NaN")," values are right before ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," ."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-Inf")," values are right before ",(0,r.kt)("inlineCode",{parentName:"li"},"NaN")," .")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2, 3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The array is sorted in the following way:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"At first, the source array (","[1, 2, 3]",") is sorted according to the result of the lambda function applied to the elements of the array. The result is an array ","[3, 2, 1]","."),(0,r.kt)("li",{parentName:"ol"},"Array that is obtained on the previous step, is reversed. So, the final result is ","[1, 2, 3]",".")),(0,r.kt)("p",null,"The lambda function can accept multiple arguments. In this case, you need to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [hello, world] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"In this example, the array is sorted in the following way:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"At first, the source array (","[\u2018hello\u2019, \u2018world\u2019]",") is sorted according to the result of the lambda function applied to the elements of the arrays. The elements that are passed in the second array (","[2, 1]","), define the sorting keys for corresponding elements from the source array. The result is an array ","[\u2018world\u2019, \u2018hello\u2019]","."),(0,r.kt)("li",{parentName:"ol"},"Array that was sorted on the previous step, is reversed. So, the final result is ","[\u2018hello\u2019, \u2018world\u2019]",".")),(0,r.kt)("p",null,"Other examples are shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [5, 3, 4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [4, 3, 5] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayslice"},"arraySlice"),(0,r.kt)("p",null,"Returns a slice of the array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arraySlice(array, offset[, length])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array of data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offset")," \u2013 Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"length")," \u2013 The length of the required slice. If you specify a negative value, the function returns an open slice ",(0,r.kt)("inlineCode",{parentName:"li"},"[offset, array_length - length)")," . If you omit the value, the function returns the slice ",(0,r.kt)("inlineCode",{parentName:"li"},"[offset, the_end_of_array]")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Slice of array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2, \u1d3a\u1d41\u1d38\u1d38, 4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Array elements set to ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," are handled as normal values."),(0,r.kt)("h2",{id:"arraysort"},"arraySort"),(0,r.kt)("p",null,"Sorts the elements of the ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," array in ascending order. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," function is specified, sorting order is determined by the result of the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," function applied to the elements of the array. If ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," accepts multiple arguments, the ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySort")," function is passed several arrays that the arguments of ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," will correspond to. Detailed examples are shown at the end of ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySort")," description."),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySort")," is a higher-order function. You can pass a lambda function to it as the first argument. In this case, sorting order is determined by the result of the lambda function applied to the elements of the array."),(0,r.kt)("p",null,"To improve sorting efficiency, the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Schwartzian_transform"},"Schwartzian transform")," is used.\n",(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arraySort([func,] arr, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," - sort function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2014 Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sorted array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort([1, 3, 3, 0]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arraySort([1, 3, 3, 0])\u2500\u2510\n\u2502 [0, 1, 3, 3]            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Example of string values sorting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort(['hello', 'world', '!']);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arraySort(['hello', 'world', '!'])\u2500\u2510\n\u2502 [!, hello, world]                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Consider the following sorting order for the ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," , ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Inf")," values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf])\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [-Inf, -4e+00, 1e+00, 2e+00, 3e+00, +Inf, NaN, NaN, \u1d3a\u1d41\u1d38\u1d38, \u1d3a\u1d41\u1d38\u1d38] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-Inf")," values are first in the array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," values are last in the array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NaN")," values are right before ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," ."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Inf")," values are right before ",(0,r.kt)("inlineCode",{parentName:"li"},"NaN")," .")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x) -> -x, [1, 2, 3]) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [3, 2, 1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"For each element of the source array, the lambda function returns the sorting key, that is, ","[1 \u2013",">"," -1, 2 \u2013",">"," -2, 3 \u2013",">"," -3]",". Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySort")," function sorts the keys in ascending order, the result is ","[3, 2, 1]",". Thus, the ",(0,r.kt)("inlineCode",{parentName:"p"},"(x) \u2013> -x")," lambda function sets the descending order in a sorting."),(0,r.kt)("p",null,"The lambda function can accept multiple arguments. In this case, you need to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySort")," function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [world, hello] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Here, the elements that are passed in the second array (","[2, 1]",") define a sorting key for the corresponding element from the source array (","[\u2018hello\u2019, \u2018world\u2019]","), that is, ","[\u2018hello\u2019 \u2013",">"," 2, \u2018world\u2019 \u2013",">"," 1]",". Since the lambda function does not use ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," , actual values of the source array do not affect the order in the result. So, \u2018hello\u2019 will be the second element in the result, and \u2018world\u2019 will be the first."),(0,r.kt)("p",null,"Other examples are shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2, 1, 0] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2, 1, 0] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arraysum"},"arraySum"),(0,r.kt)("p",null,"Returns the sum of elements in the source array."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," function is specified, returns the sum of elements converted by this function."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySum")," is a higher-order function. You can pass a lambda function to it as the first argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arraySum([func,] arr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"func")," \u2014 higher-order function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The sum of the function values (or the array sum).\nType:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"for decimal numbers in source array (or for converted values, if ",(0,r.kt)("inlineCode",{parentName:"li"},"func")," is specified) Decimal128 Float64"),(0,r.kt)("li",{parentName:"ul"},"for numeric unsigned UInt64"),(0,r.kt)("li",{parentName:"ul"},"and for numeric signed Int64")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySum([2, 3]) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2510\n\u2502 5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySum(x -> x*x, [2, 3]) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2510\n\u2502 13  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"arrayuniq"},"arrayUniq"),(0,r.kt)("p",null,"If one argument is passed, it counts the number of different elements in the array."),(0,r.kt)("p",null,"If multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays."),(0,r.kt)("p",null,"If you want to get a list of unique items in an array, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayReduce(\u2018groupUniqArray\u2019, arr)")," ."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"arrayUniq(arr, \u2026)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayUniq([2, 3]) AS res;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2510\n\u2502 2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayUniq([2, 3, 3], [1, 2, 3]) AS res\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res\u2500\u2510\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"There are three different tuples (2,1),(3,2),(3,3)."),(0,r.kt)("h2",{id:"countequal"},"countEqual"),(0,r.kt)("p",null,"Returns the number of elements in the array equal to x. Equivalent to arrayCount (elem -",">"," elem = x, arr)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," elements are handled as separate values."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"countEqual(arr, x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - pivot element")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number of elements in the array equal to x.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countEqual([1, 2, NULL, NULL], NULL)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500countEqual([1, 2, NULL, NULL], NULL)\u2500\u2510\n\u2502 2                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"flatten"},"flatten"),(0,r.kt)("p",null,"Converts an array of arrays to a flat array.Function:- Applies to any depth of nested arrays. - Does not change arrays that are already flat. The flattened array contains all the elements from all source arrays."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"flatten(array_of_arrays)\n")),(0,r.kt)("p",null,"Alias: ",(0,r.kt)("inlineCode",{parentName:"p"},"flatten")," ."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array_of_arrays")," \u2014 Array of arrays. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"[[1,2,3], [4,5]]")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The flattened array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT flatten([[[1]], [[2], [3]]]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500flatten(array(array([1]), array([2], [3])))\u2500\u2510\n\u2502 [1, 2, 3]                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"grouparrayinsertat"},"groupArrayInsertAt"),(0,r.kt)("p",null,"Inserts a value into the array at the specified position."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"groupArrayInsertAt(default_x, size)(x, pos)\n")),(0,r.kt)("p",null,"If in one query several values are inserted into the same position, the function behaves in the following ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If a query is executed in a single thread, the first one of the inserted values is used."),(0,r.kt)("li",{parentName:"ul"},"If a query is executed in multiple threads, the resulting value is an undetermined one of the inserted values.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Value to be inserted. Expression resulting in one of the supported data types."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pos")," \u2014 Position at which the specified element ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is to be inserted. Index numbering in the array starts from zero. UInt32."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default_x")," \u2014 Default value for substituting in empty positions. Optional parameter. Expression resulting in the data type configured for the ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," parameter. If ",(0,r.kt)("inlineCode",{parentName:"li"},"default_x")," is not defined, the default values are used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size")," \u2014 Length of the resulting array. Optional parameter. When using this parameter, the default value ",(0,r.kt)("inlineCode",{parentName:"li"},"default_x")," must be specified. UInt32.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Array with inserted values.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT groupArrayInsertAt(toString(number), number * 2) FROM numbers(5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500groupArrayInsertAt(toString(number), multiply(number, 2))\u2500\u2510\u2502 ['0','','1','','2','','3','','4']                         \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT groupArrayInsertAt('-')(toString(number), number * 2) FROM numbers(5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500groupArrayInsertAt('-')(toString(number), multiply(number, 2))\u2500\u2510\n\u2502 ['0','-','1','-','2','-','3','-','4']                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT groupArrayInsertAt('-', 5)(toString(number), number * 2) FROM numbers(5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500groupArrayInsertAt('-', 5)(toString(number), multiply(number, 2))\u2500\u2510\n\u2502 ['0','-','1','-','2']                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"hasall"},"hasAll"),(0,r.kt)("p",null,"Checks whether one array is a subset of another."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"hasAll(set, subset)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set")," \u2013 Array of any type with a set of elements."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subset")," \u2013 Array of any type with elements that should be tested to be a subset of ",(0,r.kt)("inlineCode",{parentName:"li"},"set")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")," , if ",(0,r.kt)("inlineCode",{parentName:"li"},"set")," contains all of the elements from ",(0,r.kt)("inlineCode",{parentName:"li"},"subset")," ."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," , otherwise.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Peculiar properties")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An empty array is a subset of any array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Null")," processed as a value."),(0,r.kt)("li",{parentName:"ul"},"Order of values in both of arrays does not matter.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAll([], []);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAll(array(), array())\u2500\u2510\n\u2502 1                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAll([1, Null], [Null]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAll([1, NULL], [NULL])\u2500\u2510\n\u2502 1                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAll([1.0, 2, 3, 4], [1, 3]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAll([1., 2, 3, 4], [1, 3])\u2500\u2510\n\u2502 1                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAll(['a', 'b'], ['a']);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAll(['a', 'b'], ['a'])\u2500\u2510\n\u2502 1                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAll([1], ['a']);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAll([1], ['a'])\u2500\u2510\n\u2502 0                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [3, 5]]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAll(array([1, 2], [3, 4]), array([1, 2], [3, 5]))\u2500\u2510\n\u2502 0                                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"hasany"},"hasAny"),(0,r.kt)("p",null,"Checks whether two arrays have intersection by some elements."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"hasAny(array1, array2)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array1")," \u2013 Array of any type with a set of elements."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array2")," \u2013 Array of any type with a set of elements.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")," , if ",(0,r.kt)("inlineCode",{parentName:"li"},"array1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"array2")," have one similar element at least."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," , otherwise.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Peculiar properties")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Null")," processed as a value."),(0,r.kt)("li",{parentName:"ul"},"Order of values in both of arrays does not matter.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAny([1], []);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAny([1], array())\u2500\u2510\n\u2502 0                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAny([Null], [Null, 1]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAny([NULL], [NULL, 1])\u2500\u2510\n\u2502 1                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAny([-128, 1., 512], [1]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAny([-128, 1., 512], [1])\u2500\u2510\n\u2502 1                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAny([[1, 2], [3, 4]], ['a', 'c']);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAny(array([1, 2], [3, 4]), ['a', 'c'])\u2500\u2510\n\u2502 0                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [1, 2]]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500hasAll(array([1, 2], [3, 4]), array([1, 2], [1, 2]))\u2500\u2510\n\u2502 1                                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"indexof"},"indexOf"),(0,r.kt)("p",null,"Returns the index of the first \u2018x\u2019 element (starting from 1) if it is in the array, or 0 if it is not."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"indexOf(arr, x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2013 Array of any type with a set of elements."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2013 an Element.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"index of the first \u2018x\u2019 element (starting from 1)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT indexOf([1, 3, NULL, NULL], NULL);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500indexOf([1, 3, NULL, NULL], NULL)\u2500\u2510\n\u2502 3                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Elements set to ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," are handled as normal values."),(0,r.kt)("h2",{id:"length"},"length"),(0,r.kt)("p",null,"Returns the length of a arrays."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"length(array)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array of any type with a set of elements.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"length of array. UInt64")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT length([1,2,3]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500length([1, 2, 3])\u2500\u2510\n\u2502 3                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```Returns an array of `UInt` numbers from 0 to `end - 1` by 1 .\n\n**Syntax**\n\x3c!-- Different with community --\x3e\n```sql\nrange(end)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end")," \u2014 The number before which the array is constructed. Required. UInt")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Array of ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt")," numbers from 0 to ",(0,r.kt)("inlineCode",{parentName:"li"},"end - 1")," by 1 .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Implementation details")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All arguments must be positive values."),(0,r.kt)("li",{parentName:"ul"},"An exception is thrown if the query results in arrays with a total length of more than 100,000,000 elements.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT range(5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500range(5)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [0, 1, 2, 3, 4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}k.isMDXComponent=!0}}]);