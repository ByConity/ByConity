"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[2954],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),k=r,c=m["".concat(p,".").concat(k)]||m[k]||d[k]||l;return n?a.createElement(c,i(i({ref:t},u),{},{components:n})):a.createElement(c,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(4778),r=(n(9496),n(9613));const l={title:"Type Conversion",slug:"type-conversion",hidden:!1,createdAt:"2021-07-29T12:31:12.666Z",updatedAt:"2021-09-23T06:40:38.243Z",tags:["Docs"]},i=void 0,o={unversionedId:"SQL\u8bed\u6cd5\u8bf4\u660e/functions/type-conversion",id:"SQL\u8bed\u6cd5\u8bf4\u660e/functions/type-conversion",title:"Type Conversion",description:"Notice:",source:"@site/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/functions/type-conversion.mdx",sourceDirName:"SQL\u8bed\u6cd5\u8bf4\u660e/functions",slug:"/SQL\u8bed\u6cd5\u8bf4\u660e/functions/type-conversion",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/type-conversion",draft:!1,editUrl:"https://github.com/ByConity/ByConity/tree/main/website/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/functions/type-conversion.mdx",tags:[{label:"Docs",permalink:"/docs/tags/docs"}],version:"current",frontMatter:{title:"Type Conversion",slug:"type-conversion",hidden:!1,createdAt:"2021-07-29T12:31:12.666Z",updatedAt:"2021-09-23T06:40:38.243Z",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Random",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/random"},next:{title:"UUID",permalink:"/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/uuid"}},p={},s=[{value:"CAST",id:"cast",level:2},{value:"reinterpretAsDate",id:"reinterpretasdate",level:2},{value:"reinterpretAsDateTime",id:"reinterpretasdatetime",level:2},{value:"reinterpretAsFixedString",id:"reinterpretasfixedstring",level:2},{value:"reinterpretAsString",id:"reinterpretasstring",level:2},{value:"toDate",id:"todate",level:2},{value:"toDecimal(32|64)",id:"todecimal3264",level:2},{value:"toDecimal(32|64)OrNull",id:"todecimal3264ornull",level:2},{value:"toDecimal(32|64)OrZero",id:"todecimal3264orzero",level:2},{value:"toFixedString",id:"tofixedstring",level:2},{value:"toInt(8|16|32|64)",id:"toint8163264",level:2},{value:"toInt(8|16|32|64)OrNull",id:"toint8163264ornull",level:2},{value:"toInt(8|16|32|64)OrZero",id:"toint8163264orzero",level:2},{value:"toInterval(Year|Quarter|Month|Week|Day|Hour|Minute|Second)",id:"tointervalyearquartermonthweekdayhourminutesecond",level:2},{value:"toLowCardinality",id:"tolowcardinality",level:2},{value:"toString",id:"tostring",level:2},{value:"toStringCutToZero",id:"tostringcuttozero",level:2},{value:"toUInt(8|16|32|64)",id:"touint8163264",level:2},{value:"toUnixTimestamp",id:"tounixtimestamp",level:2}],u={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Notice:\nSome of the examples below are referenced from ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/"},"ClickHouse Documentation")," but have been adapted and modified to work in ByConity.")),(0,r.kt)("h2",{id:"cast"},"CAST"),(0,r.kt)("p",null,"Converts an input value to the specified data type. Unlike the reinterpret function, ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST")," tries to present the same value using the new data type. If the conversion can not be done then an exception is raised."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CAST(x, T)\nCAST(x AS t)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 A value to convert. May be of any type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")," \u2014 The name of the target data type. String."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"t")," \u2014 The target data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Converted value.\n!!! note "Note"\nIf the input value does not fit the bounds of the target type, the result overflows. For example, ',(0,r.kt)("inlineCode",{parentName:"li"},"CAST(-1, 'UInt8')")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"255")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST(toInt8(-1), 'UInt8') AS cast_int_to_uint, CAST(1.5 AS Decimal(3,2)) AS cast_float_to_decimal;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500cast_int_to_uint\u2500\u252c\u2500cast_float_to_decimal\u2500\u2510\n\u2502 255              \u2502 1.50                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    '2016-06-15 23:00:00' AS timestamp,\n    CAST(timestamp AS DateTime) AS datetime,\n    CAST(timestamp AS Date) AS date,\n    CAST(timestamp, 'String') AS string,\n    CAST(timestamp, 'FixedString(22)') AS fixed_string;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500timestamp\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500datetime\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500date\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500fixed_string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Conversion to FixedString(N) only works for arguments of type String or FixedString."),(0,r.kt)("p",null,"Type conversion to Nullable and back is supported."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(number) FROM numbers(2);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toTypeName(number)\u2500\u2510\n\u2502 UInt64             \u2502\n\u2502 UInt64             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(CAST(number, 'Nullable(UInt64)')) FROM numbers(2);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toTypeName(CAST(number, 'Nullable(UInt64)'))\u2500\u2510\n\u2502 Nullable(UInt64)                             \u2502\n\u2502 Nullable(UInt64)                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"reinterpretasdate"},"reinterpretAsDate"),(0,r.kt)("p",null,"These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn\u2019t long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"reinterpretAsDate(fixed_string)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fixed_string")," \u2014 String with bytes representation.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DateTime.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reinterpretAsDate(reinterpretAsString(toDate('2019-01-01')));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500reinterpretAsDate(reinterpretAsString(toDate('2019-01-01')))\u2500\u2510\n\u2502 2019-01-01                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"reinterpretasdatetime"},"reinterpretAsDateTime"),(0,r.kt)("p",null,"These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn\u2019t long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"reinterpretAsDateTime(fixed_string)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fixed_string")," \u2014 String with bytes representation.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DateTime.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reinterpretAsDateTime(reinterpretAsString(toDateTime('2019-01-01 00:00:00')));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500reinterpretAsDateTime(reinterpretAsString(toDateTime('2019-01-01 00:00:00')))\u2500\u2510\n\u2502 2019-01-01 00:00:00                                                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"reinterpretasfixedstring"},"reinterpretAsFixedString"),(0,r.kt)("p",null,"This function accepts a number or date or date with time, and returns a FixedString containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a FixedString that is one byte long."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"reinterpretAsFixedString(x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 a number or date or date with time.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"FixedString.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reinterpretAsFixedString(toDate('2019-01-01'));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500reinterpretAsFixedString(toDate('2019-01-01'))\u2500\u2510\n\u2502 \ufffdE                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"reinterpretasstring"},"reinterpretAsString"),(0,r.kt)("p",null,"This function accepts a number or date or date with time, and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"reinterpretAsString(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 a number or date or date with time")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String with bytes representation.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reinterpretAsString(toDate('2019-01-01'));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500reinterpretAsString(toDate('2019-01-01'))\u2500\u2510\n\u2502 \ufffdE                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todate"},"toDate"),(0,r.kt)("p",null,"converts a String, Date, DateTime, UInt","*"," number to Date type.\ntoDate"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toDate(time)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time")," \u2014 a String, Date, DateTime, UInt","*"," number.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Date")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate('2019-01-01');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500cast_int_to_uint\u2500\u252c\u2500cast_float_to_decimal\u2500\u2510\n\u2502 255              \u2502 1.50                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toDate(1)\u2500\u2500\u2510\n\u2502 1970-01-02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate(toDateTime('2019-01-01 00:00:00'));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toDate(toDateTime('2019-01-01 00:00:00'))\u2500\u2510\n\u2502 2019-01-01                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todecimal3264"},"toDecimal(32|64)"),(0,r.kt)("p",null,"Converts ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to the Decimal data type with precision of ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," . The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," can be a number or a string. The ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," (scale) parameter specifies the number of decimal places."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toDecimal32(value, S)\ntoDecimal64(value, S)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," - can be a number or a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," (scale) parameter specifies the number of decimal places.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Decimal")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32(1, 2)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toDecimal32(1, 2)\u2500\u2510\n\u2502 1.00              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32('1', 2)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toDecimal32('1', 2)\u2500\u2510\n\u2502 1.00                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todecimal3264ornull"},"toDecimal(32|64)OrNull"),(0,r.kt)("p",null,"Converts an input string to a Nullable(Decimal(P,S)) data type value."),(0,r.kt)("p",null,"These functions should be used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"toDecimal*()")," functions, if you prefer to get a ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," value instead of an exception in the event of an input value parsing error."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toDecimal32OrNull(expr, S)\ntoDecimal64OrNull(expr, S)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression, returns a value in the String data type. ByConity expects the textual representation of the decimal number. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"'1.111'")," ."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," \u2014 Scale, the number of decimal places in the resulting value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value"),"\nA value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable(Decimal(P,S))")," data type. The value contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number with ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places, if ByConity interprets the input string as a number."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," , if ByConity can\u2019t interpret the input string as a number or if the input number contains more than ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrNull(toString(-1.111), 5) AS val, toTypeName(val);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500val\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(toDecimal32OrNull(toString(-1.111), 5))\u2500\u2510\n\u2502 -1.11100 \u2502 Nullable(Decimal(9, 5))                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrNull(toString(-1.111), 2) AS val, toTypeName(val);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500val\u2500\u2500\u252c\u2500toTypeName(toDecimal32OrNull(toString(-1.111), 2))\u2500\u2510\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Decimal(9, 2))                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todecimal3264orzero"},"toDecimal(32|64)OrZero"),(0,r.kt)("p",null,"Converts an input value to the Decimal(P,S) data type."),(0,r.kt)("p",null,"These functions should be used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"toDecimal*()")," functions, if you prefer to get a ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," value instead of an exception in the event of an input value parsing error."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toDecimal32OrZero( expr, S)\ntoDecimal64OrZero( expr, S)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression data type. ByConity expects the textual representation of the decimal number. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"'1.111'")," ."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," \u2014 Scale, the number of decimal places in the resulting value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value"),"\nA value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable(Decimal(P,S))")," data type. The value contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number with ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places, if ByConity interprets the input string as a number."),(0,r.kt)("li",{parentName:"ul"},"0 with ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places, if ByConity can\u2019t interpret the input string as a number or if the input number contains more than ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrZero(toString(-1.111), 5) AS val, toTypeName(val);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500val\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(toDecimal32OrZero(toString(-1.111), 5))\u2500\u2510\n\u2502 -1.11100 \u2502 Decimal(9, 5)                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrZero(toString(-1.111), 2) AS val, toTypeName(val);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500val\u2500\u2500\u252c\u2500toTypeName(toDecimal32OrZero(toString(-1.111), 2))\u2500\u2510\n\u2502 0.00 \u2502 Decimal(9, 2)                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tofixedstring"},"toFixedString"),(0,r.kt)("p",null,"Converts a String type argument to a FixedString(N) type (a string with fixed length N). N must be a constant."),(0,r.kt)("p",null,"If the string has fewer bytes than N, it is padded with null bytes to the right. If the string has more bytes than N, an exception is thrown."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toFixedString(s, N)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," \u2014 String."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"N")," \u2014 a constant.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"FixedString")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toFixedString('1234', 5)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toFixedString('1234', 5)\u2500\u2510\n\u2502 1234                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"toint8163264"},"toInt(8|16|32|64)"),(0,r.kt)("p",null,"Converts an input value to the Int data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toInt8(expr)\ntoInt16(expr)\ntoInt32(expr)\ntoInt64(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Integer value in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int8")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int16")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int32")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64")," data type.")),(0,r.kt)("p",null,"Functions use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero"},"rounding towards zero")," , meaning they truncate fractional digits of numbers."),(0,r.kt)("p",null,"The behavior of functions for the NaN and Inf arguments is undefined."),(0,r.kt)("p",null,"When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types."),(0,r.kt)("p",null,"ByConity has the ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/implicit_conversion"},"same behavior as C++ programs"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toInt64(nan), toInt32(32), toInt16('16'), toInt8(8.8);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toInt64(nan)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toInt32(32)\u2500\u252c\u2500toInt16('16')\u2500\u252c\u2500toInt8(8.8)\u2500\u2510\n\u2502 -9223372036854775808 \u2502 32          \u2502 16            \u2502 8           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"toint8163264ornull"},"toInt(8|16|32|64)OrNull"),(0,r.kt)("p",null,"It takes an argument of type String and tries to parse it into Int (8 | 16 | 32 | 64). If failed, returns NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toInt8OrNull(expr)\ntoInt16OrNull(expr)\ntoInt32OrNull(expr)\ntoInt64OrNull(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Integer value in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int8")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int16")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int32")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64")," data type.")),(0,r.kt)("p",null,"Functions use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero"},"rounding towards zero")," , meaning they truncate fractional digits of numbers."),(0,r.kt)("p",null,"The behavior of functions for the NaN and Inf arguments is undefined."),(0,r.kt)("p",null,"When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types."),(0,r.kt)("p",null,"ByConity has the ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/implicit_conversion"},"same behavior as C++ programs"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toInt64OrNull('123123'), toInt8OrNull('123qwe123');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toInt64OrNull('123123')\u2500\u252c\u2500toInt8OrNull('123qwe123')\u2500\u2510\n\u2502                  123123 \u2502                      \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"toint8163264orzero"},"toInt(8|16|32|64)OrZero"),(0,r.kt)("p",null,"It takes an argument of type String and tries to parse it into Int (8 | 16 | 32 | 64 ). If failed, returns 0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toInt8OrZero(expr)\ntoInt16OrZero(expr)\ntoInt32OrZero(expr)\ntoInt64OrZero(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Integer value in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int8")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int16")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int32")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64")," data type.")),(0,r.kt)("p",null,"Functions use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero"},"rounding towards zero")," , meaning they truncate fractional digits of numbers."),(0,r.kt)("p",null,"The behavior of functions for the NaN and Inf arguments is undefined."),(0,r.kt)("p",null,"When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types."),(0,r.kt)("p",null,"ByConity has the ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/implicit_conversion"},"same behavior as C++ programs"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toInt64OrZero('123123'), toInt8OrZero('123qwe123');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toInt64OrZero('123123')\u2500\u252c\u2500toInt8OrZero('123qwe123')\u2500\u2510\n\u2502 123123                  \u2502 0                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tointervalyearquartermonthweekdayhourminutesecond"},"toInterval(Year|Quarter|Month|Week|Day|Hour|Minute|Second)"),(0,r.kt)("p",null,"Converts a Number type argument to an Interval data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toIntervalSecond(number)\ntoIntervalMinute(number)\ntoIntervalHour(number)\ntoIntervalDay(number)\ntoIntervalWeek(number)\ntoIntervalMonth(number)\ntoIntervalQuarter(number)\ntoIntervalYear(number)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number")," \u2014 Duration of interval. Positive integer number.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The value in ",(0,r.kt)("inlineCode",{parentName:"li"},"Interval")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\n    toDate('2019-01-01') AS date,\n    INTERVAL 1 WEEK AS interval_week,\n    toIntervalWeek(1) AS interval_to_week\nSELECT\n    date + interval_week,\n    date + interval_to_week;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500plus(date, interval_week)\u2500\u252c\u2500plus(date, interval_to_week)\u2500\u2510\n\u2502 2019-01-08                \u2502 2019-01-08                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tolowcardinality"},"toLowCardinality"),(0,r.kt)("p",null,"Converts input parameter to the LowCardianlity version of same data type."),(0,r.kt)("p",null,"To convert data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"LowCardinality")," data type use the CAST function. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST(x as String)")," ."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toLowCardinality(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression resulting in one of the supported data types.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Result of ",(0,r.kt)("inlineCode",{parentName:"li"},"expr")," . Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"LowCardinality(expr_result_type)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toLowCardinality('1');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toLowCardinality('1')\u2500\u2510\n\u2502 1                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tostring"},"toString"),(0,r.kt)("p",null,"Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times."),(0,r.kt)("p",null,"All these functions accept one argument."),(0,r.kt)("p",null,"When converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can\u2019t be parsed, an exception is thrown and the request is canceled."),(0,r.kt)("p",null,"When converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch."),(0,r.kt)("p",null,"When converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch."),(0,r.kt)("p",null,"The date and date-with-time formats for the toDate/toDateTime functions are defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\nYYYY-MM-DD\n\nYYYY-MM-DD hh:mm:ss\n\n")),(0,r.kt)("p",null,"As an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing \u2018toDate(unix_timestamp)\u2019, which otherwise would be an error and would require writing the more cumbersome \u2018toDate(toDateTime(unix_timestamp))\u2019."),(0,r.kt)("p",null,"Conversion between a date and date with time is performed the natural way: by adding a null time or dropping the time."),(0,r.kt)("p",null,"Conversion between numeric types uses the same rules as assignments between different numeric types in C++."),(0,r.kt)("p",null,"Additionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example: ",(0,r.kt)("inlineCode",{parentName:"p"},"Asia/Yekaterinburg")," In this case, the time is formatted according to the specified time zone."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toString(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 numbers, strings, dates, and datetime")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    now() AS now_local,\n    toString(now(), 'Asia/Yekaterinburg') AS now_yekat;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500now_local\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500now_yekat\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2021-08-18 15:25:59 \u2502 2021-08-18 12:25:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tostringcuttozero"},"toStringCutToZero"),(0,r.kt)("p",null,"Accepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toStringCutToZero(s)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," \u2014 String or FixedString.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"truncated string")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toFixedString('foo', 8) AS s, toStringCutToZero(s) AS s_cut;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500s\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foo \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toFixedString('foo\\0bar', 8) AS s, toStringCutToZero(s) AS s_cut;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foobar \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"touint8163264"},"toUInt(8|16|32|64)"),(0,r.kt)("p",null,"Converts an input value to the UInt data type. This function family includes:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toUInt8(expr)\ntoUInt16(expr)\ntoUInt32(expr)\ntoUInt64(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Integer value in the ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt16")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32")," , ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt64")," data type.")),(0,r.kt)("p",null,"Functions use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero"},"rounding towards zero")," , meaning they truncate fractional digits of numbers."),(0,r.kt)("p",null,"The behavior of functions for negative agruments and for the NaN and Inf arguments is undefined. If you pass a string with a negative number, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"'-32'")," , ByConity raises an exception."),(0,r.kt)("p",null,"When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types."),(0,r.kt)("p",null,"ByConity has the ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/implicit_conversion"},"same behavior as C++ programs"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toUInt64(nan), toUInt32(-32), toUInt16('16'), toUInt8(8.8);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500toUInt64(nan)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toUInt32(-32)\u2500\u252c\u2500toUInt16('16')\u2500\u252c\u2500toUInt8(8.8)\u2500\u2510\n\u2502 9223372036854775808 \u2502 4294967264    \u2502 16             \u2502 8            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tounixtimestamp"},"toUnixTimestamp"),(0,r.kt)("p",null,"For DateTime argument: converts value to the number with type UInt32 -- Unix Timestamp ( ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_time"},"https://en.wikipedia.org/wiki/Unix_time")," )."),(0,r.kt)("p",null,"For String argument: converts the input string to the datetime according to the timezone (optional second argument, server timezone is used by default) and returns the corresponding unix timestamp."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toUnixTimestamp(datetime)\ntoUnixTimestamp(str, [timezone])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"datetime")," \u2014 DateTime"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str")," - datetime string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timezone"),"(optional) - timezone")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the unix timestamp. Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32")," .")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toUnixTimestamp('2017-11-05 08:07:47', 'Asia/Tokyo') AS unix_timestamp\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500unix_timestamp\u2500\u2510\n\u2502 1509836867     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toUnixTimestamp(toDateTime('2017-11-05 08:07:47', 'Asia/Tokyo')) AS unix_timestamp\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500unix_timestamp\u2500\u2510\n\u2502 1509836867     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}d.isMDXComponent=!0}}]);