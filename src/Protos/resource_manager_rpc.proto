syntax = "proto2";
package DB.Protos;

option cc_generic_services = true;

import "cnch_common.proto";
import "data_models.proto";

/** RPC functions for the Resource Manager
  * Response fields should be optional/repeated, other than is_leader.
  * Refer to ResourceManagerClient::callToLeaderWrapper for more details
  */

message SyncResourceInfoReq
{
  required WorkerNodeResourceData resource_data = 1;
}

message SyncResourceInfoResp
{
  optional bool success = 1;
  optional bool is_leader = 2;
  optional string leader_host_port = 3;
  optional string exception = 4;
}

message RegisterWorkerNodeReq
{
  required WorkerNodeResourceData resource_data = 1;
}

message RegisterWorkerNodeResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
}

message RemoveWorkerNodeReq
{
  required string worker_id = 1;
  required string vw_name = 2;
  required string worker_group_id = 3;
}

message RemoveWorkerNodeResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
}

message CreateVirtualWarehouseReq
{
  required string vw_name = 1;
  required VirtualWarehouseSettings vw_settings = 2;
  required bool if_not_exists = 3;
}

message CreateVirtualWarehouseResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
}

message UpdateVirtualWarehouseReq
{
  required string vw_name = 1;
  required VirtualWarehouseAlterSettings vw_settings = 2;
}

message UpdateVirtualWarehouseResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
}

message GetVirtualWarehouseReq
{
  required string vw_name = 1;
}

message GetVirtualWarehouseResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  optional VirtualWarehouseData vw_data = 4;
}

message DropVirtualWarehouseReq
{
  required string vw_name = 1;
  required bool if_exists = 2;
}

message DropVirtualWarehouseResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
}

message GetAllVirtualWarehousesReq
{
}

message GetAllVirtualWarehousesResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  repeated VirtualWarehouseData vw_data = 4;
}

message GetAllWorkersReq
{
}

message GetAllWorkersResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  repeated WorkerNodeResourceData worker_data = 4;
}

message GetWorkerGroupsReq
{
    required string vw_name = 1;
}


message GetWorkerGroupsResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  repeated WorkerGroupData worker_group_data = 4;
}

message CreateWorkerGroupReq
{
  required bool if_not_exists = 1;
  required WorkerGroupData worker_group_data = 2;
  required string vw_name = 3;
}

message CreateWorkerGroupResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
}

message DropWorkerGroupReq
{
  required bool if_exists = 1;
  required string worker_group_id = 2;
}

message DropWorkerGroupResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
}

message GetAllWorkerGroupsReq
{
  optional bool with_metrics = 1;
}

message GetAllWorkerGroupsResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  repeated WorkerGroupData worker_group_data = 4;
}

/// for rpc pickWorkerGroup, pickWorker.
message RMScheduleReq
{
  required string vw_name = 1;
  required uint32 vw_schedule_algo = 2;
  optional ResourceRequirement requirement = 3;
}

message PickWorkerResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  optional HostWithPorts host_ports = 4;
  optional int32 cancel_task = 5;
}

message PickWorkersResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  repeated HostWithPorts workers = 4;
}

message PickWorkerGroupResp
{
  optional bool is_leader = 1;
  optional string leader_host_port = 2;
  optional string exception = 3;
  optional WorkerGroupData worker_group_data = 4;
}

message SyncQueueDetailsReq
{
    map<string, QueryQueueInfo> server_query_queue_map = 1;
}

message SyncQueueDetailsResp
{
    required bool is_leader = 1;
    optional string leader_host_port = 2;
    optional string exception = 3;
    map<string, QueryQueueInfo> agg_query_queue_map = 4; // Map of vw name to QueryQueueInfo
    repeated string deleted_vws = 5;
}

service ResourceManagerService
{
  rpc syncResourceUsage(SyncResourceInfoReq) returns (SyncResourceInfoResp);
  rpc registerWorkerNode(RegisterWorkerNodeReq) returns (RegisterWorkerNodeResp);
  rpc removeWorkerNode(RemoveWorkerNodeReq) returns (RemoveWorkerNodeResp);

  rpc createVirtualWarehouse(CreateVirtualWarehouseReq) returns (CreateVirtualWarehouseResp);
  rpc updateVirtualWarehouse(UpdateVirtualWarehouseReq) returns (UpdateVirtualWarehouseResp);
  rpc getVirtualWarehouse(GetVirtualWarehouseReq) returns (GetVirtualWarehouseResp);
  rpc dropVirtualWarehouse(DropVirtualWarehouseReq) returns (DropVirtualWarehouseResp);
  rpc getAllVirtualWarehouses(GetAllVirtualWarehousesReq) returns (GetAllVirtualWarehousesResp);

  rpc getAllWorkers(GetAllWorkersReq) returns (GetAllWorkersResp);
  rpc pickWorkerGroup(RMScheduleReq) returns (PickWorkerGroupResp);
  rpc pickWorker(RMScheduleReq) returns (PickWorkerResp);
  rpc pickWorkers(RMScheduleReq) returns (PickWorkersResp);

  rpc createWorkerGroup(CreateWorkerGroupReq) returns (CreateWorkerGroupResp);
  rpc dropWorkerGroup(DropWorkerGroupReq) returns (DropWorkerGroupResp);
  rpc getWorkerGroups(GetWorkerGroupsReq) returns (GetWorkerGroupsResp);
  rpc getAllWorkerGroups(GetAllWorkerGroupsReq) returns (GetAllWorkerGroupsResp);
  rpc syncQueueDetails(SyncQueueDetailsReq) returns (SyncQueueDetailsResp);
};
