syntax = "proto2";
import "enum.proto";
import "plan_node_utils.proto";
import "cnch_common.proto";

package DB.Protos;

message ITransformingStep {
  required string step_description = 1;
  required DataStream input_stream = 2;
}

message ISourceStep {
  required Block output_header = 1;
}

message SetOperationStep {
  repeated DataStream input_streams = 1;
  required DataStream output_stream = 2;
  map<string, StringVec> output_to_inputs = 3;
}

message AssignUniqueIdStep {
  required ITransformingStep query_plan_base = 1;
  required string unique_id = 2;
}

message EnforceSingleRowStep {
  required ITransformingStep query_plan_base = 1;
}

message ExtremesStep {
  required ITransformingStep query_plan_base = 1;
}

message FillingStep {
  required ITransformingStep query_plan_base = 1;
  repeated SortColumnDescription sort_description = 2;
}

message FinishSortingStep {
  required ITransformingStep query_plan_base = 1;
  repeated SortColumnDescription prefix_description = 2;
  repeated SortColumnDescription result_description = 3;
  required uint64 max_block_size = 4;
  required uint64 limit = 5;
}

message LimitByStep {
  required ITransformingStep query_plan_base = 1;
  required uint64 group_length = 2;
  required uint64 group_offset = 3;
  repeated string columns = 4;
}

message LimitStep {
  required ITransformingStep query_plan_base = 1;
  required uint64 limit = 2; // deprecated, use limit_or_var instead
  required uint64 offset = 3; // deprecated, use offset_or_var instead
  required bool always_read_till_end = 4;
  required bool with_ties = 5;
  repeated SortColumnDescription description = 6;
  required bool partial = 7;
  optional SizeOrVariable limit_or_var = 8;
  optional SizeOrVariable offset_or_var = 9;
}

message MarkDistinctStep {
  required ITransformingStep query_plan_base = 1;
  required string marker_symbol = 2;
  repeated string distinct_symbols = 3;
}

message MergingSortedStep {
  required ITransformingStep query_plan_base = 1;
  repeated SortColumnDescription sort_description = 2;
  required uint64 max_block_size = 3;
  required uint64 limit = 4;
}

message OffsetStep {
  required ITransformingStep query_plan_base = 1;
  required uint64 offset = 2;
}

message SortingStep {
  message Stage {
    enum Enum {
        FULL = 0;
        MERGE = 1;
        PARTIAL = 2;
        PARTIAL_NO_MERGE = 3;
    }
  }

  required ITransformingStep query_plan_base = 1;
  repeated SortColumnDescription result_description = 2;
  required uint64 limit = 3; // deprecated, use limit_or_var instead
  required bool partial = 4;
  repeated SortColumnDescription prefix_description = 5;
  optional Stage.Enum stage = 6;
  optional SizeOrVariable limit_or_var = 7;
}

message ValuesStep {
  required ISourceStep query_plan_base = 1;
  repeated Field fields = 2;
  required uint64 rows = 3;
}

message ExceptStep {
  required SetOperationStep query_plan_base = 1;
  required bool distinct = 2;
}

message IntersectStep {
  required SetOperationStep query_plan_base = 1;
  required bool distinct = 2;
}

message UnionStep {
  required SetOperationStep query_plan_base = 1;
  required uint64 max_threads = 2;
  required bool local = 3;
}

message ExchangeStep {
  repeated DataStream input_streams = 1;
  required ExchangeMode.Enum exchange_type = 2;
  required Partitioning schema = 3;
  required bool keep_order = 4;
}

message CTERefStep {
  required ISourceStep query_plan_base = 1;
  required uint32 id = 2;
  map<string, string> output_columns = 3;
  required bool has_filter = 4;
}

message DistinctStep {
  required ITransformingStep query_plan_base = 1;
  required SizeLimits set_size_limits = 2;
  required uint64 limit_hint = 3;
  repeated string columns = 4;
  required bool pre_distinct = 5;
}

message PartialSortingStep {
  required ITransformingStep query_plan_base = 1;
  repeated SortColumnDescription sort_description = 2;
  required uint64 limit = 3;
  required SizeLimits size_limits = 4;
}

message PartitionTopNStep {
  required ITransformingStep query_plan_base = 1;
  repeated string partition = 2;
  repeated string order_by = 3;
  required uint64 limit = 4;
  required TopNModel.Enum model = 5;
}

message ReadNothingStep {
  required ISourceStep query_plan_base = 1;
}

message ApplyStep {
  // unimplemented
  message ApplyType {
    enum Enum {
      CROSS = 0;
      LEFT = 1;
      SEMI = 2;
      ANTI = 3;
    }
  }
  message SubqueryType {
    enum Enum {
      SCALAR = 0;
      IN = 1;
      EXISTS = 2;
      QUANTIFIED_COMPARISON = 3;
    }
  }
}

message TopNFilteringStep {
  required ITransformingStep query_plan_base = 1;
  repeated SortColumnDescription sort_description = 2;
  required uint64 size = 3;
  required TopNModel.Enum model = 4;
  optional TopNFilteringAlgorithm.Enum algorithm = 5;
}

message TableWriteStep {
  message InsertTarget {
    required StorageID storage_id = 1;
    repeated NameAndTypePair columns = 2;
    optional AST query = 3;
  }

  message Target {
    oneof target {
      InsertTarget insert_target = 1;
    }
  }

  required ITransformingStep query_plan_base = 1;
  required Target target = 2;
  optional bool insert_select_with_profiles = 3;
}

message TableFinishStep {
  required ITransformingStep query_plan_base = 1;
  required TableWriteStep.Target target = 2;
  required string output_affected_row_count_symbol = 3;
  optional AST query = 4;
}

message OutfileWriteStep {
  message OutfileTarget {
    required string request_uri = 1;
    required string format = 2;
    required string compression_method_str = 3;
    required uint64 compression_level = 4;
  }

  required ITransformingStep query_plan_base = 1;
  required OutfileTarget outfile_target = 2;
}

message OutfileFinishStep {}

message FilterStep {
  required ITransformingStep query_plan_base = 1;
  required AST filter = 2;
  required bool remove_filter_column = 3;
}

message ProjectionStep {
  required ITransformingStep query_plan_base = 1;
  required Assignments assignments = 2;
  map<string, DataType> name_to_type = 3;
  required bool final_project = 4;
  map<string, RuntimeFilterBuildInfos> dynamic_filters = 5;
  required bool index_project = 6;
}

message JoinStep {
  message RuntimeFilterBuilders {
    required string key = 1;
    required RuntimeFilterBuildInfos value = 2;
  }
  repeated DataStream input_streams = 1;
  optional DataStream output_stream = 2;
  required string step_description = 3;
  required ASTTableJoin.Kind.Enum kind = 4;
  required ASTTableJoin.Strictness.Enum strictness = 5;
  required uint64 max_streams = 6;
  required bool keep_left_read_in_order = 7;
  repeated string left_keys = 8;
  repeated string right_keys = 9;
  required AST filter = 10;
  required bool has_using = 11;
  required bool flag_require_right_keys = 12;
  repeated bool require_right_keys = 13;
  required ASOF.Inequality.Enum asof_inequality = 14;
  required DistributionType.Enum distribution_type = 15;
  required JoinAlgorithm.Enum join_algorithm = 16;
  required bool is_magic = 17;
  required bool is_ordered = 18;
  repeated RuntimeFilterBuilders runtime_filter_builders = 19;
  repeated bool key_ids_null_safe = 25;
}

message MergeSortingStep {
  required ITransformingStep query_plan_base = 1;
  repeated SortColumnDescription description = 2;
  required uint64 max_merged_block_size = 3;
  required uint64 limit = 4;
  required uint64 max_bytes_before_remerge = 5;
  required double remerge_lowered_memory_bytes_ratio = 6;
  required uint64 max_bytes_before_external_sort = 7;
  required uint64 min_free_disk_space = 8;
  optional bool enable_adaptive_spill = 9;
}

message MergingAggregatedStep {
  required ITransformingStep query_plan_base = 1;
  repeated string keys = 2;
  repeated GroupingSetsParams grouping_sets_params = 3;
  repeated GroupingDescription groupings = 4;
  required AggregatingTransformParams params = 5;
  required bool memory_efficient_aggregation = 6;
  required uint64 max_threads = 7;
  required uint64 memory_efficient_merge_threads = 8;
}

message AggregatingStep {
  required ITransformingStep query_plan_base = 1;
  repeated string keys = 2;
  required AggregatorParams params = 3;
  repeated GroupingSetsParams grouping_sets_params = 4;
  required bool final = 5;
  required uint64 max_block_size = 6;
  required uint64 merge_threads = 7;
  required uint64 temporary_data_merge_threads = 8;
  required bool storage_has_evenly_distributed_read = 9;
  optional InputOrderInfo group_by_info = 10;
  repeated SortColumnDescription group_by_sort_description = 11;
  repeated GroupingDescription groupings = 12;
  required bool should_produce_results_in_order_of_bucket_number = 13;
  repeated string keys_not_hashed = 14;
  optional bool streaming_for_cache = 15;

}

message TotalsHavingStep {
  required ITransformingStep query_plan_base = 1;
  required bool overflow_row = 2;
  optional AST having_filter = 3;
  required string filter_column_name = 4;
  required TotalsMode.Enum totals_mode = 5;
  required double auto_include_threshold = 6;
  required bool final = 7;
}

message ArrayJoinStep {
  required ITransformingStep query_plan_base = 1;
  required ArrayJoinAction array_join = 2;
}

message TableScanStep {
  required StorageID storage_id = 1;
  repeated NameWithAliasPair column_alias = 2;
  required SelectQueryInfo query_info = 3;
  required uint64 max_block_size = 4;

  optional AggregatingStep pushdown_aggregation = 5;
  optional ProjectionStep pushdown_projection = 6;
  optional FilterStep pushdown_filter = 7;
  optional Assignments inline_expressions = 14;
  optional DataStream output_stream = 15;
  optional DataStream table_output_stream = 16;
}

message RemoteExchangeSourceStep {
  required DataStream input_stream = 1;
  required string step_description = 2;
  repeated PlanSegmentInput inputs = 3;
  optional bool is_add_totals = 4;
  optional bool is_add_extremes = 5;
}

message FinalSampleStep {
  required ITransformingStep query_plan_base = 1;
  required uint64 sample_size = 2;
  required uint64 max_chunk_size = 3;
}

message ReadStorageRowCountStep {
  required ISourceStep query_plan_base = 1;
  required AST query = 3;
  required AggregateDescription agg_desc = 4;
  required uint64 num_rows = 5;
  required bool is_final_agg = 6;
}

message WindowStep {
  required ITransformingStep query_plan_base = 1;
  required WindowDescription window_description = 2;
  repeated WindowFunctionDescription window_functions = 3;
  required bool need_sort = 4;
  repeated SortColumnDescription prefix_description = 5;
}

message IntersectOrExceptStep {
  repeated DataStream input_streams = 1;
  required IntersectExceptOperator.Enum current_operator = 2;
  required uint64 max_threads = 3;
}

message BufferStep {
  required ITransformingStep query_plan_base = 1;
}

message ExplainAnalyzeStep {}

message IntermediateResultCacheStep {
  required string step_description = 1;
  required DataStream input_stream = 2;
  required CacheParam cache_param = 3;
  required AggregatorParams aggregator_params = 4;
}

message LocalExchangeStep {
  required ITransformingStep query_plan_base = 1;
  required ExchangeMode.Enum exchange_type = 2;
  required Partitioning schema = 3;
}

message MultiJoinStep {
  required Graph graph = 1;
}

message SampleRatioStep {
  required ITransformingStep query_plan_base = 1;
  required float sample_ratio = 2;
}

message ExpandStep {
  required ITransformingStep query_plan_base = 1;
  required Assignments assignments = 2;
  map<string, DataType> name_to_type = 3;
  required string group_id_symbol = 4;
  repeated uint32 group_id_value = 5;
  map<uint32, StringVec> group_id_non_null_symbol = 6;

}

// this must be identical to APPLY_STEP_PROTOBUF_TYPES_AND_NAMES
//    with Step/_step postfix
//    in src/QueryPlan/IQueryPlanStep.h
// due to Protobuf will generate 'oneof' EnumName
//    by converting variable underscore name to CamelCase,
// the CamelCase and underscore name must be perfectly matched
message QueryPlanStep {
  oneof step {
    AggregatingStep aggregating_step = 1;
    ArrayJoinStep array_join_step = 2;
    AssignUniqueIdStep assign_unique_id_step = 3;
    CTERefStep c_t_e_ref_step = 4;  // must be perfectly matched
    DistinctStep distinct_step = 5;
    EnforceSingleRowStep enforce_single_row_step = 6;
    ExceptStep except_step = 7;
    ExchangeStep exchange_step = 8;
    ExtremesStep extremes_step = 9;
    FillingStep filling_step = 10;
    FilterStep filter_step = 11;
    FinalSampleStep final_sample_step = 12;
    FinishSortingStep finish_sorting_step = 13;
    IntersectStep intersect_step = 14;
    JoinStep join_step = 15;
    LimitByStep limit_by_step = 16;
    LimitStep limit_step = 17;
    MarkDistinctStep mark_distinct_step = 18;
    MergeSortingStep merge_sorting_step = 19;
    MergingAggregatedStep merging_aggregated_step = 20;
    MergingSortedStep merging_sorted_step = 21;
    OffsetStep offset_step = 22;
    PartialSortingStep partial_sorting_step = 23;
    PartitionTopNStep partition_top_n_step = 24;
    ProjectionStep projection_step = 25;
    ReadNothingStep read_nothing_step = 26;
    ReadStorageRowCountStep read_storage_row_count_step = 27;
    RemoteExchangeSourceStep remote_exchange_source_step = 28;
    SortingStep sorting_step = 29;
    TableFinishStep table_finish_step = 30;
    TableScanStep table_scan_step = 31;
    TableWriteStep table_write_step = 32;
    TopNFilteringStep top_n_filtering_step = 33;
    UnionStep union_step = 34;
    WindowStep window_step = 35;
    ValuesStep values_step = 36;
    IntersectOrExceptStep intersect_or_except_step = 37;
    BufferStep buffer_step = 38;
    ApplyStep apply_step = 39;
    OutfileWriteStep outfile_write_step = 40;
    OutfileFinishStep outfile_finish_step = 41;
    ExplainAnalyzeStep explain_analyze_step = 44;
    TotalsHavingStep totals_having_step = 50;
    IntermediateResultCacheStep intermediate_result_cache_step = 53;
    LocalExchangeStep local_exchange_step = 54;
    MultiJoinStep multi_join_step = 55;
    SampleRatioStep sample_ratio_step = 56;
    ExpandStep expand_step = 57;
  }
}

message QueryPlanNode {
  required uint64 plan_id = 1;
  // plan_ids of children
  repeated uint64 children = 2;
  required QueryPlanStep step = 3;
}

message QueryPlan {
  message PlanMode {
    enum Enum{
      TreeLike = 1;
      Flatten = 2;
    }
  }
  required uint64 root_id = 1;
  map<uint64, QueryPlanNode> plan_nodes = 2;
  // CteId -> plan_id
  map<uint64, uint64> cte_id_mapping = 3;
  required PlanMode.Enum mode = 4;
}

message PreparedStatement {
  required string query = 1;
}

