syntax = "proto2";
package DB.Protos;

import "data_models.proto";
import "plan_node_utils.proto";
import "plan_node.proto";

option cc_generic_services = true;

message PlanSegment {
  optional string cluster_name = 1;
  optional uint32 parallel = 2;
  optional uint32  exchange_parallel_size = 3;
  required QueryPlan query_plan = 4;
  repeated PlanSegmentOutput outputs = 5;
  repeated uint32 runtime_filter_id = 6;
  optional uint32 segment_id = 7;
  optional string query_id = 8;
  optional AddressInfo coordinator_address = 9;
}

message CancelQueryRequest {
  required string query_id = 1;
  optional string coordinator_address = 2;
};

message CancelQueryResponse {
  required string ret_code = 1;
  optional string message = 2;
  optional string exception = 3;
};

message Progress {
  // below should sync with Progress.h
  optional uint64 read_rows = 1;          /// Rows (source) processed.
  optional uint64 read_bytes = 2;         /// Bytes (uncompressed, source) processed.
  optional uint64 read_raw_bytes = 3;     /// Raw bytes processed.
  optional uint64 total_rows_to_read = 4;
  optional uint64 total_raw_bytes_to_read = 5;
  optional uint64 written_rows = 6;
  optional uint64 written_bytes = 7;
  optional uint64 written_elapsed_milliseconds = 8;
  optional uint64 disk_cache_read_bytes = 9;
};

message RuntimeSegmentsMetrics {
  required int64 cpu_micros = 1;
  optional Progress progress = 2;
}

message SendBytesByParallelIndex {
  optional uint64 parallel_index = 1;
  optional uint64 bytes_sent = 2;
}

message SendBytes {
  optional uint64 exchange_id = 1;
  repeated SendBytesByParallelIndex bytes_by_index = 2;
}

message SenderMetrics {
  optional AddressInfo address = 1;
  repeated SendBytes send_bytes = 2;
}

message SendPlanSegmentStatusRequest {
  required string query_id = 1;
  required int32 segment_id = 2;
  required bool is_succeed = 3;
  required bool is_canceled = 4;
  optional RuntimeSegmentsMetrics metrics = 5;
  required int32 code = 6;
  optional string message = 7;
  optional uint64 parallel_index = 8;
  optional SenderMetrics sender_metrics = 9;
}

message SendPlanSegmentStatusResponse {
  optional string message = 1;
}

message TraceMeta {
  required string traceparent = 1;
  required string tracestate = 2;
}

message QueryCommon {
  // minor version number
  required uint32 brpc_protocol_minor_revision = 1;
  // id of distributed query
  required string query_id = 2;
  // user
  required string initial_user = 3;
  // the starting time of a distributed query
  optional int64 initial_query_start_time = 4;

  // the client info of a distributed query
  optional string initial_client_host = 5;
  optional int32 initial_client_port = 6;

  // related to query quota mechanism
  optional string quota = 7;

  // coordinator address
  optional AddressInfo coordinator_address = 8;

  // Default database.
  optional string database = 9;

  // Cnch Transaction ID
  required uint64 txn_id = 10;
    
  optional uint64 primary_txn_id = 11;
  
  // Opentelemetry protocol v2
  optional TraceMeta trace_meta = 12;

  optional bool check_session = 13;
  optional uint64 query_expiration_timestamp = 14;
}

message SubmitPlanSegmentRequest {
  // major version number
  required uint32 brpc_protocol_major_revision = 1;
  
  // common part for a mpp query
  required uint32 query_common_buf_size = 2;

  // common settings for a mpp query
  required uint32 query_settings_buf_size = 3;

  // PlanSegment buf size
  optional uint32 plan_segment_buf_size = 4;

  required uint32 plan_segment_id = 5;
  required uint32 parallel_id = 6;
  optional AddressInfo execution_address = 7;
  optional uint32 source_task_index = 8;
  optional uint32 source_task_count = 9;
  optional uint32 retry_id = 10;
}

message ExecutePlanSegmentResponse {
  optional string message = 1;
  optional WorkerNodeResourceData worker_resource_data = 2;
  optional string address = 3;
  optional string exception = 4;
}

message ReportProcessorProfileMetricRequest {
  required uint64 event_time = 1;
  required uint64 event_time_microseconds = 2;
  required string query_id = 3;
  required uint64 id = 4;
  repeated uint64 parent_ids = 5;
  required uint64 plan_step = 6;
  required uint64 plan_group = 7;
  required string processor_name = 8;
  required uint32 elapsed_us = 9;
  required uint32 input_wait_elapsed_us = 10;
  required uint32 output_wait_elapsed_us = 11;
  required uint64 input_rows = 12;
  required uint64 input_bytes = 13;
  required uint64 output_rows = 14;
  required uint64 output_bytes = 15;
  required int64 step_id = 16;
  required string worker_address = 17;
}

message BatchReportProcessorProfileMetricRequest {
  required string query_id = 1;
  repeated ReportProcessorProfileMetricRequest request = 2;
}

message ReportProcessorProfileMetricResponse {
  optional string message = 1;
}

message ReportPlanSegmentErrorRequest {
  optional string query_id = 1;
  optional int32 code = 2;
  optional string message = 3;
}

message ReportPlanSegmentErrorResponse {
  optional string message = 1;
}

message SendProgressRequest {
  optional string query_id = 1;
  optional uint64 segment_id = 2;
  optional uint64 parallel_id = 3;
  optional Progress progress = 4;
}

message SendProgressResponse {
  optional string message = 1;
}

service PlanSegmentManagerService {

  rpc submitPlanSegment(SubmitPlanSegmentRequest) returns (ExecutePlanSegmentResponse);

  rpc cancelQuery(CancelQueryRequest) returns (CancelQueryResponse);

  rpc sendPlanSegmentStatus(SendPlanSegmentStatusRequest) returns (SendPlanSegmentStatusResponse);

  rpc reportPlanSegmentError(ReportPlanSegmentErrorRequest) returns (ReportPlanSegmentErrorResponse) ;

  rpc reportProcessorProfileMetrics(ReportProcessorProfileMetricRequest) returns (ReportProcessorProfileMetricResponse);

  rpc batchReportProcessorProfileMetrics(BatchReportProcessorProfileMetricRequest) returns (ReportProcessorProfileMetricResponse);

  rpc sendProgress(SendProgressRequest) returns (SendProgressResponse);
};
