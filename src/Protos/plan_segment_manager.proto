syntax = "proto2";
package DB.Protos;

import "data_models.proto";

option cc_generic_services = true;

message CancelQueryRequest {
  required string query_id = 1;
  optional string coordinator_address = 2;
};

message CancelQueryResponse {
  required string ret_code = 1;
  optional string message = 2;
};

message RuntimeSegmentsMetrics {
      required int64 cpu_micros = 1;
}

message SendPlanSegmentStatusRequest {
  required string query_id = 1;
  required int32 segment_id = 2;
  required bool is_succeed = 3;
  required bool is_canceled = 4;
  optional RuntimeSegmentsMetrics metrics = 5;
  required int32 code = 6;
  optional string message = 7;
}

message SendPlanSegmentStatusResponse {
  optional string message = 1;
}

message ExecutePlanSegmentRequest {
  // version number for plan segment serialize and deserialize
  required uint32 brpc_protocol_minor_revision = 1;

  // the starting time of a distributed query
  required int64 initial_query_start_time = 2;
  // per query settings
  map<string, string> settings = 3;
  // inter-server cluster secret
  optional string cluster_secret = 4;
  // related to query quota mechanism
  optional string quota = 5;
  // OpenTelemetry
  optional uint64 open_telemetry_trace_id_low = 6;
  optional uint64 open_telemetry_trace_id_high = 7;
  optional uint64 open_telemetry_span_id = 8;
  optional string open_telemetry_tracestate = 9;
  optional uint32 open_telemetry_trace_flags = 10;
  // id of distributed query
  required string query_id = 11;
  // plan segment id
  required uint32 plan_segment_id = 12;
  // user
  required string user = 13;
  required string password = 14;
  // coordinator
  required string coordinator_host = 15;
  required uint32 coordinator_port = 16;
  required uint32 coordinator_exchange_port = 17;
  required uint32 coordinator_exchange_status_port = 18;
  // current
  required string current_host = 19;
  required uint32 current_port = 20;
  required uint32 current_exchange_port = 21;
  required uint32 current_exchange_status_port = 22;

  // Default database.
  optional string database = 23;

  // Cnch Transaction ID
  required uint64 txn_id = 24;

  optional uint32 brpc_protocol_major_revision = 25;
  optional uint64 primary_txn_id = 26;
}

message ExecutePlanSegmentResponse {
  optional string message = 1;
  optional WorkerNodeResourceData worker_resource_data = 2;
  optional string address = 3;
  optional string exception = 4;
}

message ReportProcessorProfileMetricRequest {
  required uint64 event_time = 1;
  required uint64 event_time_microseconds = 2;
  required string query_id = 3;
  required uint64 id = 4;
  repeated uint64 parent_ids = 5;
  required uint64 plan_step = 6;
  required uint64 plan_group = 7;
  required string processor_name = 8;
  required uint32 elapsed_us = 9;
  required uint32 input_wait_elapsed_us = 10;
  required uint32 output_wait_elapsed_us = 11;
  required uint64 input_rows = 12;
  required uint64 input_bytes = 13;
  required uint64 output_rows = 14;
  required uint64 output_bytes = 15;
  required int64 step_id = 16;
  required string worker_address = 17;
}

message BatchReportProcessorProfileMetricRequest {
  required string query_id = 1;
  repeated ReportProcessorProfileMetricRequest request = 2;
}

message ReportProcessorProfileMetricResponse {
  optional string message = 1;
}

service PlanSegmentManagerService {

  rpc executeQuery(ExecutePlanSegmentRequest) returns (ExecutePlanSegmentResponse);

  rpc cancelQuery(CancelQueryRequest) returns (CancelQueryResponse);

  rpc sendPlanSegmentStatus(SendPlanSegmentStatusRequest) returns (SendPlanSegmentStatusResponse);

  rpc reportProcessorProfileMetrics(ReportProcessorProfileMetricRequest) returns (ReportProcessorProfileMetricResponse);

  rpc batchReportProcessorProfileMetrics(BatchReportProcessorProfileMetricRequest) returns (ReportProcessorProfileMetricResponse);
};
