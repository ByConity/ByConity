syntax = "proto2";

package DB.Protos;

message StatsTableBasic {
  required int64 row_count = 1;
}

message StatsColumnBasic {
  required int64 nonnull_count = 1;
  optional int64 total_length = 2;
  optional double ndv_value = 3;
  optional double min_as_double = 4;
  optional double max_as_double = 5;
}

message StatsNdvBuckets {
  required bytes bounds_blob = 1;
  repeated int64 counts = 3;           // size = num_buckets
  repeated bytes cpc_sketch_blobs = 4; // size = num_buckets
}

message StatsNdvBucketsExtend {
  required bytes bounds_blob = 1;
  repeated int64 counts = 3;           // size = num_buckets
  repeated bytes cpc_sketch_blobs = 4; // size = num_buckets
  repeated double block_ndv_counts = 6; // size = num_buckets
}

message StatsNdvBucketsResult {
  required bytes bounds_blob = 1;
  repeated int64 counts = 3;    // size = num_buckets
  repeated double ndvs = 4;       // size = num_buckets
}

enum SerdeDataType {
  Nothing = 0;
  UInt8 = 1;
  UInt16 = 2;
  UInt32 = 3;
  UInt64 = 4;
  UInt128 = 5;
  Int8 = 6;
  Int16 = 7;
  Int32 = 8;
  Int64 = 9;
  Int128 = 10;
  Float32 = 11;
  Float64 = 12;
  StringOldVersion = 15; // this is the old version of string, here for compatibility
  String = 16;
  UInt256 = 17;
  Int256 = 18;
}
enum StatisticsType {
  Invalid = 0;
  TableBasic = 1;
  CpcSketch = 2;
  KllSketch = 3;
  NdvBuckets = 4;
  NdvBucketsResult = 5;
  ColumnBasic = 6;
  NdvBucketsExtend = 7;
  DummyAlpha = 2000;
  DummyBeta = 2001;
}

message DbStats {
  enum Version {
    Invalid = 0;
    V1 = 1; // for cnch-dev, where enum TypeIndex don't has DataTime64
    V2 = 2; // for vanilla-dev, where enum TypeIndex has DataTime64
  }
  required string db_name = 1;
  repeated TableStats tables = 2;
  optional Version version = 3;
}

message TableStats {
  required string table_name = 1;
  map<int64, bytes> blobs = 2;
  repeated ColumnStats columns = 3;
}

message ColumnStats {
  required string column_name = 1;
  map<int64, bytes> blobs = 2;
}

message VectorBool {
  repeated bool data = 1 [packed = true];
}

message VectorInteger8 {
  required bytes data = 1;
}

message VectorInteger32 {
  repeated sint32 data = 1 [packed = true];
}

message VectorInteger64 {
  // NOTE: mostly hash value,
  // use fixed64 to save space
  repeated fixed64 data = 1 [packed = true];
}

message VectorFloat {
  repeated float data = 1 [packed = true];
}

message VectorDouble {
  repeated double data = 1 [packed = true];
}

message VectorString {
  repeated string data = 1;
}

message VectorAny {
  oneof vec {
    VectorBool bool_vec = 1;
    VectorInteger8 i8_vec = 2;
    VectorInteger32 i32_vec = 3;
    VectorInteger64 i64_vec = 4;
    VectorFloat f32_vec = 5;
    VectorDouble f64_vec = 6;
    VectorString str_vec = 7;
  }
}
