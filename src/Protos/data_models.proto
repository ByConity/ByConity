syntax = "proto2";
package DB.Protos;

import "cnch_common.proto";

message DataModelWorkerGroup {
  required string vw_name = 1;
  required string worker_group_name = 2;
  repeated HostWithPorts host_ports_vec = 3;
  optional uint32 meta_version = 4;
}

message PartitionMeta {
  required string id = 1;
  required bytes partition_minmax = 2;
  optional uint32 meta_version = 3;
  optional uint32 gctime = 4; // the timestamp that partition meta marked as deleting; it will be delete from metastore after a while
}

message TableIdentifier {
    required string database = 1;
    required string name = 2;
    required string uuid = 3;
    optional uint32 meta_version = 4;
    optional string server_vw_name = 5;
    optional bool detached = 6;
    // needed in order to get the correct snapshots
    optional UUID db_uuid = 7;
}

enum CnchDatabaseType { Cnch = 0; MaterializedMySQL = 1; }
enum CnchTextCaseOption { Mixed = 0; LowerCase = 1; UpperCase = 2; }

message DataModelDB {
  required string name = 1;
  optional uint64 txnID = 2;
  required uint64 commit_time = 3;
  optional uint64 previous_version = 4;
  optional uint64 status = 5;
  repeated string tables = 6;
  optional uint32 meta_version = 7;
  optional UUID uuid = 8;
  // create query, useful for CnchMaterializedMySQL
  optional string definition = 9;
  optional CnchDatabaseType type = 10;
  optional CnchTextCaseOption text_case_option = 11;
};

message DataModelCatalog {
  required string name = 1;
  required string catalog_type = 2;
  message Property {
    required string key = 1;
    required string value = 2;
  }
  repeated Property properties = 3;
  required uint64 commit_time = 4;
}

message DataModelTableVersion {
  optional uint64 commit_time = 1;
  optional string definition = 2;
}

message DataModelTable {
  required string database = 1;
  required string name = 2;
  required UUID uuid = 3;
  required string definition = 4; // create query
  optional uint64 txnID = 5;
  required uint64 commit_time = 6;
  optional string vw_name = 7; // virtual warehouse name
  optional uint64 previous_version = 8;
  optional uint64 status = 9;
  repeated DataModelTableVersion definitions = 10;
  optional uint32 meta_version = 11;
  optional uint64 worker_topology_hash = 12;
  optional string worker_group_name = 13; // worker group name
  optional string server_vw_name = 14;    // server virtual warehouse name
  optional uint64 latest_version = 15;  // the commit_ts of the latest version; Only has value at runtime
};

message DataModelPartInfo {
  required string partition_id = 1;
  required int64 min_block = 2;
  required int64 max_block = 3;
  required uint32 level = 4;
  required int64 mutation = 5;
  required int64 hint_mutation = 6;
}

/// Part-level ttl info {min_ttl, max_ttl}, aggregated from:
/// Table ttl (ROW TTL)
/// Columns ttls
/// Row where ttls
/// Group by ttls
/// Move ttls ...
message DataModelPartTTLInfo {
  required uint64 part_min_ttl = 1;
  required uint64 part_max_ttl = 2;
  
  /// part_finished is true means all max_ttl of all ttl_infos are smaller than current time.
  /// and it means the part is completely expired.
  required bool part_finished = 3;
}

/**
 Any new added filed should be appended behind the last filed of current message
 definition. Do not change current fields' index.
 */
message DataModelPart {
  required DataModelPartInfo part_info = 1; // part info
  required uint64 size = 2;                 // part size in bytes
  required uint64 rows_count = 3;           // rows count in the part
  required bytes partition_minmax = 4;      // partition and minmax index info
  optional uint64 marks_count = 5;
  optional string columns = 6; // columns definition; same as columns.txt
  optional uint64 txnID = 7;
  optional bool deleted = 8;
  optional uint64 columns_commit_time =
      9; // columns definition version, could get from storage
  optional uint64 mutation_commit_time = 10; // used for async alter query
  optional uint64 commit_time = 11;
  optional uint32 data_path_id = 12; // Id of hdfs name node
  optional uint32 meta_version = 13;
  optional bytes min_unique_key = 14;
  optional bytes max_unique_key = 15;
  optional int64 bucket_number =
      16; // bucket_number >= 0 if the part is assigned to bucket
  optional uint64 table_definition_hash =
      17; // hash code for key columns like partition by, order by and cluster
          // by
  optional uint64 secondary_txn_id = 18;
  // if the part is originally created in the staging area, store the txn id of
  // the staged part so that the correct relative path can be constructed.
  optional uint64 staging_txn_id = 19;
  optional uint64 virtual_part_size = 20;
  optional uint32 covered_parts_count =
      22; /// record how many parts the current part covers. Used by drop range.
  optional uint64 covered_parts_size =
      23; /// record deleted part size. Used by deleted part as well as drop
          /// range.
  optional uint64 covered_parts_rows =
      24; /// record deleted rows. Used by deleted part as well as drop range.
  optional bytes data_footer = 25;
  optional bool delete_flag =
      27; /// Whether to take delete bitmap as delete flag info
  optional bool low_priority = 28; /// Whether the part belongs to unique table
                                   /// engine and from dumper tool
  repeated uint64 index_granularities = 30;
  repeated string projections =
      31; // record names of projections managed by the current part
  /// used by parts stored in object storage
  optional UUID part_id = 35;
  // commit ts of the txn removing this object
  optional uint64 end_time = 36;
  
  // remote disk cache config
  optional string disk_cache_host_port = 37;
  optional string assign_compute_host_port = 38;
  // Store the actuall modification time of a part (merge actions are not
  // included). So only merged part will contains this field.
  optional uint64 last_modification_time = 39;

  /// Aggregated part ttl info. Used for selecting parts to do ttl merge.
  optional DataModelPartTTLInfo part_ttl_info = 40;
};

message CnchFilePartInfo { required string name = 1; }

message CnchFilePartModel { required CnchFilePartInfo part_info = 1; }

enum TransactionStatus {
  Running = 0; Finished = 1; Aborted = 2; Inactive = 3;
  reserved 4 to 9; /// shouldn't have more than 10 statuses
  Unknown = 10;
};
enum TransactionPriority { low = 0; high = 1; };
enum TransactionType { Implicit = 0; Explicit = 1; }
// KEY: DLB_uuid_{PartitionID}_{MinBlock}_{MaxBlock}_{Reserved}_{Type}_{TxnID}
// DFS Path:
// {StorageUUID}/DeleteFiles/{PartitionID}/{MinBlock}_{MaxBlock}_{Reserved}_{Type}_{TxnID}.bitmap
message DataModelDeleteBitmap {
  required string partition_id = 1;
  required int64 part_min_block = 2;
  required int64 part_max_block = 3;
  // reserved to support adding multiple bitmaps for the same part in one
  // transaction
  optional uint64 reserved = 4;
  enum Type {
    // base/full bitmap
    Base = 0;
    // delta bitmap
    Delta = 1;
    // mark all bitmaps with the same PartitionID, MinBlock, MaxBlock as deleted
    Tombstone = 2;
    // mark all bitmaps in the same partition whose max_block <= tombstone's
    // max_block as deleted
    RangeTombstone = 3;
  }
  required Type type = 5;
  required uint64 txn_id = 6;
  // cardinality of the bitmap
  required uint64 cardinality = 7;
  // for embedding small bitmap directly in the metadata
  optional bytes inlined_value = 8;
  // present iff the value is stored in vfs
  optional uint64 file_size = 9;
  optional uint64 commit_time = 10;
  // commit ts of the txn removing this object
  optional uint64 end_time = 11;
  optional int64 bucket_number = 12;
}

message DataModelPartVector { repeated DataModelPart parts = 1; }

message TopicPartitionModel {
  required string topic = 1;
  required int32 partition = 2;
  required int64 offset = 3;
}

message DataModelPartitionMetrics {
  required string partition_id = 1;
  required string partition = 2;
  required string first_partition = 3;
  required uint64 total_parts_number = 4;
  required uint64 total_parts_size = 5;
  required uint64 total_rows_count = 6;
}

message DataModelTablePartitionInfo {
  required string database = 1;
  required string table = 2;
  required bool is_ready = 3; // true if parts metrics already exists in cache
  repeated DataModelPartitionMetrics partition_metrics = 4;
}

message DataModelTableInfo {
  required string database = 1;
  required string table = 2;
  required uint64 last_modification_time = 3;
  required bool cluster_status = 4;
}

message DroppedPartsMetadata {
  required uint64 txn_id = 1;
  required string partition_id = 2;
  // Parts that have a block range <= max_block are all been dropped for a
  // partition
  required uint64 max_block = 3;
  required uint64 commit_ts = 4;
}

message DataModelTransactionRecord {
  optional uint64 txn_id = 1;
  optional uint64 commit_ts = 2;
  optional TransactionStatus status = 3;
  optional TransactionPriority priority = 4;
  optional string location = 5;
  optional string initiator = 6;
  optional uint64 clean_ts = 7;
  optional UUID main_table_uuid = 8;
  optional TransactionType type = 9;
  optional uint64 primary_txn_id = 10;
}

message DataModelWriteIntent {
  required uint64 txn_id = 1;
  required string location = 2;
  required string intent = 3;
}

enum UndoResourceType {
  Part = 0;
  DeleteBitmap = 1;
  FileSystem = 2;
  StagedPart = 3;
  KVFSLockKey = 4;
  S3AttachPart = 5;
  S3DetachPart = 6;
  S3AttachMeta = 7;
  S3VolatilePart = 8;
  S3AttachDeleteBitmap = 9;
  S3DetachDeleteBitmap = 10;
  S3DetachStagedPart = 11;
}

message DataModelUndoBuffer {
  optional string uuid = 1;
  optional string placeholder_0 = 2; /// deprecated in post_1.0
  optional UndoResourceType type = 3;
  optional string placeholder_1 = 4; /// deprecated in post_1.0
  reserved 5;
  optional uint64 txn_id = 6;
  // for metadata only undo buffer, `relative_path` is not set
  optional bool metadata_only = 7;
  optional string disk_name = 8;    /// location of the resource
  repeated string placeholders = 9; /// resrouce placeholders, depending on
                                    /// types to have different interpertion
}

message DataModelLockInfo {
  optional uint64 txn_id = 1;
  optional uint32 lock_mode = 2;
  optional uint64 timeout = 3;
  optional uint64 lock_id = 4;
  optional DataModelLockField lock_field = 5;
}

message DataModelLockField {
  optional string table_prefix = 1;
  optional int64 bucket = 2;
  optional string partition = 3;
}

message DataModelDictionary {
  required string database = 1;
  required string name = 2;
  required string definition = 3;
  required int64 last_modification_time = 4;
  optional UUID uuid = 5;
  optional uint64 status = 6;
}

message DataModelHostWithPorts {
  required string hostname = 1;
  required string host = 2;
  optional uint32 rpc_port = 3;
  optional uint32 tcp_port = 4;
  optional uint32 http_port = 5;
}

message DataModelVwTopology {
  required string server_vw_name = 1;
  repeated DataModelHostWithPorts servers = 2;
}

message DataModelTopology {
  required uint64 expiration = 1;
  repeated DataModelHostWithPorts servers = 2; // deprecated
  repeated DataModelVwTopology vw_topologies = 3;
  optional uint64 initialtime = 4;
  optional uint64 term = 5;
}

message DataModelTopologyVersions { repeated DataModelTopology topologies = 1; }

message DataModelMaskingPolicy {
  optional string name = 1; // must be unique
  optional string sql_body = 2;
  optional string signature_column_type = 3;
  optional uint64 commit_time = 4;
}

message TableStatistic {
  required uint64 tag = 1;
  required uint64 timestamp = 2;
  required bytes blob = 3;
}

message ColumnStatistic {
  required uint64 tag = 1;
  required uint64 timestamp = 2;
  required bytes column = 3;
  required bytes blob = 4;
}

message SQLBinding {
  required bool is_regular_expression = 1;
  required UUID uuid = 2;
  required string pattern = 3;
  required string serialized_ast = 4;
  required uint64 timestamp = 5;
}

message VirtualWarehouseSettings {
  /// basic information ///
  // {READ, WRITE, TASK}
  required uint32 type = 1;
  reserved 2;
  reserved "size";                       // replace by num_workers.
  optional uint32 min_worker_groups = 3; // include shared groups
  optional uint32 max_worker_groups = 4; // include shared groups
  required uint32 num_workers = 5;       // #worker per group
  optional uint32 auto_suspend = 6;
  optional uint32 auto_resume = 7;

  /// vw queue (resource group) ///
  optional uint32 max_concurrent_queries = 8;
  optional uint32 vw_schedule_algo = 9;
  optional uint32 max_queued_queries = 10;
  optional uint32 max_queued_waiting_ms = 11;

  /// resource coordinator (auto-sharing & auto-scaling) ///
  optional uint32 max_auto_borrow_links = 12;
  optional uint32 max_auto_lend_links = 13;
  // vw is allowed to create a new shared wg link to other wg(in other vw) if
  // metric > threshold
  optional uint32 cpu_busy_threshold = 14;
  optional uint32 mem_busy_threshold = 15;

  // vw is allowed to share its wg to other vws if metric < threshold.
  optional uint32 cpu_idle_threshold = 16;
  optional uint32 mem_idle_threshold = 17;

  // if vw has lent wgs and metrc > threshold, recall the lent wg (by drop the
  // shared wg).
  optional uint32 cpu_threshold_for_recall = 18;
  optional uint32 mem_threshold_for_recall = 19;

  optional uint32 cooldown_seconds_after_scaleup = 20;
  optional uint32 cooldown_seconds_after_scaledown = 21;

  repeated QueueData queue_datas = 22;
};

enum QueueAlterType {
  UNKNOWN = 0;
  ADD_RULE = 1;
  DELETE_RULE = 2;
  MODIFY_RULE = 3;
};

message QueueRule {
  optional string rule_name = 1;
  repeated string databases = 2;
  repeated string tables = 3;
  optional string query_id = 4;
  optional string user = 5;
  optional string ip = 6;
  optional string fingerprint = 7;
};

message QueueData {
  //  highest = 0;  high = 1;   normal = 2;   low = 3;   lowest = 4;
  optional string queue_name = 1;
  optional uint32 max_concurrency = 2;
  optional uint32 query_queue_size = 3;
  repeated QueueRule queue_rules = 4;
};

message VirtualWarehouseAlterSettings {
  // {READ, WRITE, TASK}
  optional uint32 type = 1;
  reserved 2;
  reserved "size";
  optional uint32 min_worker_groups = 3;
  optional uint32 max_worker_groups = 4;
  optional uint32 num_workers = 5;
  optional uint32 auto_suspend = 6;
  optional uint32 auto_resume = 7;
  optional uint32 max_concurrent_queries = 8;
  optional uint32 vw_schedule_algo = 9;
  optional uint32 max_queued_queries = 10;
  optional uint32 max_queued_waiting_ms = 11;
  optional uint32 max_auto_borrow_links = 12;
  optional uint32 max_auto_lend_links = 13;
  optional uint32 cpu_busy_threshold = 14;
  optional uint32 mem_busy_threshold = 15;
  optional uint32 cpu_idle_threshold = 16;
  optional uint32 mem_idle_threshold = 17;
  optional uint32 cpu_threshold_for_recall = 18;
  optional uint32 mem_threshold_for_recall = 19;
  optional uint32 cooldown_seconds_after_scaleup = 20;
  optional uint32 cooldown_seconds_after_scaledown = 21;
  optional QueueAlterType queue_alter_type = 22;
  optional QueueData queue_data = 23; 
  optional uint32 max_concurrency = 24;
  optional uint32 query_queue_size = 25;
  optional string query_id = 26;
  optional string user = 27;
  optional string ip = 28;
  optional string rule_name = 29;
  optional bool has_table = 30;
  repeated string tables = 31;
  optional bool has_database = 32;
  repeated string databases = 33;
  optional string fingerprint = 34;
  optional string queue_name = 35;
};


message VirtualWarehouseData {
  required string name = 1;
  required UUID uuid = 2;
  required VirtualWarehouseSettings settings = 3;
  required uint32 num_worker_groups = 4;
  required uint32 num_workers = 5;
  optional uint32 num_borrowed_worker_groups = 6;
  optional uint32 num_lent_worker_groups = 7;
  optional uint64 last_borrow_timestamp = 8;
  optional uint64 last_lend_timestamp = 9;

  optional double cpu_usage_1min = 17;
  optional double memory_usage_1min = 18;

  repeated QueueData queue_datas = 19;
};

// WorkNodeCatalogData
message WorkerNodeData {
  required string id = 1;
  required string worker_group_id = 2;
  required HostWithPorts host_ports = 3;
};

message WorkerNodeResourceData {
  required string id = 1;
  required HostWithPorts host_ports = 2;

  // number of queries in process list.
  required uint32 query_num = 3;

  required double cpu_usage = 4;
  required double memory_usage = 5;
  required uint64 memory_available = 6;
  required uint64 disk_space = 7;

  optional uint64 cpu_limit = 8;
  optional uint64 memory_limit = 9;

  optional string vw_name = 10;
  optional string worker_group_id = 11;

  optional uint32 last_update_time = 12;

  optional uint64 reserved_memory_bytes = 13;
  optional uint32 reserved_cpu_cores = 14;
  optional uint32 register_time = 15;
  optional uint32 state = 16;
  optional double cpu_usage_1min = 17;
  optional double memory_usage_1min = 18;

  optional uint32 manipulation_num = 19;
  optional uint32 consumer_num = 20;
  optional uint32 dedup_num = 21;

  optional uint64 last_status_create_time = 22;
}

message WorkerGroupData {
  required string id = 1;
  required uint32 type = 2;
  optional UUID vw_uuid = 3;
  optional string vw_name = 4;
  optional string psm = 5;
  optional string linked_id = 6;
  repeated HostWithPorts host_ports_vec = 7;
  optional uint32 num_workers = 8;
  optional WorkerGroupMetrics metrics = 9;
  optional bool is_auto_linked = 10;
  optional string linked_vw_name = 11;
  repeated WorkerNodeResourceData worker_node_resource_vec = 12;
}

message WorkerMetrics {
  required string id = 1;

  optional float cpu_1min = 2;
  optional float mem_1min = 3;
  optional uint32 num_queries = 4;
  optional uint32 num_manipulations = 5;
  optional uint32 num_consumers = 6;
  optional uint32 num_dedups = 7;
}

message WorkerGroupMetrics {
  reserved 3 to 12;

  // Remove those deprecated fields in future.
  reserved "min_cpu_usage";
  reserved "max_cpu_usage";
  reserved "avg_cpu_usage";
  reserved "min_mem_usage";
  reserved "max_mem_usage";
  reserved "avg_mem_usage";
  reserved "min_mem_available";
  reserved "total_queries";
  reserved "avg_cpu_usage_1min";
  reserved "avg_mem_usage_1min";

  required string id = 1;
  repeated WorkerMetrics worker_metrics_vec = 13;
}

message ResourceRequirement {
  /// See cpu_usage_max_threshold.
  /// optional double limit_cpu = 1;
  reserved 1;

  /// Request memory in bytes.
  optional uint64 request_mem_bytes = 2;

  optional uint64 request_disk_bytes = 3;

  /// How many workers does this query/request want.
  optional uint32 expected_workers = 4;

  /// Specified worker group (may be used by pickWorker)
  optional string worker_group = 5;

  /// Request cpu cores.
  /// fetch_add operation is not supported for atomic double, so use an int
  /// type.
  optional uint32 request_cpu_cores = 6;

  /// The worker/worker group's max cpu usage should not be greater than this
  /// threshold (0 ~ 100).
  optional double cpu_usage_max_threshold = 7;

  /// RM will reserve $request_cpu_cores and $request_mem_bytes from the target
  /// worker's memory_available and cpu_usage for a while. This ensure RM not
  /// assign too many tasks to workers with low workload when handling high
  /// concurrent requests.
  optional uint32 task_cold_startup_sec = 8;

  /// Block list.
  /// Worker group id for picking a worker group.
  /// Worker id for picking workers.
  repeated string blocklist = 9;

  /// Forbid returning random result when there is not enough available
  /// candidates.
  optional bool forbid_random_result = 10;

  /// No repeated workers in the response.
  optional bool no_repeat = 11;
}

/// vw queue
message QueryQueueInfo {
  required uint32 queued_query_count = 1;
  required uint32 running_query_count = 2;
}

message DataModelFileSystemLock {
  optional string directory = 1;
  optional string database = 2;
  optional string table = 3;
  optional uint64 txn_id = 4;
  /// data files can be retrieved from undo resources with transaction id
}

enum UdfLanguageType { SQL = 1; PYTHON = 2; }

enum UdfTypeEnum { SCALAR = 1; UDAF = 2; UDTF = 3; WINDOW_UDF = 4; }

message DataModelUDF
{
    optional string prefix_name = 1;
    required string function_name = 2;
    optional string function_definition = 3;
    optional string return_data_type = 4;
    optional UdfLanguageType function_language = 5;
    optional UdfTypeEnum udf_type = 6;
}

message MaterializedMySQLManagerMetadata {
  required string database_name = 1;
  optional UUID database_uuid = 2;
  repeated string materialized_tables = 3;
  optional bool dumped_first_time = 4;
}

message MaterializedMySQLBinlogMetadata {
  required string database_name = 1;
  optional UUID database_uuid = 2;

  required string table = 3;
  optional string binlog_file = 4;
  optional uint64 binlog_position = 5;
  optional string executed_gtid_set = 6;
  optional uint32 meta_version = 7;
}

message S3SanitizerDataModelPart
{
    required DataModelPartInfo part_info = 1;  // part info
    required uint64 size = 2;  // part size in bytes
    required uint64 rows_count = 3;  // rows count in the part
    required bytes partition_minmax = 4; // partition and minmax index info
    optional uint64 marks_count = 5;
    optional string columns = 6;  // columns definition; same as columns.txt
    optional uint64 txnID = 7;
    optional bool deleted = 8;
    optional uint64 columns_commit_time = 9; // columns definition version, could get from storage
    optional uint64 mutation_commit_time = 10; // used for async alter query
    optional uint64 commit_time = 11;
    optional uint32 data_path_id = 12; // Id of hdfs name node
    optional uint32 meta_version = 13;
    optional bytes min_unique_key = 14;
    optional bytes max_unique_key = 15;
    optional int64 bucket_number = 16; // bucket_number > 0 if the part is assigned to bucket
    optional uint64 table_definition_hash = 17;  // hash code for key columns like partition by, order by and cluster by
    optional uint64 secondary_txn_id = 18;
    // if the part is originally created in the staging area, store the txn id of the staged part so that
    // the correct relative path can be constructed.
    optional uint64 staging_txn_id = 19;
    optional uint64 virtual_part_size = 20;
    optional uint32 covered_parts_count = 22;    /// record how many parts the current part covers. Used by drop range.
    optional uint64 covered_parts_size = 23;     /// record deleted part size. Used by deleted part as well as drop range.
    optional uint64 covered_parts_rows = 24;     /// record deleted rows. Used by deleted part as well as drop range.
    optional bytes data_footer = 25;
    optional UUID part_id = 26;                  /// added by ByConity
    optional bool delete_flag = 27;              /// Whether to take delete bitmap as delete flag info
    optional bool low_priority = 28;             /// Whether the part belongs to unique table engine and from dumper tool
    repeated uint64 index_granularities = 30;
    repeated string projections = 31; // record names of projections managed by the current part
    optional UUID new_part_id = 35;
};

message MySQLBinlogModel {
  optional string binlog_file = 1;
  optional uint64 binlog_position = 2;
  optional string executed_gtid_set = 3;
  optional uint32 meta_version = 4;
}

// Key: <prefix><table_uuid><parition_id>
message PartitionPartsMetricsSnapshot {
  required int64 total_parts_size = 1;
  required int64 total_parts_number = 2;
  required int64 total_rows_count = 3;
  required bool hash_bucket_number_neg_one = 4;
  required bool is_single_table_definition_hash = 5;
  required uint64 table_definition_hash = 6;
  required uint64 is_deleted = 7;
  required uint64 last_update_time = 8;
  required uint64 last_snapshot_time = 9;
  optional uint64 last_modification_time = 10;
}

// Key: <prefix><table_uuid>
message TableTrashItemsMetricsSnapshot {
  required int64 total_parts_size = 1;
  required int64 total_parts_number = 2;
  required int64 total_bitmap_size = 3;
  required int64 total_bitmap_number = 4;
  required uint64 last_update_time = 5;
  required uint64 last_snapshot_time = 6;
}

message DataModelAccessEntity
{
    optional string name = 1;
    optional string create_sql = 2; // contains CREATE and GRANT queries of the entity
    optional uint64 commit_time = 3;
    optional UUID uuid = 4;
}

message DataModelSensitiveDatabase
{
    optional string database = 1;
    repeated DataModelSensitiveTable tables = 2;
    optional bool is_sensitive = 3; // is the database sensitive
}

message DataModelSensitiveTable
{
    optional string table = 1;
    repeated string sensitive_columns = 2; // list of columns that are marked sensitive
    optional bool is_sensitive = 3; // is the table sensitive
}


message DataModelSnapshot {
  optional string name = 1;
  optional uint64 commit_time = 2;
  optional uint32 ttl_in_days = 3;
  // absent if the snapshot binds to all tables in the database
  optional UUID table_uuid = 4;
};

message LastModificationTimeHint {
  required bytes partition_id = 1;
  optional uint64 last_modification_time = 2;
}
