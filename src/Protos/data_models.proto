syntax = "proto2";
package DB.Protos;

import "cnch_common.proto";

message DataModelWorkerGroup
{
    required string vw_name = 1;
    required string worker_group_name = 2;
    repeated HostWithPorts host_ports_vec = 3;
    optional uint32 meta_version = 4;
}

message PartitionMeta
{
    required string id = 1;
    required bytes partition_minmax = 2;
    optional uint32 meta_version = 3;
}

message TableIdentifier
{
    required string database = 1;
    required string name = 2;
    required string uuid = 3;
    optional uint32 meta_version = 4;
}

message DataModelDB
{
    required string name = 1;
    optional uint64 txnID = 2;
    required uint64 commit_time = 3;
    optional uint64 previous_version = 4;
    optional uint64 status = 5;
    repeated string tables = 6;
    optional uint32 meta_version = 7;
    optional UUID uuid = 8; // optional uuid for database.
};

message DataModelTableVersion
{
    optional uint64 commit_time = 1;
    optional string definition = 2;
}

message DataModelTable
{
    required string database = 1;
    required string name = 2;
    required UUID uuid = 3;
    required string definition = 4;  // create query
    optional uint64 txnID = 5;
    required uint64 commit_time = 6;
    optional string vw_name = 7;   // virtual warehouse name
    optional uint64 previous_version = 8;
    optional uint64 status = 9;
    repeated DataModelTableVersion definitions = 10;
    optional uint32 meta_version = 11;
    optional uint64 worker_topology_hash = 12;
    optional string worker_group_name = 13;   // worker group name
};

message DataModelPartInfo
{
    required string partition_id = 1;
    required int64 min_block = 2;
    required int64 max_block = 3;
    required uint32 level = 4;
    required int64 mutation = 5;
    required int64 hint_mutation = 6;
}

/**
 Any new added filed should be appended behind the last filed of current message definition. Do not change current fields' index.
 */
message DataModelPart
{
    required DataModelPartInfo part_info = 1;  // part info
    required uint64 size = 2;  // part size in bytes
    required uint64 rows_count = 3;  // rows count in the part
    required string partition_minmax = 4; // partition and minmax index info
    optional uint64 marks_count = 5;
    optional string columns = 6;  // columns definition; same as columns.txt
    optional uint64 txnID = 7;
    optional bool deleted = 8;
    optional uint64 columns_commit_time = 9; // columns definition version, could get from storage
    optional uint64 mutation_commit_time = 10; // used for async alter query
    optional uint64 commit_time = 11;
    optional uint32 data_path_id = 12; // Id of hdfs name node
    optional uint32 meta_version = 13;
    optional bytes min_unique_key = 14;
    optional bytes max_unique_key = 15;
    optional int64 bucket_number = 16; // bucket_number > 0 if the part is assigned to bucket
    optional uint64 table_definition_hash = 17;  // hash code for key columns like partition by, order by and cluster by
    optional uint64 secondary_txn_id = 18;
    // if the part is originally created in the staging area, store the txn id of the staged part so that
    // the correct relative path can be constructed.
    optional uint64 staging_txn_id = 19;
    optional uint64 virtual_part_size = 20;
    optional uint32 covered_parts_count = 22;    /// record how many parts the current part covers. Used by drop range.
    optional uint64 covered_parts_size = 23;     /// record deleted part size. Used by deleted part as well as drop range.
    optional uint64 covered_parts_rows = 24;     /// record deleted rows. Used by deleted part as well as drop range.
    optional bytes data_footer = 25;
    repeated uint64 index_granularities = 30;
};

message CnchHivePartInfo
{
    required string name = 1;
    required string partition_id = 2;
}

message CnchHivePartModel
{
    required CnchHivePartInfo part_info = 1;
    required string relative_path = 2;
    required int64 skip_lists = 3;
    repeated int64 skip_numbers = 4;
    optional string hdfs_uri = 5;
}

enum TransactionStatus
{
    Running = 0;
    Finished = 1;
    Aborted = 2;
    Inactive = 3;
    reserved 4 to 9;    /// shouldn't have more than 10 statuses
    Unknown = 10;
};
enum TransactionPriority
{
    low = 0;
    high = 1;
};
enum TransactionType
{
    Implicit = 0;
    Explicit = 1;
}
// KEY: DLB_uuid_{PartitionID}_{MinBlock}_{MaxBlock}_{Reserved}_{Type}_{TxnID}
// DFS Path: {StorageUUID}/DeleteFiles/{PartitionID}/{MinBlock}_{MaxBlock}_{Reserved}_{Type}_{TxnID}.bitmap
message DataModelDeleteBitmap
{
    required string partition_id = 1;
    required int64 part_min_block = 2;
    required int64 part_max_block = 3;
    // reserved to support adding multiple bitmaps for the same part in one transaction
    optional uint64 reserved = 4;
    enum Type
    {
        // base/full bitmap
        Base = 0;
        // delta bitmap
        Delta = 1;
        // mark all bitmaps with the same PartitionID, MinBlock, MaxBlock as deleted
        Tombstone = 2;
        // mark all bitmaps in the same partition whose max_block <= tombstone's max_block as deleted
        RangeTombstone = 3;
    }
    required Type type = 5;
    required uint64 txn_id = 6;
    // cardinality of the bitmap
    required uint64 cardinality = 7;
    // for embedding small bitmap directly in the metadata
    optional bytes inlined_value = 8;
    // present iff the value is stored in vfs
    optional uint64 file_size = 9;
    optional uint64 commit_time = 10;
}

message DataModelPartVector
{
    repeated DataModelPart parts = 1;
}

message TopicPartitionModel
{
    required string topic = 1;
    required int32 partition = 2;
    required int64 offset = 3;
}

message DataModelPartitionMetrics
{
    required string partition_id = 1;
    required string partition = 2;
    required string first_partition = 3;
    required uint64 total_parts_number = 4;
    required uint64 total_parts_size = 5;
    required uint64 total_rows_count = 6;
}

message DataModelTablePartitionInfo
{
    required string database = 1;
    required string table = 2;
    required bool is_ready = 3;   // true if parts metrics already exists in cache
    repeated DataModelPartitionMetrics partition_metrics = 4;
}

message DataModelTableInfo
{
    required string database = 1;
    required string table = 2;
    required uint64 last_modification_time = 3;
    required bool cluster_status = 4;
}

message DroppedPartsMetadata
{
    required uint64 txn_id = 1;
    required string partition_id = 2;
    // Parts that have a block range <= max_block are all been dropped for a partition
    required uint64 max_block = 3;
    required uint64 commit_ts = 4;
}

message DataModelTransactionRecord
{
    optional uint64 txn_id = 1;
    optional uint64 commit_ts = 2;
    optional TransactionStatus status = 3;
    optional TransactionPriority priority = 4;
    optional string location = 5;
    optional string initiator = 6;
    optional uint64 clean_ts = 7;
    optional UUID main_table_uuid = 8;
    optional TransactionType type = 9;
    optional uint64 primary_txn_id = 10;
}

message DataModelWriteIntent
{
    required uint64 txn_id = 1;
    required string location = 2;
    required string intent = 3;
}

enum UndoResourceType
{
    Part = 0;
    DeleteBitmap = 1;
    FileSystem = 2;
    StagedPart = 3;
}

message DataModelUndoBuffer
{
    optional string uuid = 1;
    optional string placeholder_0 = 2;          /// deprecated in post_1.0
    optional UndoResourceType type = 3;
    optional string placeholder_1 = 4;           /// deprecated in post_1.0
    optional uint64 txn_id = 6;
    reserved 5;
    // for metadata only undo buffer, `relative_path` is not set
    optional bool metadata_only = 7;
    optional string disk_name = 8;      /// location of the resource
    repeated string placeholders = 9;   /// resrouce placeholders, depending on types to have different interpertion
}

message DataModelLockInfo
{
    optional uint64 txn_id = 1;
    optional uint32 lock_mode = 2;
    optional uint64 timeout = 3;
    optional uint64 lock_id = 4;
    optional DataModelLockField lock_field = 5;
}

message DataModelLockField
{
    optional UUID uuid = 1;
    optional int64 bucket = 2;
    optional string partition = 3;
}

message DataModelDictionary
{
    required string database = 1;
    required string name = 2;
    required string definition = 3;
    required int64  last_modification_time = 4;
    optional UUID uuid = 5;
    optional uint64 status = 6;
}

message DataModelHostWithPorts
{
    required string hostname = 1;
    required string host = 2;
    optional uint32 rpc_port = 3;
    optional uint32 tcp_port = 4;
    optional uint32 http_port =5;
}

message DataModelTopology
{
    required uint64 expiration = 1;
    repeated DataModelHostWithPorts servers = 2;
}

message DataModelTopologyVersions
{
    repeated DataModelTopology topologies = 1;
}

message DataModelMaskingPolicy
{
    optional string name = 1; // must be unique
    optional string sql_body = 2;
    optional string signature_column_type = 3;
    optional uint64 commit_time = 4;
}

message TableStatistic
{
    required uint64 tag = 1;
    required uint64 timestamp = 2;
    required bytes blob = 3;
}

message ColumnStatistic
{
    required uint64 tag = 1;
    required uint64 timestamp = 2;
    required bytes column = 3;
    required bytes blob = 4;
}

message VirtualWarehouseSettings
{
    // {READ, WRITE, TASK}
    required uint32 type = 1;
    reserved 2;
    reserved "size";
    optional uint32 min_worker_groups = 3;
    optional uint32 max_worker_groups = 4;
    required uint32 num_workers = 5;
    optional uint32 auto_suspend = 6;
    optional uint32 auto_resume = 7;
    optional uint32 max_concurrent_queries = 8;
    optional uint32 vw_schedule_algo = 9;
    optional uint32 max_queued_queries = 10;
    optional uint32 max_queued_waiting_ms = 11;
    optional uint32 max_auto_borrow_links = 12;
    optional uint32 max_auto_lend_links = 13;
    optional uint32 cpu_threshold_for_borrow = 14;
    optional uint32 mem_threshold_for_borrow = 15;
    optional uint32 cpu_threshold_for_lend = 16;
    optional uint32 mem_threshold_for_lend = 17;
    optional uint32 cpu_threshold_for_recall = 18;
    optional uint32 mem_threshold_for_recall = 19;
    optional uint32 cooldown_seconds_after_auto_link = 20;
    optional uint32 cooldown_seconds_after_auto_unlink = 21;
};

message VirtualWarehouseAlterSettings
{
    // {READ, WRITE, TASK}
    optional uint32 type = 1;
    reserved 2;
    reserved "size";
    optional uint32 min_worker_groups = 3;
    optional uint32 max_worker_groups = 4;
    optional uint32 num_workers = 5;
    optional uint32 auto_suspend = 6;
    optional uint32 auto_resume = 7;
    optional uint32 max_concurrent_queries = 8;
    optional uint32 vw_schedule_algo = 9;
    optional uint32 max_queued_queries = 10;
    optional uint32 max_queued_waiting_ms = 11;
    optional uint32 max_auto_borrow_links = 12;
    optional uint32 max_auto_lend_links = 13;
    optional uint32 cpu_threshold_for_borrow = 14;
    optional uint32 mem_threshold_for_borrow = 15;
    optional uint32 cpu_threshold_for_lend = 16;
    optional uint32 mem_threshold_for_lend = 17;
    optional uint32 cpu_threshold_for_recall = 18;
    optional uint32 mem_threshold_for_recall = 19;
    optional uint32 cooldown_seconds_after_auto_link = 20;
    optional uint32 cooldown_seconds_after_auto_unlink = 21;
};

message VirtualWarehouseData
{
    required string name = 1;
    required UUID uuid = 2;
    required VirtualWarehouseSettings settings = 3;
    required uint32 num_worker_groups = 4;
    required uint32 num_workers = 5;
    optional uint32 num_borrowed_worker_groups = 6;
    optional uint32 num_lent_worker_groups = 7;
    optional uint64 last_borrow_timestamp = 8;
    optional uint64 last_lend_timestamp = 9;
};

// WorkNodeCatalogData
message WorkerNodeData
{
    required string id = 1;
    required string worker_group_id = 2;
    required HostWithPorts host_ports = 3;
};

message WorkerNodeResourceData
{
    required string id = 1;
    required HostWithPorts host_ports = 2;

    required uint32 query_num = 3;
    required double cpu_usage = 4;
    required double memory_usage = 5;
    required uint64 memory_available = 6;
    required uint64 disk_space = 7;

    optional uint64 cpu_limit = 8;
    optional uint64 memory_limit = 9;

    optional string vw_name = 10;
    optional string worker_group_id = 11;

    optional uint32 last_update_time = 12;

    optional uint64 reserved_memory_bytes = 13;
    optional uint32 reserved_cpu_cores = 14;
    optional uint32 register_time = 15;
    optional uint32 state = 16;
}

message WorkerGroupData
{
  required string id = 1;
  required uint32 type = 2;
  optional UUID vw_uuid = 3;
  optional string vw_name = 4;
  optional string psm = 5;
  optional string linked_id = 6;
  repeated HostWithPorts host_ports_vec = 7;
  optional uint32 num_workers = 8;
  optional WorkerGroupMetrics metrics = 9;
  optional bool is_auto_linked = 10;
  optional string linked_vw_name = 11;
}

message WorkerGroupMetrics
{
    required string id = 1;
    required uint32 num_workers = 2;

    required double min_cpu_usage = 3;
    required double max_cpu_usage = 4;
    required double avg_cpu_usage = 5;

    required double min_mem_usage = 6;
    required double max_mem_usage = 7;
    required double avg_mem_usage = 8;
    required uint64 min_mem_available = 9;

    required uint32 total_queries = 10;
}

message ResourceRequirement
{
    /// See cpu_usage_max_threshold.
    /// optional double limit_cpu = 1;
    reserved 1;

    /// Request memory in bytes.
    optional uint64 request_mem_bytes = 2;

    optional uint64 request_disk_bytes = 3;

    /// How many workers does this query/request want.
    optional uint32 expected_workers = 4;

    /// Specified worker group (may be used by pickWorker)
    optional string worker_group = 5;

    /// Request cpu cores.
    /// fetch_add operation is not supported for atomic double, so use an int type.
    optional uint32 request_cpu_cores = 6;

    /// The worker/worker group's max cpu usage should not be greater than this threshold (0 ~ 100).
    optional double cpu_usage_max_threshold = 7;

    /// RM will reserve $request_cpu_cores and $request_mem_bytes from the target worker's memory_available and cpu_usage for a while.
    /// This ensure RM not assign too many tasks to workers with low workload when handling high concurrent requests.
    optional uint32 task_cold_startup_sec = 8;

    /// Block list.
    /// Worker group id for picking a worker group.
    /// Worker id for picking workers.
    repeated string blocklist = 9;

    /// Forbid returning random result when there is not enough available candidates.
    optional bool forbid_random_result = 10;

    /// No repeated workers in the response.
    optional bool no_repeat = 11;
}

/// vw queue
message QueryQueueInfo
{
  required uint32 queued_query_count = 1;
  required uint32 running_query_count = 2;
}

message DataModelFileSystemLock
{
    optional string directory = 1;
    optional string database = 2;
    optional string table = 3;
    optional uint64 txn_id = 4;
    /// data files can be retrieved from undo resources with transaction id
}

enum UdfLanguageType
{
    SQL = 1;
    PYTHON = 2;
}

enum UdfTypeEnum
{
    SCALAR = 1;
    UDAF = 2;
    UDTF = 3;
    WINDOW_UDF = 4;
}

message DataModelUDF
{
    optional string database = 1;
    required string function_name = 2;
    optional string function_definition = 3;  // create query
    optional string argument_name_and_type = 4;
    optional string return_data_type = 5;
    optional UdfLanguageType function_language = 6;
    optional UdfTypeEnum udf_type = 7; // scalar, UDAF, UDTF, Window UDF.
    optional int64 udf_flags = 8; // bitmap of enum UDFFlags
    optional uint64 version = 9;
}
