syntax = "proto2";
package DB.Protos;

option cc_generic_services = true;

import "cnch_common.proto";

message DMBGJobInfo
{
    required StorageID storage_id = 1;
    required string host_port = 2;
    required uint32 status = 3;
    required uint32 expected_status = 4;
    required int64 last_start_time = 5;
}

message GetAllBGThreadServersReq
{
    required uint32 job_type = 1;
}

message GetAllBGThreadServersResp
{
    optional string exception = 1;
    repeated DMBGJobInfo dm_bg_job_infos = 2;
}

message GetDMBGJobInfoReq
{
    required uint32 job_type = 1;
    required UUID storage_uuid = 2;
}

message GetDMBGJobInfoResp
{
    optional string exception = 1;
    optional DMBGJobInfo dm_bg_job_info = 2;
}

message ControlDaemonJobReq
{
    required StorageID storage_id = 1;
    required uint32 job_type = 2;
    required uint32 action = 3;
}

message ControlDaemonJobResp
{
    optional string exception = 1;
}

message ForwardOptimizeQueryReq
{
    required StorageID storage_id = 1;
    required string partition_id = 2;
    required bool enable_try = 3;
    required bool mutations_sync = 4;
    optional uint64 timeout_ms = 5;
}

message ForwardOptimizeQueryResp
{
    optional string exception = 1;
}

service DaemonManagerService
{
    rpc GetAllBGThreadServers(GetAllBGThreadServersReq) returns (GetAllBGThreadServersResp);
    rpc GetDMBGJobInfo(GetDMBGJobInfoReq) returns (GetDMBGJobInfoResp);
    rpc ControlDaemonJob(ControlDaemonJobReq) returns (ControlDaemonJobResp);
    rpc ForwardOptimizeQuery(ForwardOptimizeQueryReq) returns (ForwardOptimizeQueryResp);
};
