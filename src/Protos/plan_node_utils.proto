syntax = "proto2";

import "cnch_common.proto";
import "enum.proto";
package DB.Protos;

message SizeOrVariable {
  oneof size_or_variable {
    uint64 size = 1;
    string variable = 2;
  }
}

message Field {
  required FieldType.Enum type = 1;
  optional bytes blob = 2;
  // TODO use oneof
}

message FillColumnDescription {
  required Field fill_from = 1;
  required Field fill_to = 2;
  required Field fill_step = 3;
}

message Collator {
  required string locale = 1;
}

message SortColumnDescription {
  required string column_name = 1;
  required uint64 column_number = 2;
  required int32 direction = 3;
  required int32 nulls_direction = 4;
  optional Collator collator = 5;
  required bool with_fill = 6;
  required FillColumnDescription fill_description = 7;
}

message DataType {
  required string type_name = 1;
}

message NameAndTypePair {
  required string name = 1;
  required DataType type = 2;
  required DataType type_in_storage = 3;
  optional uint64 subcolumn_delimiter_position = 4;
}

message Block {
  optional bytes blob = 1;
  repeated NameAndTypePair names_and_types = 2;
}

message DataStream {
  message SortMode {
    enum Enum {
      Chunk = 0;   /// Separate chunks are sorted
      Port = 1;    /// Data from each port is sorted
      Stream = 2;  /// Data is globally sorted
    }
  }
  required Block header = 1;
  repeated string distinct_columns = 2;
  required bool has_single_port = 3;
  repeated SortColumnDescription sort_description = 4;
  required SortMode.Enum sort_mode = 5;
}

message StringVec {
  repeated string values = 1;
}

message SizeLimits {
  required uint64 max_rows = 1;
  required uint64 max_bytes = 2;
  required OverflowMode.Enum overflow_mode = 3;
}

message Partitioning {
  message Handle {
    enum Enum {
      SINGLE = 0;
      COORDINATOR = 1;
      FIXED_HASH = 2;
      FIXED_ARBITRARY = 3;
      FIXED_BROADCAST = 4;
      SCALED_WRITER = 5;
      BUCKET_TABLE = 6;
      ARBITRARY = 7;
      FIXED_PASSTHROUGH = 8;
      UNKNOWN = 9;
    }
  }

  message Component {
    enum Enum {
      ANY = 0;
      COORDINATOR = 1;
      WORKER = 2;
    }
  }

  required Handle.Enum handle = 1;
  repeated string columns = 2;
  required bool require_handle = 3;
  required uint64 buckets = 4;
  required bool enforce_round_robin = 5;
  required Component.Enum component = 6;
  required bool exactly_match = 7;
  optional AST bucket_expr = 8;
}

// possibly nullptr
message AST {
  // empty bytes means nullptr
  required bytes blob = 1; // exact binary
  optional string text = 2; // only for read
  // TODO: use better serialize method
}

// LinkedHashTable must keep order
message Assignments {
  message KV {
    required string key = 1;
    required AST value = 2;
  }
  repeated KV pairs = 1;
}

message RuntimeFilterBuildInfos {
  required uint32 id = 1;
  required RuntimeFilterDistribution.Enum distribution = 2;
}

message GroupingSetsParams {
  repeated string used_key_names = 1;
  repeated uint64 used_keys = 2;
  repeated uint64 missing_keys = 3;
}

message GroupingDescription {
  repeated string argument_names = 1;
  required string output_name = 2;
}

message FieldVector {
  repeated Field fields = 1;
}

message AggregateFunction {
  required string func_name = 1;
  repeated DataType arg_types = 2;
  required FieldVector parameters = 3;
}

message AggregateDescription {
  required AggregateFunction function = 1;
  repeated uint64 arguments = 3;
  repeated string argument_names = 4;
  required string column_name = 5;
  required string mask_column = 6;
}

message AggregatorParams {
  required Block src_header = 1;
  required Block intermediate_header = 2;
  repeated uint64 keys = 3;
  repeated AggregateDescription aggregates = 4;
  required bool overflow_row = 5;
  required uint64 max_rows_to_group_by = 6;
  required OverflowMode.Enum group_by_overflow_mode = 7;
  required uint64 group_by_two_level_threshold = 8;
  required uint64 group_by_two_level_threshold_bytes = 9;
  required uint64 max_bytes_before_external_group_by = 10;
  required bool empty_result_for_aggregation_by_empty_set = 11;
  required uint64 max_threads = 12;
  required uint64 min_free_disk_space = 13;
  required bool compile_aggregate_expressions = 14;
  required uint64 min_count_to_compile_aggregate_expression = 15;
  optional bool enable_lc_group_by_opt = 16;
  optional uint64 spill_buffer_bytes_before_external_group_by = 17;
  optional bool enable_adaptive_spill = 18;
}

message AggregatingTransformParams {
  required AggregatorParams params = 1;
  required bool final = 2;
}

message InputOrderInfo {
  repeated SortColumnDescription order_key_prefix_descr = 1;
  required int32 direction = 2;
}

message ArrayJoinAction {
  repeated string columns = 1;
  required bool is_left = 2;
}

message CacheDependentScanInfo {
  required bytes required_digest = 1;
  required uint64 table_index = 2;
}

message TableScanCacheInfo {
  message Status {
    enum Enum {
      CACHE_TABLE = 0;
      CACHE_DEPENDENT_TABLE = 1;
      NO_CACHE = 2;
    }
  }

  required Status.Enum status = 1;
  required bytes cache_digest = 2;
  required uint64 dependent_table_count = 3;
  repeated CacheDependentScanInfo cache_dependent_info = 4;
}


message SelectQueryInfo {
  required AST query = 1;
  required AST view_query = 2;
  optional AST partition_filter = 3;
  optional TableScanCacheInfo cache_info = 4;
  optional InputOrderInfo input_order_info = 5;
}

message NameWithAliasPair {
  required string name = 1;
  required string alias = 2;
}

message AddressInfo {
  required string host_name = 1;
  required uint32 port = 2;
  optional bytes user = 3;
  optional bytes password = 4;
  required uint32 exchange_port = 5;
}

message IPlanSegment {
  required Block header = 1;
  required PlanSegmentType.Enum type = 2;
  required ExchangeMode.Enum exchange_mode = 3;
  required uint64 exchange_id = 4;
  required uint64 exchange_parallel_size = 5;
  required string name = 6;
  required uint64 segment_id = 7;
  repeated string shuffle_keys = 8;
}

message PlanSegmentInput {
  required IPlanSegment base_plan_segment = 1;
  required uint64 parallel_index = 2;
  required bool keep_order = 3;
  repeated AddressInfo source_addresses = 4;
  optional StorageID storage_id = 5;
}

message PlanSegmentOutput {
  required IPlanSegment base_plan_segment = 1;
  optional string shuffle_hash_function = 2;
  optional uint32 parallel_size = 3;
  optional bool keep_order = 4;
  optional FieldVector shuffle_function_parameters = 5;
}

message WindowFrame {
  message FrameType {
    enum Enum {
      Rows = 0;
      Groups = 1;
      Range = 2;
    }
  }

  message BoundaryType {
    enum Enum {
      Unbounded = 0;
      Current = 1;
      Offset = 2;
    }
  }

  message ExcludeType {
    enum Enum {
      NoOthers = 0;
      CurrentRow = 1;
      Group = 2;
      Tie = 3;
    }
  }

  required bool is_default = 1;
  required FrameType.Enum type = 2;
  required BoundaryType.Enum begin_type = 3;
  required Field begin_offset = 4;
  required bool begin_preceding = 5;
  required BoundaryType.Enum end_type = 6;
  required Field end_offset = 7;
  required bool end_preceding = 8;
}

message WindowFunctionDescription {
  required string column_name = 1;
  required AggregateFunction aggregate_function = 2;
  repeated string argument_names = 4;
}

message WindowDescription {
  required string window_name = 1;
  repeated SortColumnDescription partition_by = 2;
  repeated SortColumnDescription order_by = 3;
  repeated SortColumnDescription full_sort_description = 4;
  required WindowFrame frame = 5;
  repeated WindowFunctionDescription window_functions = 6;
}

message CacheParam {
  required bytes digest = 1;
  map<uint64, uint64> output_pos_to_cache_pos = 2;
  map<uint64, uint64> cache_pos_to_output_pos = 3;
  required StorageID cached_table = 4;
  repeated StorageID dependent_tables = 5;
}

message Edge {
  required uint64 from = 1;
  required uint64 to = 2;
  required string source = 3;
  required string target = 4;
}

message Graph {
  repeated uint64 node = 1;
  repeated Edge edges = 2;
  required AST filter = 3;
}

message SettingChange {
  required string name = 1;
  required Field value = 2;
}

message SettingsChanges {
  repeated SettingChange settings_changes = 1;
}
