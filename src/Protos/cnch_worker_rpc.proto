syntax = "proto2";
package DB.Protos;

import "data_models.proto";
import "cnch_common.proto";
import "hive_models.proto";

option cc_generic_services = true;

message WorkerInfo
{
  required uint32 index = 1;
  required uint32 num_workers = 2;
  required string worker_id = 3;
}

message ExecuteSimpleQueryReq
{
  required string query = 1;
  optional string query_id = 2;
  optional string settings = 3;
  optional ClientInfo client_info = 4;
}

message ExecuteSimpleQueryResp
{
  optional string exception = 1;
  required uint32 server_revision = 2;
  optional string block = 3;
}

message SubmitManipulationTaskReq
{
  required uint64 txn_id = 1;
  required uint64 timestamp = 2;

  /// ManipulationTaskParams
  required uint32 type = 3;
  required string task_id = 4;
  required uint32 rpc_port = 5;
  required uint64 columns_commit_time = 6;

  optional string create_table_query = 7;
  repeated DataModelPart source_parts = 8;

  /// Mutation task
  optional uint64 mutation_commit_time = 9;
  optional string mutate_commands = 10;
  /// used to mark task of bucket table
  optional bool is_bucket_table = 11;
  /// used for json column merge
  optional string dynamic_object_column_schema = 12;

  /// ManipulationTaskParams
  required uint64 parts_preload_level = 13;
}

message SubmitManipulationTaskResp
{
  optional string exception = 1;
}

// ManipulationTaskParams::type = MvRefresh
message SubmitMVRefreshTaskReq
{
  required uint64 txn_id = 1;
  required uint64 timestamp = 2;

  required string task_id = 3;
  required uint32 rpc_port = 4;
  required StorageID mv_storage_id = 5;

  required string create_table_query = 6;
  required string drop_partition_query = 7;
  required string insert_select_query = 8;
  repeated string target_partitions = 9;
}

message SubmitMVRefreshTaskResp
{
  optional string exception = 1;
}


message SubmitKafkaConsumeTaskReq
{
  required uint32 type = 1;
  required string task_id = 2;
  required uint32 rpc_port = 3;

  required string database = 4;
  required string table = 5;
  optional StorageID cnch_storage_id = 6;
  required uint64 assigned_consumer = 7;
  repeated string create_table_command = 8;
  repeated TopicPartitionModel tpl = 9;
  repeated TopicPartitionModel sample_partitions = 10;
}

message SubmitKafkaConsumeTaskResp
{
  optional string exception = 1;
}

message GetConsumerStatusReq
{
  required StorageID table = 1;
}

message GetConsumerStatusResp
{
  optional string exception = 1;
  optional string cluster = 2;
  repeated string topics = 3;
  repeated string assignments = 4;
  optional uint32 consumer_num = 5;
  optional string last_exception = 6;
}

message PreloadChecksumsAndPrimaryIndexReq
{
  required StorageID table = 1;
}

message PreloadChecksumsAndPrimaryIndexResp
{
  optional string exception = 1;
}

message ShutdownManipulationTasksReq
{
  required UUID table_uuid = 1;
  repeated string task_ids = 2;
}

message ShutdownManipulationTasksResp
{
  optional string exception = 1;
}

message TouchManipulationTasksReq
{
  required UUID table_uuid = 1;
  repeated string tasks_id = 2;
}

message TouchManipulationTasksResp
{
  optional string exception = 1;
  repeated string tasks_id = 2;
}

message ManipulationTask
{
  required string task_id = 1;
  optional uint32 type = 2;
  optional StorageID storage_id = 3;
  optional float elapsed = 4;
  optional int64 num_parts = 5;
  repeated string source_part_names = 6;
  repeated string result_part_names = 7;
  optional string partition_id = 8;
  optional int64 total_size_bytes_compressed = 9;
  optional int64 total_size_marks = 10;
  optional float progress = 11;
  optional int64 bytes_read_uncompressed = 12;
  optional int64 bytes_written_uncompressed = 13;
  optional int64 rows_read = 14;
  optional int64 rows_written = 15;
  optional int64 columns_written = 16;
  optional int64 memory_usage = 17;
  optional int64 thread_id = 18;
  optional int64 total_rows_count = 19;
}

message GetManipulationTasksStatusReq
{
}

message GetManipulationTasksStatusResp
{
  optional string exception = 1;
  repeated ManipulationTask tasks = 2;
}

message GetPreallocatedStatusReq
{
  required UUID storage_id = 1;
}

message GetPreallocatedStatusResp
{
  optional string exception = 1;
  required bool preallocated = 2;
}

message SetQueryIntentReq
{
  required UUID storage_id = 1;
  required string query_id = 2;
  required uint64 start_time = 3;
  required uint64 worker_topology_hash = 4;
}

message SetQueryIntentResp
{
  optional string exception = 1;
  required bool preallocated = 2;
  required uint32 status = 3;
}

message PreloadDataPartsReq
{
  optional uint64 txn_id = 1;
  optional string create_table_query = 2;
  repeated DataModelPart parts = 3;
  optional bool sync = 4;
  optional uint64 preload_level = 5;
  optional uint64 submit_ts = 6;
}

message PreloadDataPartsResp
{
  optional string exception = 1;
}

message DropPartDiskCacheReq
{
  optional uint64 txn_id = 1;
  optional string create_table_query = 2;
  repeated DataModelPart parts = 3;
  optional bool sync = 4;
  optional bool drop_vw_disk_cache = 5;
}

message DropPartDiskCacheResp
{
  optional string exception = 1;
}

message DropManifestDiskCacheReq
{
  required UUID storage_id = 1;
  optional uint64 version = 2;
  optional bool sync = 3;
}

message DropManifestDiskCacheResp
{
  optional string exception = 1;
}

message SubmitSyncTaskReq
{
  required UUID storage_id = 1;
  required string database = 2;
  required string table = 3;
  required string query_id = 4;
  required uint32 trigger_type = 5;
  required bool full_sync = 6;
  repeated DataModelPart parts = 7;
  optional uint64 worker_topology_hash = 8;
  required uint32 rpc_port = 9;
  required string create_table_query = 10;
}

message SubmitSyncTaskResp
{
  optional string exception = 1;
}

message ResetQueryIntentReq
{
  required UUID storage_id = 1;
  required string query_id = 2;
}

message ResetQueryIntentResp
{
  optional string exception = 1;
}

message SubmitScaleTaskReq
{
  required UUID storage_id = 1;
  required string database = 2;
  required string table = 3;
  required uint64 worker_topology_hash = 4;
  required uint32 rpc_port = 5;
  required string create_table_query = 6;
}

message SubmitScaleTaskResp
{
  optional string exception = 1;
}

message GetCloudMergeTreeStatusReq
{
  required StorageID storage_id = 1;
}

message GetCloudMergeTreeStatusResp
{
  optional string exception = 1;
  optional bool table_exist = 2;
}

message ClearPreallocatedDataPartsReq
{
  required string database = 1;
  required string table = 2;
  required string create_table_query = 3;
  repeated string parts_to_remove = 4;
}

message ClearPreallocatedDataPartsResp
{
  optional string exception = 1;
}

message CreateDedupWorkerReq
{
  required StorageID table = 1;
  required string create_table_query = 2;
  required HostWithPorts host_ports = 3;
  optional uint64 deduper_index = 4;
}

message CreateDedupWorkerResp
{
  optional string exception = 1;
}

message AssignHighPriorityDedupPartitionReq
{
  required StorageID table = 1;
  repeated string partition_id = 2;
}

message AssignHighPriorityDedupPartitionResp
{
  optional string exception = 1;
}

message AssignRepairGranReq
{
  required StorageID table = 1;
  required string partition_id = 2;
  required int64 bucket_number = 3;
  required uint64 max_event_time = 4;
}

message AssignRepairGranResp
{
  optional string exception = 1;
}

message DropDedupWorkerReq
{
  required StorageID table = 1;
}

message DropDedupWorkerResp
{
  optional string exception = 1;
}

message GetDedupWorkerStatusReq
{
  required StorageID table = 1;
}

message GetDedupWorkerStatusResp
{
  optional string exception = 1;
  required bool is_active = 2;
  optional int64 create_time = 3;
  optional int64 total_schedule_cnt = 4;
  optional int64 total_dedup_cnt = 5;
  optional int64 last_schedule_wait_ms = 6;
  optional int64 last_task_total_cost_ms = 7;
  optional int64 last_task_dedup_cost_ms = 8;
  optional int64 last_task_publish_cost_ms = 9;
  optional int64 last_task_staged_part_cnt = 10;
  optional int64 last_task_visible_part_cnt = 11;
  optional int64 last_task_staged_part_total_rows = 12;
  optional int64 last_task_visible_part_total_rows = 13;
  optional string last_exception = 14;
  optional int64 last_exception_time = 15;
  repeated string dedup_tasks_progress = 16;
}

message SendCreateQueryReq
{
  required uint64 txn_id = 1;
  required uint64 primary_txn_id = 2;
  required uint64 timeout = 3;
  repeated string create_queries = 4;
  repeated string cnch_table_create_queries = 5;
}

message SendCreateQueryResp
{
  optional string exception = 1;
}

message UDFInfo
{
  required string function_name = 1;
  required int64 version = 2;
}

message SendDataPartsReq
{
  required uint64 txn_id = 1;
  required string database_name = 2;
  required string table_name = 3;
  repeated DataModelPart parts = 4;
  repeated DataModelDeleteBitmap bitmaps = 5;
  repeated int64 bucket_numbers = 6;
  repeated UDFInfo udf_infos = 7;
  optional string disk_cache_mode = 8;
}

message SendDataPartsResp
{
  optional string exception = 1;
}

message CheckDataPartsReq
{
  required uint64 txn_id = 1;
  required string database_name = 2;
  required string table_name = 3;
  required string create_query = 4;
  repeated DataModelPart parts = 5;
}

message CheckDataPartsResp
{
  optional string exception = 1;
  repeated string part_path = 2;
  repeated bool is_passed = 3;
  repeated string message = 4;
}

message OffloadingTableResource
{
  required UUID table_id = 1;
  required string worker_table_name = 2;
  repeated HostWithPorts buffer_workers = 3;
}

message SendOffloadingReq
{
  required uint64 txn_id = 1;
  repeated HostWithPorts read_workers = 2;
  repeated OffloadingTableResource table_resource = 3;
}

message SendOffloadingResp
{
  optional string exception = 1;
}

message TableDataParts
{
  required string database = 1;
  required string table = 2;
  repeated DataModelPart server_parts = 3;
  repeated DataModelDeleteBitmap server_part_bitmaps = 4;
  optional ProtoHiveFiles hive_parts = 5;
  repeated int64 bucket_numbers = 6;
  repeated CnchFilePartModel file_parts = 7;
  /// mutations: CloudMergeTree need this to find the actual column name in storage.
  repeated string cnch_mutation_entries = 8;
  repeated DataModelVirtualPart virtual_parts = 9;
  repeated DataModelDeleteBitmap virtual_part_bitmaps = 10;
  optional uint64 table_version = 11;
}

// Send original (cnch) table definition and override to worker, in order to
// 1. remove server's parsing & formatting overhead
//   before
//     server: parse(create query) -> rewrite(ast) -> format(ast) -> send(new create query)
//     worker: parse(new create query) -> create table(ast)
//   after
//     server: send(create query, override)
//     worker: parse(create query) -> rewrite(ast) -> create table(ast, override)
// 2. be able to cache table template at worker
message CacheableTableDefinition
{
  required StorageID storage_id = 1;
  required string definition = 2;
  optional string dynamic_object_column_schema = 3; // present if not empty
  required uint32 local_engine_type = 4; // WorkerEngineType
  required string local_table_name = 5;
  optional string local_underlying_dictionary_tables = 6; // for bitengine
}

message SendResourcesReq
{
  required uint64 txn_id = 1;
  required uint64 primary_txn_id = 2;
  required uint64 timeout = 3;
  repeated string create_queries = 4;
  repeated TableDataParts data_parts = 5;
  optional string disk_cache_mode = 6;
  repeated UDFInfo udf_infos = 7;
  repeated string dynamic_object_column_schema = 8;
  optional WorkerInfo worker_info = 9;
  // can coexist with `create_queries'
  repeated CacheableTableDefinition cacheable_create_queries = 10;
  optional string session_timezone = 11;
}

message SendResourcesResp
{
  optional string exception = 1;
}

message RemoveWorkerResourceReq
{
  required uint64 txn_id = 1;
}

message RemoveWorkerResourceResp
{
  optional string exception = 1;
}

message SubmitMySQLSyncThreadTaskReq
{
  required uint32 type = 1;
  required string database_name = 2;
  required string sync_thread_key = 3;
  required string table = 4;
  repeated string create_sqls = 5;
  optional string binlog_file = 6;
  optional uint64 binlog_position = 7;
  optional string executed_gtid_set = 8;
  optional uint32 meta_version = 9;
  optional uint32 rpc_port = 10;
}

message SubmitMySQLSyncThreadTaskResp
{
  optional string exception = 1;
}

message CheckMySQLSyncThreadStatusReq
{
  required string database_name = 1;
  required string sync_thread_key = 2;
}

message CheckMySQLSyncThreadStatusResp
{
  optional string exception = 1;
  optional bool is_running = 2;
}

message DropMemoryDictCacheReq
{
  optional uint64 txn_id = 1;
  optional string create_table_query = 2;
  repeated string uuid_list = 3;
}

message DropMemoryDictCacheResp
{
  optional string exception = 1;
}

message ExecuteDedupTaskReq
{
  required uint64 txn_id = 1;
  required uint32 rpc_port = 2;
  required UUID table_uuid = 3;
  repeated DataModelPart new_parts = 4;
  repeated string new_parts_paths = 5;
  repeated DataModelDeleteBitmap delete_bitmaps_for_new_parts = 6;
  repeated DataModelPart staged_parts = 7;
  repeated string staged_parts_paths = 8;
  repeated DataModelDeleteBitmap delete_bitmaps_for_staged_parts = 9;
  repeated DataModelPart visible_parts = 10;
  repeated string visible_parts_paths = 11;
  repeated DataModelDeleteBitmap delete_bitmaps_for_visible_parts = 12;
  required uint32 dedup_mode = 13;
}

message ExecuteDedupTaskResp
{
  optional string exception = 1;
}

service CnchWorkerService
{
  rpc executeSimpleQuery(ExecuteSimpleQueryReq) returns (ExecuteSimpleQueryResp);

  // ManipulationTasks
  rpc submitManipulationTask(SubmitManipulationTaskReq) returns (SubmitManipulationTaskResp);
  rpc touchManipulationTasks(TouchManipulationTasksReq) returns (TouchManipulationTasksResp);
  rpc shutdownManipulationTasks(ShutdownManipulationTasksReq) returns (ShutdownManipulationTasksResp);
  rpc getManipulationTasksStatus(GetManipulationTasksStatusReq) returns (GetManipulationTasksStatusResp);
  rpc submitMVRefreshTask(SubmitMVRefreshTaskReq) returns (SubmitMVRefreshTaskResp);

  rpc submitKafkaConsumeTask(SubmitKafkaConsumeTaskReq) returns (SubmitKafkaConsumeTaskResp);
  rpc getConsumerStatus(GetConsumerStatusReq) returns (GetConsumerStatusResp);

  rpc submitMySQLSyncThreadTask(SubmitMySQLSyncThreadTaskReq) returns (SubmitMySQLSyncThreadTaskResp);
  rpc checkMySQLSyncThreadStatus(CheckMySQLSyncThreadStatusReq) returns (CheckMySQLSyncThreadStatusResp);

  rpc preloadChecksumsAndPrimaryIndex(PreloadChecksumsAndPrimaryIndexReq) returns (PreloadChecksumsAndPrimaryIndexResp);

  rpc GetPreallocatedStatus(GetPreallocatedStatusReq) returns (GetPreallocatedStatusResp);
  rpc SetQueryIntent(SetQueryIntentReq) returns (SetQueryIntentResp);
  rpc SubmitSyncTask(SubmitSyncTaskReq) returns (SubmitSyncTaskResp);
  rpc ResetQueryIntent(ResetQueryIntentReq) returns (ResetQueryIntentResp);
  rpc SubmitScaleTask(SubmitScaleTaskReq) returns (SubmitScaleTaskResp);

  rpc getCloudMergeTreeStatus(GetCloudMergeTreeStatusReq) returns (GetCloudMergeTreeStatusResp);

  rpc ClearPreallocatedDataParts(ClearPreallocatedDataPartsReq) returns (ClearPreallocatedDataPartsResp);

  rpc createDedupWorker(CreateDedupWorkerReq) returns (CreateDedupWorkerResp);
  rpc assignHighPriorityDedupPartition(AssignHighPriorityDedupPartitionReq) returns (AssignHighPriorityDedupPartitionResp);
  rpc assignRepairGran(AssignRepairGranReq) returns (AssignRepairGranResp);
  rpc dropDedupWorker(DropDedupWorkerReq) returns (DropDedupWorkerResp);
  rpc getDedupWorkerStatus(GetDedupWorkerStatusReq) returns (GetDedupWorkerStatusResp);

  rpc sendCreateQuery(SendCreateQueryReq) returns (SendCreateQueryResp);
  rpc checkDataParts(CheckDataPartsReq) returns (CheckDataPartsResp);
  rpc sendOffloading(SendOffloadingReq) returns (SendOffloadingResp);
  rpc sendResources(SendResourcesReq) returns (SendResourcesResp);
  rpc removeWorkerResource(RemoveWorkerResourceReq) returns (RemoveWorkerResourceResp);
  rpc preloadDataParts(PreloadDataPartsReq) returns (PreloadDataPartsResp);
  rpc dropPartDiskCache(DropPartDiskCacheReq) returns (DropPartDiskCacheResp);
  rpc dropManifestDiskCache(DropManifestDiskCacheReq) returns (DropManifestDiskCacheResp);
  rpc dropMemoryDictCache(DropMemoryDictCacheReq) returns (DropMemoryDictCacheResp);

  rpc executeDedupTask(ExecuteDedupTaskReq) returns (ExecuteDedupTaskResp);
}
