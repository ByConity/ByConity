syntax = "proto2";
package DB.Protos;

import "data_models.proto";
import "cnch_common.proto";

option cc_generic_services = true;

message ReportTaskHeartbeatReq
{
  required string task_id = 1;
}

message ReportTaskHeartbeatResp
{
  optional string exception = 1;
}

message ReportDeduperHeartbeatReq
{
  required StorageID cnch_storage_id = 1;
  required string worker_table_name = 2;
}

message ReportDeduperHeartbeatResp
{
  optional uint32 code = 1;
  optional string exception = 2;
}

message CheckConsumerValidityReq
{
  required UUID uuid = 1;
  required uint64 consumer_index = 2;
  required string table_name = 3;
}

message CheckConsumerValidityResp
{
  optional string exception = 1;
}

message CreateKafkaTransactionReq
{
  required UUID uuid = 1;
  required uint64 consumer_index = 2;
  required string table_name = 3;
};

message CreateKafkaTransactionResp
{
  optional string exception = 1;
  optional uint64 txn_id = 2;
  optional uint64 start_time = 3;
};

message CreateTransactionReq
{
  optional uint64 primary_txn_id = 1;
};

message CreateTransactionResp
{
  optional string exception = 1;
  required uint64 txn_id = 2;
  required uint64 start_time = 3;
};

message FinishTransactionReq
{
  required uint64 txn_id = 1;
};

message FinishTransactionResp
{
  optional string exception = 1;
};

message CommitTransactionReq
{
  required uint64 txn_id = 1;
  optional string insertion_label = 2;
  optional StorageID kafka_storage_id = 3;
  optional uint64 kafka_consumer_index = 4;
};

message CommitTransactionResp
{
  optional string exception = 1;
  optional uint64 commit_ts = 2;
};

message PrecommitTransactionReq
{
  required uint64 txn_id = 1;
  required UUID main_table_uuid = 2;
};

message PrecommitTransactionResp
{
  optional string exception = 1;
};

message RollbackTransactionReq
{
  required uint64 txn_id = 1;
  optional bool only_clean_data = 2;
};

message RollbackTransactionResp
{
  optional string exception = 1;
  optional uint64 commit_ts = 2;
};

message CommitPartsReq
{
  required string database = 1;
  required string table = 2;
  required UUID uuid = 3;
  required uint32 type = 4;
  repeated DataModelPart parts = 5;
  repeated string paths = 6;
  required uint64 txn_id = 7;
  optional string task_id = 8;
  optional string consumer_group = 9;
  repeated TopicPartitionModel tpl = 10;
  repeated DataModelDeleteBitmap delete_bitmaps = 11;
  repeated DataModelPart staged_parts = 12;
  repeated string staged_parts_paths = 13;
};

message CommitPartsResp
{
  optional string exception = 1;
  optional uint64 commit_timestamp = 2;
}

message SubmitPreloadTaskReq {
  optional string database = 1;
  optional string table = 2;
  optional UUID uuid = 3;
  repeated DataModelPart parts = 4;
  optional bool sync = 5;
}

message SubmitPreloadTaskResp {
  optional string exception = 1;
}

message GetMinActiveTimestampReq
{
  required StorageID storage_id = 1;
}

message GetMinActiveTimestampResp
{
  optional string exception = 1;
  optional uint64 timestamp = 2;
}

message ControlCnchBGThreadReq
{
  required StorageID storage_id = 1;
  required uint32 type = 2;
  required uint32 action = 3;
};

message ControlCnchBGThreadResp
{
  optional string exception = 1;
}

enum BackgroundTaskAction
{
  Launch = 0;
  Stop = 1;
  Wakeup = 2;
  Remove = 3; // drop table
};

message BackgroundThreadStatus {
  required StorageID storage_id = 1;
  required uint32 status = 2;
}

message BackgroundThreadStatusReq {
  required uint32 type = 1;
}

message BackgroundThreadStatusResp
{
  repeated BackgroundThreadStatus status = 1;
  optional string exception = 2;
}

message BackgroundThreadNumReq
{
  required uint32 type = 1;
}

message CommitWorkerRPCByKeyReq
{
  required string key = 1;
}

message BackgroundThreadNumResp
{
  optional uint32 num = 1;
  optional string exception = 2;
 }

message CommitWorkerRPCByKeyResp
{
  optional string exception = 1;
}

message FetchDataPartsReq
{
  required string remote_host = 1;
  required string database = 2;
  required string table = 3;
  required uint64 table_commit_time = 4;
  repeated string partitions = 5;
  required uint64 timestamp = 6;
}

message FetchDataPartsResp
{
  optional string exception = 1;
  repeated DataModelPart parts = 2;
}

message FetchUniqueTableMetaReq
{
  // storage id for the cnch table
  required StorageID storage_id = 1;
  // if specified, only return meta for the given partitions
  // otherwise return meta for all partitions
  repeated string partitions = 2;
  // return committed meta that is visible at the given ts
  required uint64 timestamp = 3;
}

message FetchUniqueTableMetaResp
{
  optional string exception = 1;
  repeated DataModelPart parts = 2;
  repeated DataModelDeleteBitmap bitmaps = 3;
}

message GetTablePartitionInfoReq
{
  repeated DataModelTable tables = 1;
}

message GetTablePartitionInfoResp
{
  optional string exception = 1;
  repeated DataModelTablePartitionInfo table_partitions = 2;
}

message GetTableInfoReq
{
  repeated TableIdentifier table_ids = 1;
}

message GetTableInfoResp
{
  optional string exception = 1;
  repeated DataModelTableInfo table_infos = 2;
}

message InvalidateBytepondReq
{
  required string table_name = 1;
}

message InvalidateBytepondResp
{
  optional string exception = 1;
}

message GetTransactionStatusReq
{
  required uint64 txn_id = 1;
  required bool need_search_catalog = 2;
}

message GetTransactionStatusResp
{
  optional string exception = 1;
  optional TransactionStatus status = 2;
}

message CleanTransactionReq
{
  required DataModelTransactionRecord txn_record = 1;
}

message CleanTransactionResp
{
  optional string exception = 1;
}

message GetServerStartTimeReq
{
}

message GetServerStartTimeResp
{
  required uint64 server_start_time = 1;
}

message AcquireLockReq
{
  required DataModelLockInfo lock = 1;
}

message AcquireLockResp
{
  optional string exception = 1;
  optional uint32 lock_status = 2;
}

message ReleaseLockReq
{
  required DataModelLockInfo lock = 1;
}

message ReleaseLockResp
{
  optional string exception = 1;
}

message AssertLockReq
{
  optional uint64 txn_id = 1;
  optional uint64 lock_id = 2;
}

message AssertLockResp
{
  optional string exception = 1;
}

message ReportCnchLockHeartBeatReq
{
  required uint64 txn_id = 1;
  optional uint64 expire_time = 2;
}

message ReportCnchLockHeartBeatResp
{
  optional string exception = 1;
}

message ScheduleGlobalGCReq
{
  repeated DataModelTable tables = 1;
}

message ScheduleGlobalGCResp
{
  optional bool ret = 1;
  optional string exception = 2;
}

message GetNumOfTablesCanSendForGlobalGCReq
{
}

message GetNumOfTablesCanSendForGlobalGCResp
{
  required uint64 num_of_tables_can_send = 1;
}

message GetDeletingTablesInGlobalGCReq
{
}

message GetDeletingTablesInGlobalGCResp
{
  repeated UUID uuids = 1;
}

message RedirectCommitPartsReq
{
  required string database = 1;
  required string table = 2;
  required UUID uuid = 3;
  repeated DataModelPart parts = 5;
  repeated DataModelPart staged_parts = 6;
  repeated DataModelDeleteBitmap delete_bitmaps = 7;
  required uint64 txn_id = 8;
  optional uint64 commit_ts = 9;
  optional bool from_merge_task = 10;
  optional bool preallocate_mode = 11;
}

message RedirectCommitPartsResp
{
  optional string exception = 1;
}

message RemoveMergeMutateTasksOnPartitionsReq
{
  required StorageID storage_id = 1;
  repeated string partitions = 2;
}

message RemoveMergeMutateTasksOnPartitionsResp
{
  optional bool ret = 1;
  optional string exception = 2;
}

message SubmitQueryWorkerMetricsReq
{
  required QueryWorkerMetricElement element = 1;
}

message SubmitQueryWorkerMetricsResp
{
  optional string exception = 1;
}

message ExecuteOptimizeQueryReq
{
  required StorageID storage_id = 1;
  required string partition_id = 2;
  required bool enable_try = 3;
  required bool mutations_sync = 4;
  optional uint64 timeout_ms = 5;
}

message ExecuteOptimizeQueryResp
{
  optional string exception = 1;
}

service CnchServerService
{
  rpc reportTaskHeartbeat(ReportTaskHeartbeatReq) returns (ReportTaskHeartbeatResp);
  rpc reportDeduperHeartbeat(ReportDeduperHeartbeatReq) returns (ReportDeduperHeartbeatResp);

  rpc checkConsumerValidity(CheckConsumerValidityReq) returns (CheckConsumerValidityResp);
  rpc createTransactionForKafka(CreateKafkaTransactionReq) returns (CreateKafkaTransactionResp);

  rpc createTransaction(CreateTransactionReq) returns (CreateTransactionResp);

  rpc finishTransaction(FinishTransactionReq) returns (FinishTransactionResp);

  rpc commitTransaction(CommitTransactionReq) returns (CommitTransactionResp);

  rpc precommitTransaction(PrecommitTransactionReq) returns (PrecommitTransactionResp);

  rpc rollbackTransaction(RollbackTransactionReq) returns (RollbackTransactionResp);

  rpc commitParts(CommitPartsReq) returns (CommitPartsResp);

  rpc getMinActiveTimestamp(GetMinActiveTimestampReq) returns (GetMinActiveTimestampResp);

  rpc controlCnchBGThread(ControlCnchBGThreadReq) returns (ControlCnchBGThreadResp);

  rpc getBackgroundThreadStatus(BackgroundThreadStatusReq) returns (BackgroundThreadStatusResp);

  rpc getNumBackgroundThreads(BackgroundThreadNumReq) returns (BackgroundThreadNumResp);

  rpc fetchDataParts(FetchDataPartsReq) returns (FetchDataPartsResp);

  rpc fetchUniqueTableMeta(FetchUniqueTableMetaReq) returns (FetchUniqueTableMetaResp);

  rpc getTablePartitionInfo(GetTablePartitionInfoReq) returns (GetTablePartitionInfoResp);

  rpc getTableInfo(GetTableInfoReq) returns (GetTableInfoResp);

  rpc invalidateBytepond(InvalidateBytepondReq) returns (InvalidateBytepondResp);

  rpc getTransactionStatus(GetTransactionStatusReq) returns (GetTransactionStatusResp);

  rpc commitWorkerRPCByKey(CommitWorkerRPCByKeyReq) returns (CommitWorkerRPCByKeyResp);

  rpc cleanTransaction(CleanTransactionReq) returns (CleanTransactionResp);

  rpc acquireLock(AcquireLockReq) returns (AcquireLockResp);

  rpc releaseLock(ReleaseLockReq) returns (ReleaseLockResp);

  rpc assertLockAcquired(AssertLockReq) returns (AssertLockResp);

  rpc reportCnchLockHeartBeat(ReportCnchLockHeartBeatReq) returns (ReportCnchLockHeartBeatResp);

  rpc getServerStartTime(GetServerStartTimeReq) returns (GetServerStartTimeResp);

  rpc scheduleGlobalGC(ScheduleGlobalGCReq) returns (ScheduleGlobalGCResp);

  rpc getNumOfTablesCanSendForGlobalGC(GetNumOfTablesCanSendForGlobalGCReq) returns (GetNumOfTablesCanSendForGlobalGCResp);

  rpc getDeletingTablesInGlobalGC(GetDeletingTablesInGlobalGCReq) returns (GetDeletingTablesInGlobalGCResp);

  rpc redirectCommitParts(RedirectCommitPartsReq) returns (RedirectCommitPartsResp);

  rpc redirectSetCommitTime(RedirectCommitPartsReq) returns (RedirectCommitPartsResp);

  rpc removeMergeMutateTasksOnPartitions(RemoveMergeMutateTasksOnPartitionsReq) returns (RemoveMergeMutateTasksOnPartitionsResp);

  rpc submitQueryWorkerMetrics(SubmitQueryWorkerMetricsReq) returns (SubmitQueryWorkerMetricsResp);

  rpc executeOptimize(ExecuteOptimizeQueryReq) returns (ExecuteOptimizeQueryResp);

  rpc submitPreloadTask(SubmitPreloadTaskReq) returns (SubmitPreloadTaskResp);
};
