/*
 * Copyright (2022) Bytedance Ltd. and/or its affiliates
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once
#include <Interpreters/SystemLog.h>
#include <Storages/MergeTree/MergeTreeDataPartCNCH_fwd.h>

namespace DB
{
struct ServerPartLogElement
{
    enum Type
    {
        INSERT_PART = 1, // INSERT & ATTACH
        MERGE_PARTS = 2,
        MUTATE_PART = 3,
        DROP_RANGE = 4, /// ALTER ... DROP PARTITION/PART; exclude the drop marks generated by MERGE/MUTATE
        REMOVE_PART = 5, /// by GC thread
    };

    Type event_type = INSERT_PART;
    time_t event_time = 0;
    UInt64 txn_id;

    String database_name;
    String table_name;
    UUID uuid;

    String part_name;
    String partition_id;
    UInt64 rows = 0;
    UInt64 bytes = 0;
    Strings source_part_names;
    UInt8 is_staged_part = false;

    UInt8 error = 0;
    String exception;

    static std::string name() { return "ServerPartLog"; }
    static NamesAndTypesList getNamesAndTypes();
    static NamesAndAliases getNamesAndAliases() { return {}; }
    void appendToBlock(MutableColumns & columns) const;
};

class ServerPartLog : public SystemLog<ServerPartLogElement>
{
    using SystemLog<ServerPartLogElement>::SystemLog;
public:
    static bool addNewParts(const ContextPtr & local_context, ServerPartLogElement::Type type, const MutableMergeTreeDataPartsCNCHVector & parts, UInt64 txn_id, UInt8 error);
    void prepareTable() override;
};

}
