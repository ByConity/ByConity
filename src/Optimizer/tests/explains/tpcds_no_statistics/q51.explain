Projection Est. 100 rows
│     Expressions: d_date:=`expr#multiIf(isNotNull(web.d_date), web.d_date, store.d_date)`, item_sk:=`expr#multiIf(isNotNull(web.item_sk), web.item_sk, store.item_sk)`, store_cumulative:=`expr#max(store_sales) OVER (PARTITION BY item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)`, store_sales:=`expr#sum(sum(ss_sales_price)) OVER (PARTITION BY ss_item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)`, web_cumulative:=`expr#max(web_sales) OVER (PARTITION BY item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)`, web_sales:=`expr#sum(sum(ws_sales_price)) OVER (PARTITION BY ws_item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)`
└─ Limit Est. 100 rows
   │     Limit: 100
   └─ Sorting Est. 100 rows
      │     Order by: {expr#multiIf(isNotNull(web.item_sk), web.item_sk, store.item_sk) asc, expr#multiIf(isNotNull(web.d_date), web.d_date, store.d_date) asc}
      │     Limit: 100
      └─ Gather Exchange Est. ? rows
         └─ Sorting Est. 100 rows
            │     Order by: {expr#multiIf(isNotNull(web.item_sk), web.item_sk, store.item_sk) asc, expr#multiIf(isNotNull(web.d_date), web.d_date, store.d_date) asc}
            │     Limit: 100
            └─ Filter Est. ? rows
               │     Condition: `expr#max(web_sales) OVER (PARTITION BY item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)` > `expr#max(store_sales) OVER (PARTITION BY item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)`
               └─ Window Est. ? rows
                  └─ Repartition Exchange Est. ? rows
                     │     Partition by: {expr#multiIf(isNotNull(web.item_sk), web.item_sk, store.item_sk)}
                     └─ Projection Est. ? rows
                        │     Expressions: [expr#sum(sum(ss_sales_price)) OVER (PARTITION BY ss_item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), expr#sum(sum(ws_sales_price)) OVER (PARTITION BY ws_item_sk ORDER BY d_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], expr#multiIf(isNotNull(web.d_date), web.d_date, store.d_date):=multiIf(isNotNull(d_date), d_date, d_date_1), expr#multiIf(isNotNull(web.item_sk), web.item_sk, store.item_sk):=multiIf(isNotNull(ws_item_sk), ws_item_sk, ss_item_sk)
                        └─ Full Join Est. ? rows
                           │     Condition: ws_item_sk == ss_item_sk, d_date == d_date_1
                           ├─ Window Est. ? rows
                           │  └─ Repartition Exchange Est. ? rows
                           │     │     Partition by: {ws_item_sk}
                           │     └─ MergingAggregated Est. ? rows
                           │        └─ Repartition Exchange Est. ? rows
                           │           │     Partition by: {d_date, ws_item_sk}
                           │           └─ Aggregating Est. ? rows
                           │              │     Group by: {d_date, ws_item_sk}
                           │              │     Aggregates: expr#sum(ws_sales_price):=AggNull(sum)(ws_sales_price)
                           │              └─ Inner Join Est. ? rows
                           │                 │     Condition: ws_sold_date_sk == d_date_sk
                           │                 ├─ Repartition Exchange Est. ? rows
                           │                 │  │     Partition by: {ws_sold_date_sk}
                           │                 │  └─ Filter Est. ? rows
                           │                 │     │     Condition: isNotNull(ws_item_sk)
                           │                 │     └─ TableScan tpcds.web_sales Est. ? rows
                           │                 │              Condition : isNotNull(ws_item_sk).
                           │                 │              Outputs: [ws_item_sk, ws_sales_price, ws_sold_date_sk]
                           │                 └─ Repartition Exchange Est. ? rows
                           │                    │     Partition by: {d_date_sk}
                           │                    └─ Filter Est. ? rows
                           │                       │     Condition: (d_month_seq >= 1200) AND (d_month_seq <= 1211)
                           │                       └─ TableScan tpcds.date_dim Est. ? rows
                           │                                Condition : (d_month_seq >= 1200) AND (d_month_seq <= 1211).
                           │                                Outputs: [d_date, d_date_sk, d_month_seq]
                           └─ Window Est. ? rows
                              └─ Repartition Exchange Est. ? rows
                                 │     Partition by: {ss_item_sk}
                                 └─ MergingAggregated Est. ? rows
                                    └─ Repartition Exchange Est. ? rows
                                       │     Partition by: {d_date_1, ss_item_sk}
                                       └─ Aggregating Est. ? rows
                                          │     Group by: {d_date_1, ss_item_sk}
                                          │     Aggregates: expr#sum(ss_sales_price):=AggNull(sum)(ss_sales_price)
                                          └─ Inner Join Est. ? rows
                                             │     Condition: ss_sold_date_sk == d_date_sk_1
                                             ├─ Repartition Exchange Est. ? rows
                                             │  │     Partition by: {ss_sold_date_sk}
                                             │  └─ Filter Est. ? rows
                                             │     │     Condition: isNotNull(ss_item_sk)
                                             │     └─ TableScan tpcds.store_sales Est. ? rows
                                             │              Condition : isNotNull(ss_item_sk).
                                             │              Outputs: [ss_item_sk, ss_sales_price, ss_sold_date_sk]
                                             └─ Repartition Exchange Est. ? rows
                                                │     Partition by: {d_date_sk_1}
                                                └─ Filter Est. ? rows
                                                   │     Condition: (d_month_seq_1 >= 1200) AND (d_month_seq_1 <= 1211)
                                                   └─ TableScan tpcds.date_dim Est. ? rows
                                                            Condition : (d_month_seq >= 1200) AND (d_month_seq <= 1211).
                                                            Outputs: d_date_1:=d_date, d_date_sk_1:=d_date_sk, d_month_seq_1:=d_month_seq
