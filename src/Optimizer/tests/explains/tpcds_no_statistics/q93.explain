Projection Est. 100 rows
│     Expressions: [ss_customer_sk], sumsales:=`expr#sum(act_sales)`
└─ Limit Est. 100 rows
   │     Limit: 100
   └─ Sorting Est. 100 rows
      │     Order by: {expr#sum(act_sales) asc, ss_customer_sk asc}
      │     Limit: 100
      └─ Gather Exchange Est. ? rows
         └─ Sorting Est. 100 rows
            │     Order by: {expr#sum(act_sales) asc, ss_customer_sk asc}
            │     Limit: 100
            └─ MergingAggregated Est. ? rows
               └─ Repartition Exchange Est. ? rows
                  │     Partition by: {ss_customer_sk}
                  └─ Aggregating Est. ? rows
                     │     Group by: {ss_customer_sk}
                     │     Aggregates: expr#sum(act_sales):=AggNull(sum)(expr#multiIf(isNotNull(sr_return_quantity), multiply(minus(ss_quantity, sr_return_quantity), ss_sales_price), multiply(ss_quantity, ss_sales_price)))
                     └─ Projection Est. ? rows
                        │     Expressions: [ss_customer_sk], expr#multiIf(isNotNull(sr_return_quantity), multiply(minus(ss_quantity, sr_return_quantity), ss_sales_price), multiply(ss_quantity, ss_sales_price)):=multiIf(isNotNull(sr_return_quantity), (ss_quantity - sr_return_quantity) * ss_sales_price, ss_quantity * ss_sales_price)
                        └─ Inner Join Est. ? rows
                           │     Condition: sr_reason_sk == r_reason_sk
                           ├─ Repartition Exchange Est. ? rows
                           │  │     Partition by: {sr_reason_sk}
                           │  └─ Left Join Est. ? rows
                           │     │     Condition: ss_item_sk == sr_item_sk, ss_ticket_number == sr_ticket_number
                           │     ├─ Repartition Exchange Est. ? rows
                           │     │  │     Partition by: {ss_item_sk, ss_ticket_number}
                           │     │  └─ TableScan tpcds.store_sales Est. ? rows
                           │     │           Outputs: [ss_customer_sk, ss_item_sk, ss_quantity, ss_sales_price, ss_ticket_number]
                           │     └─ Repartition Exchange Est. ? rows
                           │        │     Partition by: {sr_item_sk, sr_ticket_number}
                           │        └─ TableScan tpcds.store_returns Est. ? rows
                           │                 Outputs: [sr_item_sk, sr_reason_sk, sr_return_quantity, sr_ticket_number]
                           └─ Repartition Exchange Est. ? rows
                              │     Partition by: {r_reason_sk}
                              └─ Filter Est. ? rows
                                 │     Condition: r_reason_desc = 'reason 28'
                                 └─ TableScan tpcds.reason Est. ? rows
                                          Condition : r_reason_desc = 'reason 28'.
                                          Outputs: [r_reason_desc, r_reason_sk]
