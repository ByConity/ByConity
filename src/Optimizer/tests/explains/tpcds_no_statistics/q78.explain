Projection Est. 100 rows
│     Expressions: [ss_customer_sk, ss_item_sk], other_chan_qty:=`expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))`, other_chan_sales_price:=`expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0))`, other_chan_wholesale_cost:=`expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0))`, ratio:=`expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2)`, ss_sold_year:=d_year, store_qty:=`expr#sum(ss_quantity)`, store_sales_price:=`expr#sum(ss_sales_price)`, store_wholesale_cost:=`expr#sum(ss_wholesale_cost)`
└─ Limit Est. 100 rows
   │     Limit: 100
   └─ Sorting Est. 100 rows
      │     Order by: {d_year asc, ss_item_sk asc, ss_customer_sk asc, expr#sum(ss_quantity) desc nulls_last, expr#sum(ss_wholesale_cost) desc nulls_last, expr#sum(ss_sales_price) desc nulls_last, expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0)) asc, expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0)) asc, expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0)) asc, expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2) asc}
      │     Limit: 100
      └─ Gather Exchange Est. ? rows
         └─ Sorting Est. 100 rows
            │     Order by: {d_year asc, ss_item_sk asc, ss_customer_sk asc, expr#sum(ss_quantity) desc nulls_last, expr#sum(ss_wholesale_cost) desc nulls_last, expr#sum(ss_sales_price) desc nulls_last, expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0)) asc, expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0)) asc, expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0)) asc, expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2) asc}
            │     Limit: 100
            └─ Projection Est. ? rows
               │     Expressions: [d_year, expr#sum(ss_quantity), expr#sum(ss_sales_price), expr#sum(ss_wholesale_cost), ss_customer_sk, ss_item_sk], expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0)):=coalesce(`expr#sum(ws_quantity)`, 0) + coalesce(`expr#sum(cs_quantity)`, 0), expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0)):=coalesce(`expr#sum(ws_sales_price)`, 0) + coalesce(`expr#sum(cs_sales_price)`, 0), expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0)):=coalesce(`expr#sum(ws_wholesale_cost)`, 0) + coalesce(`expr#sum(cs_wholesale_cost)`, 0), expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2):=round(`expr#sum(ss_quantity)` / (coalesce(`expr#sum(ws_quantity)`, 0) + coalesce(`expr#sum(cs_quantity)`, 0)), 2)
               └─ Filter Est. ? rows
                  │     Condition: (coalesce(`expr#sum(ws_quantity)`, 0) > 0) OR (coalesce(`expr#sum(cs_quantity)`, 0) > 0)
                  └─ Left Join Est. ? rows
                     │     Condition: d_year == d_year_2, ss_customer_sk == cs_bill_customer_sk, ss_item_sk == cs_item_sk
                     ├─ Left Join Est. ? rows
                     │  │     Condition: d_year == d_year_1, ss_customer_sk == ws_bill_customer_sk, ss_item_sk == ws_item_sk
                     │  ├─ MergingAggregated Est. ? rows
                     │  │  └─ Repartition Exchange Est. ? rows
                     │  │     │     Partition by: {d_year, ss_customer_sk, ss_item_sk}
                     │  │     └─ Aggregating Est. ? rows
                     │  │        │     Group by: {d_year, ss_customer_sk, ss_item_sk}
                     │  │        │     Aggregates: expr#sum(ss_quantity):=AggNull(sum)(ss_quantity), expr#sum(ss_wholesale_cost):=AggNull(sum)(ss_wholesale_cost), expr#sum(ss_sales_price):=AggNull(sum)(ss_sales_price)
                     │  │        └─ Inner Join Est. ? rows
                     │  │           │     Condition: ss_sold_date_sk == d_date_sk
                     │  │           ├─ Repartition Exchange Est. ? rows
                     │  │           │  │     Partition by: {ss_sold_date_sk}
                     │  │           │  └─ Projection Est. ? rows
                     │  │           │     │     Expressions: [ss_customer_sk, ss_item_sk, ss_quantity, ss_sales_price, ss_sold_date_sk, ss_wholesale_cost]
                     │  │           │     └─ Filter Est. ? rows
                     │  │           │        │     Condition: isNull(sr_ticket_number)
                     │  │           │        └─ Left Join Est. ? rows
                     │  │           │           │     Condition: ss_item_sk == sr_item_sk, ss_ticket_number == sr_ticket_number
                     │  │           │           ├─ Repartition Exchange Est. ? rows
                     │  │           │           │  │     Partition by: {ss_item_sk, ss_ticket_number}
                     │  │           │           │  └─ TableScan tpcds.store_sales Est. ? rows
                     │  │           │           │           Outputs: [ss_customer_sk, ss_item_sk, ss_quantity, ss_sales_price, ss_sold_date_sk, ss_ticket_number, ss_wholesale_cost]
                     │  │           │           └─ Repartition Exchange Est. ? rows
                     │  │           │              │     Partition by: {sr_item_sk, sr_ticket_number}
                     │  │           │              └─ TableScan tpcds.store_returns Est. ? rows
                     │  │           │                       Outputs: [sr_item_sk, sr_ticket_number]
                     │  │           └─ Repartition Exchange Est. ? rows
                     │  │              │     Partition by: {d_date_sk}
                     │  │              └─ Filter Est. ? rows
                     │  │                 │     Condition: d_year = 2000
                     │  │                 └─ TableScan tpcds.date_dim Est. ? rows
                     │  │                          Condition : d_year = 2000.
                     │  │                          Outputs: [d_date_sk, d_year]
                     │  └─ MergingAggregated Est. ? rows
                     │     └─ Repartition Exchange Est. ? rows
                     │        │     Partition by: {d_year_1, ws_bill_customer_sk, ws_item_sk}
                     │        └─ Aggregating Est. ? rows
                     │           │     Group by: {d_year_1, ws_bill_customer_sk, ws_item_sk}
                     │           │     Aggregates: expr#sum(ws_quantity):=AggNull(sum)(ws_quantity), expr#sum(ws_wholesale_cost):=AggNull(sum)(ws_wholesale_cost), expr#sum(ws_sales_price):=AggNull(sum)(ws_sales_price)
                     │           └─ Inner Join Est. ? rows
                     │              │     Condition: ws_sold_date_sk == d_date_sk_1
                     │              ├─ Repartition Exchange Est. ? rows
                     │              │  │     Partition by: {ws_sold_date_sk}
                     │              │  └─ Projection Est. ? rows
                     │              │     │     Expressions: [ws_bill_customer_sk, ws_item_sk, ws_quantity, ws_sales_price, ws_sold_date_sk, ws_wholesale_cost]
                     │              │     └─ Filter Est. ? rows
                     │              │        │     Condition: isNull(wr_order_number)
                     │              │        └─ Left Join Est. ? rows
                     │              │           │     Condition: ws_item_sk == wr_item_sk, ws_order_number == wr_order_number
                     │              │           ├─ Repartition Exchange Est. ? rows
                     │              │           │  │     Partition by: {ws_item_sk, ws_order_number}
                     │              │           │  └─ TableScan tpcds.web_sales Est. ? rows
                     │              │           │           Outputs: [ws_bill_customer_sk, ws_item_sk, ws_order_number, ws_quantity, ws_sales_price, ws_sold_date_sk, ws_wholesale_cost]
                     │              │           └─ Repartition Exchange Est. ? rows
                     │              │              │     Partition by: {wr_item_sk, wr_order_number}
                     │              │              └─ TableScan tpcds.web_returns Est. ? rows
                     │              │                       Outputs: [wr_item_sk, wr_order_number]
                     │              └─ Repartition Exchange Est. ? rows
                     │                 │     Partition by: {d_date_sk_1}
                     │                 └─ Filter Est. ? rows
                     │                    │     Condition: d_year_1 = 2000
                     │                    └─ TableScan tpcds.date_dim Est. ? rows
                     │                             Condition : d_year = 2000.
                     │                             Outputs: d_date_sk_1:=d_date_sk, d_year_1:=d_year
                     └─ MergingAggregated Est. ? rows
                        └─ Repartition Exchange Est. ? rows
                           │     Partition by: {cs_bill_customer_sk, cs_item_sk, d_year_2}
                           └─ Aggregating Est. ? rows
                              │     Group by: {cs_bill_customer_sk, cs_item_sk, d_year_2}
                              │     Aggregates: expr#sum(cs_quantity):=AggNull(sum)(cs_quantity), expr#sum(cs_wholesale_cost):=AggNull(sum)(cs_wholesale_cost), expr#sum(cs_sales_price):=AggNull(sum)(cs_sales_price)
                              └─ Inner Join Est. ? rows
                                 │     Condition: cs_sold_date_sk == d_date_sk_2
                                 ├─ Repartition Exchange Est. ? rows
                                 │  │     Partition by: {cs_sold_date_sk}
                                 │  └─ Projection Est. ? rows
                                 │     │     Expressions: [cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_sales_price, cs_sold_date_sk, cs_wholesale_cost]
                                 │     └─ Filter Est. ? rows
                                 │        │     Condition: isNull(cr_order_number)
                                 │        └─ Left Join Est. ? rows
                                 │           │     Condition: cs_item_sk == cr_item_sk, cs_order_number == cr_order_number
                                 │           ├─ Repartition Exchange Est. ? rows
                                 │           │  │     Partition by: {cs_item_sk, cs_order_number}
                                 │           │  └─ TableScan tpcds.catalog_sales Est. ? rows
                                 │           │           Outputs: [cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_sales_price, cs_sold_date_sk, cs_wholesale_cost]
                                 │           └─ Repartition Exchange Est. ? rows
                                 │              │     Partition by: {cr_item_sk, cr_order_number}
                                 │              └─ TableScan tpcds.catalog_returns Est. ? rows
                                 │                       Outputs: [cr_item_sk, cr_order_number]
                                 └─ Repartition Exchange Est. ? rows
                                    │     Partition by: {d_date_sk_2}
                                    └─ Filter Est. ? rows
                                       │     Condition: d_year_2 = 2000
                                       └─ TableScan tpcds.date_dim Est. ? rows
                                                Condition : d_year = 2000.
                                                Outputs: d_date_sk_2:=d_date_sk, d_year_2:=d_year
