Projection est. 100 rows
│     Expressions: [c_customer_id]
└─ Limit est. 100 rows
   │     Limit: 100
   └─ Sorting est. ? rows
      │     Order by: {c_customer_id asc}
      │     Limit: 100
      └─ Gather Exchange est. ? rows
         └─ Sorting est. ? rows
            │     Order by: {c_customer_id asc}
            │     Limit: 100
            └─ Inner Join est. ? rows
               │     Condition: s_store_sk == sr_store_sk_2
               │     Filter: `expr#sum(sr_return_amt)_1` > (`expr#avg(ctr_total_return)` * '1.2')
               ├─ Repartition Exchange est. ? rows
               │  │     Partition by: {s_store_sk}
               │  └─ Inner Join est. ? rows
               │     │     Condition: sr_customer_sk_1 == c_customer_sk
               │     ├─ Repartition Exchange est. ? rows
               │     │  │     Partition by: {sr_customer_sk_1}
               │     │  └─ Inner Join est. ? rows
               │     │     │     Condition: sr_store_sk_1 == s_store_sk
               │     │     ├─ Repartition Exchange est. ? rows
               │     │     │  │     Partition by: {sr_store_sk_1}
               │     │     │  └─ CTERef [0] est. ? rows
               │     │     └─ Repartition Exchange est. ? rows
               │     │        │     Partition by: {s_store_sk}
               │     │        └─ Filter est. ? rows
               │     │           │     Condition: s_state = 'TN'
               │     │           └─ TableScan tpcds.store est. ? rows
               │     │                    Outputs: [s_state, s_store_sk]
               │     └─ Repartition Exchange est. ? rows
               │        │     Partition by: {c_customer_sk}
               │        └─ TableScan tpcds.customer est. ? rows
               │                 Outputs: [c_customer_id, c_customer_sk]
               └─ MergingAggregated est. ? rows
                  └─ Repartition Exchange est. ? rows
                     │     Partition by: {sr_store_sk_2}
                     └─ Aggregating est. ? rows
                        │     Group by: {sr_store_sk_2}
                        │     Aggregates: expr#avg(ctr_total_return):=AggNull(avgIf)(expr#sum(sr_return_amt)_2,build_side_non_null_symbol)
                        └─ Projection est. ? rows
                           │     Expressions: [expr#sum(sr_return_amt)_2, sr_store_sk_2], build_side_non_null_symbol:=1
                           └─ CTERef [0] est. ? rows
CTEDef [0]
MergingAggregated est. ? rows
└─ Repartition Exchange est. ? rows
   │     Partition by: {sr_customer_sk, sr_store_sk}
   └─ Aggregating est. ? rows
      │     Group by: {sr_customer_sk, sr_store_sk}
      │     Aggregates: expr#sum(sr_return_amt):=AggNull(sum)(sr_return_amt)
      └─ Inner Join est. ? rows
         │     Condition: sr_returned_date_sk == d_date_sk
         ├─ Repartition Exchange est. ? rows
         │  │     Partition by: {sr_returned_date_sk}
         │  └─ TableScan tpcds.store_returns est. ? rows
         │           Outputs: [sr_customer_sk, sr_return_amt, sr_returned_date_sk, sr_store_sk]
         └─ Repartition Exchange est. ? rows
            │     Partition by: {d_date_sk}
            └─ Filter est. ? rows
               │     Condition: d_year = 2000
               └─ TableScan tpcds.date_dim est. ? rows
                        Outputs: [d_date_sk, d_year]
note: CTE(Common Table Expression) is applied for 2 times.
