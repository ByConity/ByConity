Projection Est. 100 rows
│     Expressions: channel:=`expr#'web'_1`, currency_rank:=`expr#rank() OVER (ORDER BY currency_ratio ASC)_3`, item:=ws_item_sk_1, return_rank:=`expr#rank() OVER (ORDER BY return_ratio ASC)_3`, return_ratio:=`expr#divide(CAST(sum(coalesce(wr.wr_return_quantity, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(ws.ws_quantity, 0)), 'decimal(15, 4)'))_1`
└─ Limit Est. 100 rows
   │     Limit: 100
   └─ Sorting Est. 100 rows
      │     Order by: {expr#'web'_1 asc, expr#rank() OVER (ORDER BY return_ratio ASC)_3 asc, expr#rank() OVER (ORDER BY currency_ratio ASC)_3 asc, ws_item_sk_1 asc}
      │     Limit: 100
      └─ Distinct Est. ? rows
         └─ Union Est. ? rows
            ├─ Projection Est. ? rows
            │  │     Expressions: [expr#divide(CAST(sum(coalesce(wr.wr_return_quantity, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(ws.ws_quantity, 0)), 'decimal(15, 4)')), expr#rank() OVER (ORDER BY currency_ratio ASC), expr#rank() OVER (ORDER BY return_ratio ASC), ws_item_sk], expr#'web':='web'
            │  └─ Filter Est. ? rows
            │     │     Condition: (`expr#rank() OVER (ORDER BY return_ratio ASC)` <= 10) OR (`expr#rank() OVER (ORDER BY currency_ratio ASC)` <= 10)
            │     └─ Window Est. ? rows
            │        └─ Window Est. ? rows
            │           └─ Gather Exchange Est. ? rows
            │              └─ Projection Est. ? rows
            │                 │     Expressions: [ws_item_sk], expr#divide(CAST(sum(coalesce(wr.wr_return_amt, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(ws.ws_net_paid, 0)), 'decimal(15, 4)')):=CAST(`expr#sum(coalesce(wr.wr_return_amt, 0))`, 'decimal(15, 4)') / CAST(`expr#sum(coalesce(ws.ws_net_paid, 0))`, 'decimal(15, 4)'), expr#divide(CAST(sum(coalesce(wr.wr_return_quantity, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(ws.ws_quantity, 0)), 'decimal(15, 4)')):=CAST(`expr#sum(coalesce(wr.wr_return_quantity, 0))`, 'decimal(15, 4)') / CAST(`expr#sum(coalesce(ws.ws_quantity, 0))`, 'decimal(15, 4)')
            │                 └─ MergingAggregated Est. ? rows
            │                    └─ Repartition Exchange Est. ? rows
            │                       │     Partition by: {ws_item_sk}
            │                       └─ Aggregating Est. ? rows
            │                          │     Group by: {ws_item_sk}
            │                          │     Aggregates: expr#sum(coalesce(wr.wr_return_quantity, 0)):=AggNull(sum)(expr#coalesce(wr.wr_return_quantity, 0)), expr#sum(coalesce(ws.ws_quantity, 0)):=AggNull(sum)(expr#coalesce(ws.ws_quantity, 0)), expr#sum(coalesce(wr.wr_return_amt, 0)):=AggNull(sum)(expr#coalesce(wr.wr_return_amt, 0)), expr#sum(coalesce(ws.ws_net_paid, 0)):=AggNull(sum)(expr#coalesce(ws.ws_net_paid, 0))
            │                          └─ Projection Est. ? rows
            │                             │     Expressions: [ws_item_sk], expr#coalesce(wr.wr_return_amt, 0):=coalesce(wr_return_amt, 0), expr#coalesce(wr.wr_return_quantity, 0):=coalesce(wr_return_quantity, 0), expr#coalesce(ws.ws_net_paid, 0):=coalesce(ws_net_paid, 0), expr#coalesce(ws.ws_quantity, 0):=coalesce(ws_quantity, 0)
            │                             └─ Inner Join Est. ? rows
            │                                │     Condition: ws_sold_date_sk == d_date_sk
            │                                ├─ Repartition Exchange Est. ? rows
            │                                │  │     Partition by: {ws_sold_date_sk}
            │                                │  └─ Inner Join Est. ? rows
            │                                │     │     Condition: ws_item_sk == wr_item_sk, ws_order_number == wr_order_number
            │                                │     ├─ Repartition Exchange Est. ? rows
            │                                │     │  │     Partition by: {ws_item_sk, ws_order_number}
            │                                │     │  └─ Filter Est. ? rows
            │                                │     │     │     Condition: (ws_net_profit > 1.) AND (ws_net_paid > 0.) AND (ws_quantity > 0)
            │                                │     │     └─ TableScan tpcds.web_sales Est. ? rows
            │                                │     │              Condition : (ws_net_profit > 1.) AND (ws_net_paid > 0.) AND (ws_quantity > 0).
            │                                │     │              Outputs: [ws_item_sk, ws_net_paid, ws_net_profit, ws_order_number, ws_quantity, ws_sold_date_sk]
            │                                │     └─ Repartition Exchange Est. ? rows
            │                                │        │     Partition by: {wr_item_sk, wr_order_number}
            │                                │        └─ Filter Est. ? rows
            │                                │           │     Condition: wr_return_amt > 10000.
            │                                │           └─ TableScan tpcds.web_returns Est. ? rows
            │                                │                    Condition : wr_return_amt > 10000..
            │                                │                    Outputs: [wr_item_sk, wr_order_number, wr_return_amt, wr_return_quantity]
            │                                └─ Repartition Exchange Est. ? rows
            │                                   │     Partition by: {d_date_sk}
            │                                   └─ Filter Est. ? rows
            │                                      │     Condition: (d_moy = 12) AND (d_year = 2001)
            │                                      └─ TableScan tpcds.date_dim Est. ? rows
            │                                               Condition : (d_moy = 12) AND (d_year = 2001).
            │                                               Outputs: [d_date_sk, d_moy, d_year]
            ├─ Projection Est. ? rows
            │  │     Expressions: [cs_item_sk, expr#divide(CAST(sum(coalesce(cr.cr_return_quantity, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(cs.cs_quantity, 0)), 'decimal(15, 4)')), expr#rank() OVER (ORDER BY currency_ratio ASC)_1, expr#rank() OVER (ORDER BY return_ratio ASC)_1], expr#'catalog':='catalog'
            │  └─ Filter Est. ? rows
            │     │     Condition: (`expr#rank() OVER (ORDER BY return_ratio ASC)_1` <= 10) OR (`expr#rank() OVER (ORDER BY currency_ratio ASC)_1` <= 10)
            │     └─ Window Est. ? rows
            │        └─ Window Est. ? rows
            │           └─ Gather Exchange Est. ? rows
            │              └─ Projection Est. ? rows
            │                 │     Expressions: [cs_item_sk], expr#divide(CAST(sum(coalesce(cr.cr_return_amount, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(cs.cs_net_paid, 0)), 'decimal(15, 4)')):=CAST(`expr#sum(coalesce(cr.cr_return_amount, 0))`, 'decimal(15, 4)') / CAST(`expr#sum(coalesce(cs.cs_net_paid, 0))`, 'decimal(15, 4)'), expr#divide(CAST(sum(coalesce(cr.cr_return_quantity, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(cs.cs_quantity, 0)), 'decimal(15, 4)')):=CAST(`expr#sum(coalesce(cr.cr_return_quantity, 0))`, 'decimal(15, 4)') / CAST(`expr#sum(coalesce(cs.cs_quantity, 0))`, 'decimal(15, 4)')
            │                 └─ MergingAggregated Est. ? rows
            │                    └─ Repartition Exchange Est. ? rows
            │                       │     Partition by: {cs_item_sk}
            │                       └─ Aggregating Est. ? rows
            │                          │     Group by: {cs_item_sk}
            │                          │     Aggregates: expr#sum(coalesce(cr.cr_return_quantity, 0)):=AggNull(sum)(expr#coalesce(cr.cr_return_quantity, 0)), expr#sum(coalesce(cs.cs_quantity, 0)):=AggNull(sum)(expr#coalesce(cs.cs_quantity, 0)), expr#sum(coalesce(cr.cr_return_amount, 0)):=AggNull(sum)(expr#coalesce(cr.cr_return_amount, 0)), expr#sum(coalesce(cs.cs_net_paid, 0)):=AggNull(sum)(expr#coalesce(cs.cs_net_paid, 0))
            │                          └─ Projection Est. ? rows
            │                             │     Expressions: [cs_item_sk], expr#coalesce(cr.cr_return_amount, 0):=coalesce(cr_return_amount, 0), expr#coalesce(cr.cr_return_quantity, 0):=coalesce(cr_return_quantity, 0), expr#coalesce(cs.cs_net_paid, 0):=coalesce(cs_net_paid, 0), expr#coalesce(cs.cs_quantity, 0):=coalesce(cs_quantity, 0)
            │                             └─ Inner Join Est. ? rows
            │                                │     Condition: cs_sold_date_sk == d_date_sk_1
            │                                ├─ Repartition Exchange Est. ? rows
            │                                │  │     Partition by: {cs_sold_date_sk}
            │                                │  └─ Inner Join Est. ? rows
            │                                │     │     Condition: cs_item_sk == cr_item_sk, cs_order_number == cr_order_number
            │                                │     ├─ Repartition Exchange Est. ? rows
            │                                │     │  │     Partition by: {cs_item_sk, cs_order_number}
            │                                │     │  └─ Filter Est. ? rows
            │                                │     │     │     Condition: (cs_net_profit > 1.) AND (cs_net_paid > 0.) AND (cs_quantity > 0)
            │                                │     │     └─ TableScan tpcds.catalog_sales Est. ? rows
            │                                │     │              Condition : (cs_net_profit > 1.) AND (cs_net_paid > 0.) AND (cs_quantity > 0).
            │                                │     │              Outputs: [cs_item_sk, cs_net_paid, cs_net_profit, cs_order_number, cs_quantity, cs_sold_date_sk]
            │                                │     └─ Repartition Exchange Est. ? rows
            │                                │        │     Partition by: {cr_item_sk, cr_order_number}
            │                                │        └─ Filter Est. ? rows
            │                                │           │     Condition: cr_return_amount > 10000.
            │                                │           └─ TableScan tpcds.catalog_returns Est. ? rows
            │                                │                    Condition : cr_return_amount > 10000..
            │                                │                    Outputs: [cr_item_sk, cr_order_number, cr_return_amount, cr_return_quantity]
            │                                └─ Repartition Exchange Est. ? rows
            │                                   │     Partition by: {d_date_sk_1}
            │                                   └─ Filter Est. ? rows
            │                                      │     Condition: (d_year_1 = 2001) AND (d_moy_1 = 12)
            │                                      └─ TableScan tpcds.date_dim Est. ? rows
            │                                               Condition : (d_year = 2001) AND (d_moy = 12).
            │                                               Outputs: d_date_sk_1:=d_date_sk, d_moy_1:=d_moy, d_year_1:=d_year
            └─ Projection Est. ? rows
               │     Expressions: [expr#divide(CAST(sum(coalesce(sr.sr_return_quantity, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(sts.ss_quantity, 0)), 'decimal(15, 4)')), expr#rank() OVER (ORDER BY currency_ratio ASC)_2, expr#rank() OVER (ORDER BY return_ratio ASC)_2, ss_item_sk], expr#'store':='store'
               └─ Filter Est. ? rows
                  │     Condition: (`expr#rank() OVER (ORDER BY return_ratio ASC)_2` <= 10) OR (`expr#rank() OVER (ORDER BY currency_ratio ASC)_2` <= 10)
                  └─ Window Est. ? rows
                     └─ Window Est. ? rows
                        └─ Gather Exchange Est. ? rows
                           └─ Projection Est. ? rows
                              │     Expressions: [ss_item_sk], expr#divide(CAST(sum(coalesce(sr.sr_return_amt, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(sts.ss_net_paid, 0)), 'decimal(15, 4)')):=CAST(`expr#sum(coalesce(sr.sr_return_amt, 0))`, 'decimal(15, 4)') / CAST(`expr#sum(coalesce(sts.ss_net_paid, 0))`, 'decimal(15, 4)'), expr#divide(CAST(sum(coalesce(sr.sr_return_quantity, 0)), 'decimal(15, 4)'), CAST(sum(coalesce(sts.ss_quantity, 0)), 'decimal(15, 4)')):=CAST(`expr#sum(coalesce(sr.sr_return_quantity, 0))`, 'decimal(15, 4)') / CAST(`expr#sum(coalesce(sts.ss_quantity, 0))`, 'decimal(15, 4)')
                              └─ MergingAggregated Est. ? rows
                                 └─ Repartition Exchange Est. ? rows
                                    │     Partition by: {ss_item_sk}
                                    └─ Aggregating Est. ? rows
                                       │     Group by: {ss_item_sk}
                                       │     Aggregates: expr#sum(coalesce(sr.sr_return_quantity, 0)):=AggNull(sum)(expr#coalesce(sr.sr_return_quantity, 0)), expr#sum(coalesce(sts.ss_quantity, 0)):=AggNull(sum)(expr#coalesce(sts.ss_quantity, 0)), expr#sum(coalesce(sr.sr_return_amt, 0)):=AggNull(sum)(expr#coalesce(sr.sr_return_amt, 0)), expr#sum(coalesce(sts.ss_net_paid, 0)):=AggNull(sum)(expr#coalesce(sts.ss_net_paid, 0))
                                       └─ Projection Est. ? rows
                                          │     Expressions: [ss_item_sk], expr#coalesce(sr.sr_return_amt, 0):=coalesce(sr_return_amt, 0), expr#coalesce(sr.sr_return_quantity, 0):=coalesce(sr_return_quantity, 0), expr#coalesce(sts.ss_net_paid, 0):=coalesce(ss_net_paid, 0), expr#coalesce(sts.ss_quantity, 0):=coalesce(ss_quantity, 0)
                                          └─ Inner Join Est. ? rows
                                             │     Condition: ss_sold_date_sk == d_date_sk_2
                                             ├─ Repartition Exchange Est. ? rows
                                             │  │     Partition by: {ss_sold_date_sk}
                                             │  └─ Inner Join Est. ? rows
                                             │     │     Condition: ss_item_sk == sr_item_sk, ss_ticket_number == sr_ticket_number
                                             │     ├─ Repartition Exchange Est. ? rows
                                             │     │  │     Partition by: {ss_item_sk, ss_ticket_number}
                                             │     │  └─ Filter Est. ? rows
                                             │     │     │     Condition: (ss_net_profit > 1.) AND (ss_net_paid > 0.) AND (ss_quantity > 0)
                                             │     │     └─ TableScan tpcds.store_sales Est. ? rows
                                             │     │              Condition : (ss_net_profit > 1.) AND (ss_net_paid > 0.) AND (ss_quantity > 0).
                                             │     │              Outputs: [ss_item_sk, ss_net_paid, ss_net_profit, ss_quantity, ss_sold_date_sk, ss_ticket_number]
                                             │     └─ Repartition Exchange Est. ? rows
                                             │        │     Partition by: {sr_item_sk, sr_ticket_number}
                                             │        └─ Filter Est. ? rows
                                             │           │     Condition: sr_return_amt > 10000.
                                             │           └─ TableScan tpcds.store_returns Est. ? rows
                                             │                    Condition : sr_return_amt > 10000..
                                             │                    Outputs: [sr_item_sk, sr_return_amt, sr_return_quantity, sr_ticket_number]
                                             └─ Repartition Exchange Est. ? rows
                                                │     Partition by: {d_date_sk_2}
                                                └─ Filter Est. ? rows
                                                   │     Condition: (d_moy_2 = 12) AND (d_year_2 = 2001)
                                                   └─ TableScan tpcds.date_dim Est. ? rows
                                                            Condition : (d_moy = 12) AND (d_year = 2001).
                                                            Outputs: d_date_sk_2:=d_date_sk, d_moy_2:=d_moy, d_year_2:=d_year
