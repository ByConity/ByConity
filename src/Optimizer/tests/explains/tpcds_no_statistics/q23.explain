Projection Est. 100 rows
│     Expressions: sum(sales):=`expr#sum(sales)`
└─ Limit Est. 100 rows
   │     Limit: 100
   └─ MergingAggregated Est. ? rows
      └─ Gather Exchange Est. ? rows
         └─ Union Est. ? rows
            ├─ Aggregating Est. ? rows
            │  │     Group by: {}
            │  │     Aggregates: expr#sum(sales):=AggNull(sum)(expr#multiply(cs_quantity, cs_list_price))
            │  └─ Projection Est. ? rows
            │     │     Expressions: expr#multiply(cs_quantity, cs_list_price):=cs_quantity * cs_list_price
            │     └─ Inner Join Est. ? rows
            │        │     Condition: cs_bill_customer_sk == c_customer_sk_2
            │        ├─ Repartition Exchange Est. ? rows
            │        │  │     Partition by: {cs_bill_customer_sk}
            │        │  └─ Inner Join Est. ? rows
            │        │     │     Condition: cs_item_sk == i_item_sk_1
            │        │     ├─ Repartition Exchange Est. ? rows
            │        │     │  │     Partition by: {cs_item_sk}
            │        │     │  └─ Inner Join Est. ? rows
            │        │     │     │     Condition: cs_sold_date_sk == d_date_sk
            │        │     │     ├─ Repartition Exchange Est. ? rows
            │        │     │     │  │     Partition by: {cs_sold_date_sk}
            │        │     │     │  └─ Filter Est. ? rows
            │        │     │     │     │     Condition: isNotNull(cs_item_sk) AND isNotNull(cs_bill_customer_sk)
            │        │     │     │     └─ TableScan tpcds.catalog_sales Est. ? rows
            │        │     │     │              Condition : isNotNull(cs_item_sk) AND isNotNull(cs_bill_customer_sk).
            │        │     │     │              Outputs: [cs_bill_customer_sk, cs_item_sk, cs_list_price, cs_quantity, cs_sold_date_sk]
            │        │     │     └─ Repartition Exchange Est. ? rows
            │        │     │        │     Partition by: {d_date_sk}
            │        │     │        └─ Filter Est. ? rows
            │        │     │           │     Condition: (d_year = 2000) AND (d_moy = 2)
            │        │     │           └─ TableScan tpcds.date_dim Est. ? rows
            │        │     │                    Condition : (d_year = 2000) AND (d_moy = 2).
            │        │     │                    Outputs: [d_date_sk, d_moy, d_year]
            │        │     └─ Aggregating Est. ? rows
            │        │        │     Group by: {i_item_sk_1}
            │        │        └─ Filter Est. ? rows
            │        │           │     Condition: isNotNull(i_item_sk_1)
            │        │           └─ CTERef[0] Est. ? rows
            │        └─ Aggregating Est. ? rows
            │           │     Group by: {c_customer_sk_2}
            │           └─ Filter Est. ? rows
            │              │     Condition: isNotNull(c_customer_sk_2)
            │              └─ CTERef[1] Est. ? rows
            └─ Aggregating Est. ? rows
               │     Group by: {}
               │     Aggregates: expr#sum(sales):=AggNull(sum)(expr#multiply(ws_quantity, ws_list_price))
               └─ Projection Est. ? rows
                  │     Expressions: expr#multiply(ws_quantity, ws_list_price):=ws_quantity * ws_list_price
                  └─ Inner Join Est. ? rows
                     │     Condition: ws_bill_customer_sk == c_customer_sk_3
                     ├─ Repartition Exchange Est. ? rows
                     │  │     Partition by: {ws_bill_customer_sk}
                     │  └─ Inner Join Est. ? rows
                     │     │     Condition: ws_item_sk == i_item_sk_2
                     │     ├─ Repartition Exchange Est. ? rows
                     │     │  │     Partition by: {ws_item_sk}
                     │     │  └─ Inner Join Est. ? rows
                     │     │     │     Condition: ws_sold_date_sk == d_date_sk_3
                     │     │     ├─ Repartition Exchange Est. ? rows
                     │     │     │  │     Partition by: {ws_sold_date_sk}
                     │     │     │  └─ Filter Est. ? rows
                     │     │     │     │     Condition: isNotNull(ws_item_sk) AND isNotNull(ws_bill_customer_sk)
                     │     │     │     └─ TableScan tpcds.web_sales Est. ? rows
                     │     │     │              Condition : isNotNull(ws_item_sk) AND isNotNull(ws_bill_customer_sk).
                     │     │     │              Outputs: [ws_bill_customer_sk, ws_item_sk, ws_list_price, ws_quantity, ws_sold_date_sk]
                     │     │     └─ Repartition Exchange Est. ? rows
                     │     │        │     Partition by: {d_date_sk_3}
                     │     │        └─ Filter Est. ? rows
                     │     │           │     Condition: (d_year_3 = 2000) AND (d_moy_1 = 2)
                     │     │           └─ TableScan tpcds.date_dim Est. ? rows
                     │     │                    Condition : (d_year = 2000) AND (d_moy = 2).
                     │     │                    Outputs: d_date_sk_3:=d_date_sk, d_moy_1:=d_moy, d_year_3:=d_year
                     │     └─ Aggregating Est. ? rows
                     │        │     Group by: {i_item_sk_2}
                     │        └─ Filter Est. ? rows
                     │           │     Condition: isNotNull(i_item_sk_2)
                     │           └─ CTERef[0] Est. ? rows
                     └─ Aggregating Est. ? rows
                        │     Group by: {c_customer_sk_3}
                        └─ Filter Est. ? rows
                           │     Condition: isNotNull(c_customer_sk_3)
                           └─ CTERef[1] Est. ? rows
CTEDef [1]
   Inner Join Est. ? rows
   │     Condition: 
   │     Filter: `expr#sum(multiply(ss_quantity, ss_sales_price))` > ('0.500000' * `expr#max(csales)`)
   ├─ Aggregating Est. ? rows
   │  │     Group by: {c_customer_sk}
   │  │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price)):=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price))
   │  └─ Projection Est. ? rows
   │     │     Expressions: [c_customer_sk], expr#multiply(ss_quantity, ss_sales_price):=ss_quantity * ss_sales_price
   │     └─ Inner Join Est. ? rows
   │        │     Condition: ss_customer_sk == c_customer_sk
   │        ├─ Repartition Exchange Est. ? rows
   │        │  │     Partition by: {ss_customer_sk}
   │        │  └─ Filter Est. ? rows
   │        │     │     Condition: isNotNull(ss_customer_sk)
   │        │     └─ TableScan tpcds.store_sales Est. ? rows
   │        │              Condition : isNotNull(ss_customer_sk).
   │        │              Outputs: [ss_customer_sk, ss_quantity, ss_sales_price]
   │        └─ Repartition Exchange Est. ? rows
   │           │     Partition by: {c_customer_sk}
   │           └─ Filter Est. ? rows
   │              │     Condition: isNotNull(c_customer_sk)
   │              └─ TableScan tpcds.customer Est. ? rows
   │                       Condition : isNotNull(c_customer_sk).
   │                       Outputs: [c_customer_sk]
   └─ Broadcast Exchange Est. ? rows
      └─ MergingAggregated Est. ? rows
         └─ Gather Exchange Est. ? rows
            └─ Aggregating Est. ? rows
               │     Group by: {}
               │     Aggregates: expr#max(csales):=AggNull(max)(expr#sum(multiply(ss_quantity, ss_sales_price))_1)
               └─ Projection Est. ? rows
                  │     Expressions: [expr#sum(multiply(ss_quantity, ss_sales_price))_1]
                  └─ MergingAggregated Est. ? rows
                     └─ Repartition Exchange Est. ? rows
                        │     Partition by: {c_customer_sk_1}
                        └─ Aggregating Est. ? rows
                           │     Group by: {c_customer_sk_1}
                           │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_1:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_1)
                           └─ Projection Est. ? rows
                              │     Expressions: [c_customer_sk_1], expr#multiply(ss_quantity, ss_sales_price)_1:=ss_quantity_1 * ss_sales_price_1
                              └─ Inner Join Est. ? rows
                                 │     Condition: ss_sold_date_sk_1 == d_date_sk_2
                                 ├─ Repartition Exchange Est. ? rows
                                 │  │     Partition by: {ss_sold_date_sk_1}
                                 │  └─ Inner Join Est. ? rows
                                 │     │     Condition: ss_customer_sk_1 == c_customer_sk_1
                                 │     ├─ Repartition Exchange Est. ? rows
                                 │     │  │     Partition by: {ss_customer_sk_1}
                                 │     │  └─ TableScan tpcds.store_sales Est. ? rows
                                 │     │           Outputs: ss_customer_sk_1:=ss_customer_sk, ss_quantity_1:=ss_quantity, ss_sales_price_1:=ss_sales_price, ss_sold_date_sk_1:=ss_sold_date_sk
                                 │     └─ Repartition Exchange Est. ? rows
                                 │        │     Partition by: {c_customer_sk_1}
                                 │        └─ TableScan tpcds.customer Est. ? rows
                                 │                 Outputs: c_customer_sk_1:=c_customer_sk
                                 └─ Repartition Exchange Est. ? rows
                                    │     Partition by: {d_date_sk_2}
                                    └─ Filter Est. ? rows
                                       │     Condition: d_year_2 IN (2000, 2001, 2002, 2003)
                                       └─ TableScan tpcds.date_dim Est. ? rows
                                                Condition : d_year IN (2000, 2001, 2002, 2003).
                                                Outputs: d_date_sk_2:=d_date_sk, d_year_2:=d_year
CTEDef [0]
   Projection Est. ? rows
   │     Expressions: [i_item_sk]
   └─ Filter Est. ? rows
      │     Condition: `expr#count()` > 4
      └─ Aggregating Est. ? rows
         │     Group by: {d_date, expr#substring(i_item_desc, 1, 30), i_item_sk}
         │     Aggregates: expr#count():=AggNull(count)()
         └─ Projection Est. ? rows
            │     Expressions: [d_date, i_item_sk], expr#substring(i_item_desc, 1, 30):=substring(i_item_desc, 1, 30)
            └─ Inner Join Est. ? rows
               │     Condition: ss_item_sk == i_item_sk
               ├─ Repartition Exchange Est. ? rows
               │  │     Partition by: {ss_item_sk}
               │  └─ Inner Join Est. ? rows
               │     │     Condition: ss_sold_date_sk == d_date_sk_1
               │     ├─ Repartition Exchange Est. ? rows
               │     │  │     Partition by: {ss_sold_date_sk}
               │     │  └─ Filter Est. ? rows
               │     │     │     Condition: isNotNull(ss_item_sk)
               │     │     └─ TableScan tpcds.store_sales Est. ? rows
               │     │              Condition : isNotNull(ss_item_sk).
               │     │              Outputs: [ss_item_sk, ss_sold_date_sk]
               │     └─ Repartition Exchange Est. ? rows
               │        │     Partition by: {d_date_sk_1}
               │        └─ Filter Est. ? rows
               │           │     Condition: d_year_1 IN (2000, 2001, 2002, 2003)
               │           └─ TableScan tpcds.date_dim Est. ? rows
               │                    Condition : d_year IN (2000, 2001, 2002, 2003).
               │                    Outputs: [d_date], d_date_sk_1:=d_date_sk, d_year_1:=d_year
               └─ Repartition Exchange Est. ? rows
                  │     Partition by: {i_item_sk}
                  └─ Filter Est. ? rows
                     │     Condition: isNotNull(i_item_sk)
                     └─ TableScan tpcds.item Est. ? rows
                              Condition : isNotNull(i_item_sk).
                              Outputs: [i_item_desc, i_item_sk]
note: CTE(Common Table Expression) is applied for 4 times.
Projection Est. 100 rows
│     Expressions: c_first_name:=c_first_name_2, c_last_name:=c_last_name_2, sales:=`expr#sum(multiply(cs_quantity, cs_list_price))_1`
└─ Limit Est. 100 rows
   │     Limit: 100
   └─ Sorting Est. 100 rows
      │     Order by: {c_last_name_2 asc, c_first_name_2 asc, expr#sum(multiply(cs_quantity, cs_list_price))_1 asc}
      │     Limit: 100
      └─ Gather Exchange Est. ? rows
         └─ Sorting Est. 100 rows
            │     Order by: {c_last_name_2 asc, c_first_name_2 asc, expr#sum(multiply(cs_quantity, cs_list_price))_1 asc}
            │     Limit: 100
            └─ Union Est. ? rows
               ├─ MergingAggregated Est. ? rows
               │  └─ Repartition Exchange Est. ? rows
               │     │     Partition by: {c_first_name, c_last_name}
               │     └─ Aggregating Est. ? rows
               │        │     Group by: {c_first_name, c_last_name}
               │        │     Aggregates: expr#sum(multiply(cs_quantity, cs_list_price)):=AggNull(sum)(expr#multiply(cs_quantity, cs_list_price)_2)
               │        └─ Projection Est. ? rows
               │           │     Expressions: [c_first_name, c_last_name], expr#multiply(cs_quantity, cs_list_price)_2:=cs_quantity_1 * cs_list_price_1
               │           └─ Inner Join Est. ? rows
               │              │     Condition: c_customer_sk_4 == c_customer_sk_7
               │              ├─ Repartition Exchange Est. ? rows
               │              │  │     Partition by: {c_customer_sk_4}
               │              │  └─ Inner Join Est. ? rows
               │              │     │     Condition: cs_item_sk_1 == i_item_sk_4
               │              │     ├─ Repartition Exchange Est. ? rows
               │              │     │  │     Partition by: {cs_item_sk_1}
               │              │     │  └─ Inner Join Est. ? rows
               │              │     │     │     Condition: cs_sold_date_sk_1 == d_date_sk_4
               │              │     │     ├─ Repartition Exchange Est. ? rows
               │              │     │     │  │     Partition by: {cs_sold_date_sk_1}
               │              │     │     │  └─ Inner Join Est. ? rows
               │              │     │     │     │     Condition: cs_bill_customer_sk_1 == c_customer_sk_4
               │              │     │     │     ├─ Repartition Exchange Est. ? rows
               │              │     │     │     │  │     Partition by: {cs_bill_customer_sk_1}
               │              │     │     │     │  └─ Filter Est. ? rows
               │              │     │     │     │     │     Condition: isNotNull(cs_item_sk_1) AND isNotNull(cs_bill_customer_sk_1)
               │              │     │     │     │     └─ TableScan tpcds.catalog_sales Est. ? rows
               │              │     │     │     │              Condition : isNotNull(cs_item_sk) AND isNotNull(cs_bill_customer_sk).
               │              │     │     │     │              Outputs: cs_bill_customer_sk_1:=cs_bill_customer_sk, cs_item_sk_1:=cs_item_sk, cs_list_price_1:=cs_list_price, cs_quantity_1:=cs_quantity, cs_sold_date_sk_1:=cs_sold_date_sk
               │              │     │     │     └─ Repartition Exchange Est. ? rows
               │              │     │     │        │     Partition by: {c_customer_sk_4}
               │              │     │     │        └─ Filter Est. ? rows
               │              │     │     │           │     Condition: isNotNull(c_customer_sk_4)
               │              │     │     │           └─ TableScan tpcds.customer Est. ? rows
               │              │     │     │                    Condition : isNotNull(c_customer_sk).
               │              │     │     │                    Outputs: [c_first_name, c_last_name], c_customer_sk_4:=c_customer_sk
               │              │     │     └─ Repartition Exchange Est. ? rows
               │              │     │        │     Partition by: {d_date_sk_4}
               │              │     │        └─ Filter Est. ? rows
               │              │     │           │     Condition: (d_year_4 = 2000) AND (d_moy_2 = 2)
               │              │     │           └─ TableScan tpcds.date_dim Est. ? rows
               │              │     │                    Condition : (d_year = 2000) AND (d_moy = 2).
               │              │     │                    Outputs: d_date_sk_4:=d_date_sk, d_moy_2:=d_moy, d_year_4:=d_year
               │              │     └─ Aggregating Est. ? rows
               │              │        │     Group by: {i_item_sk_4}
               │              │        └─ Filter Est. ? rows
               │              │           │     Condition: isNotNull(i_item_sk_4)
               │              │           └─ CTERef[0] Est. ? rows
               │              └─ Aggregating Est. ? rows
               │                 │     Group by: {c_customer_sk_7}
               │                 └─ Filter Est. ? rows
               │                    │     Condition: isNotNull(c_customer_sk_7)
               │                    └─ CTERef[1] Est. ? rows
               └─ MergingAggregated Est. ? rows
                  └─ Repartition Exchange Est. ? rows
                     │     Partition by: {c_first_name_1, c_last_name_1}
                     └─ Aggregating Est. ? rows
                        │     Group by: {c_first_name_1, c_last_name_1}
                        │     Aggregates: expr#sum(multiply(ws_quantity, ws_list_price)):=AggNull(sum)(expr#multiply(ws_quantity, ws_list_price)_1)
                        └─ Projection Est. ? rows
                           │     Expressions: [c_first_name_1, c_last_name_1], expr#multiply(ws_quantity, ws_list_price)_1:=ws_quantity_1 * ws_list_price_1
                           └─ Inner Join Est. ? rows
                              │     Condition: c_customer_sk_8 == c_customer_sk_9
                              ├─ Repartition Exchange Est. ? rows
                              │  │     Partition by: {c_customer_sk_8}
                              │  └─ Inner Join Est. ? rows
                              │     │     Condition: ws_item_sk_1 == i_item_sk_5
                              │     ├─ Repartition Exchange Est. ? rows
                              │     │  │     Partition by: {ws_item_sk_1}
                              │     │  └─ Inner Join Est. ? rows
                              │     │     │     Condition: ws_sold_date_sk_1 == d_date_sk_7
                              │     │     ├─ Repartition Exchange Est. ? rows
                              │     │     │  │     Partition by: {ws_sold_date_sk_1}
                              │     │     │  └─ Inner Join Est. ? rows
                              │     │     │     │     Condition: ws_bill_customer_sk_1 == c_customer_sk_8
                              │     │     │     ├─ Repartition Exchange Est. ? rows
                              │     │     │     │  │     Partition by: {ws_bill_customer_sk_1}
                              │     │     │     │  └─ Filter Est. ? rows
                              │     │     │     │     │     Condition: isNotNull(ws_item_sk_1) AND isNotNull(ws_bill_customer_sk_1)
                              │     │     │     │     └─ TableScan tpcds.web_sales Est. ? rows
                              │     │     │     │              Condition : isNotNull(ws_item_sk) AND isNotNull(ws_bill_customer_sk).
                              │     │     │     │              Outputs: ws_bill_customer_sk_1:=ws_bill_customer_sk, ws_item_sk_1:=ws_item_sk, ws_list_price_1:=ws_list_price, ws_quantity_1:=ws_quantity, ws_sold_date_sk_1:=ws_sold_date_sk
                              │     │     │     └─ Repartition Exchange Est. ? rows
                              │     │     │        │     Partition by: {c_customer_sk_8}
                              │     │     │        └─ Filter Est. ? rows
                              │     │     │           │     Condition: isNotNull(c_customer_sk_8)
                              │     │     │           └─ TableScan tpcds.customer Est. ? rows
                              │     │     │                    Condition : isNotNull(c_customer_sk).
                              │     │     │                    Outputs: c_customer_sk_8:=c_customer_sk, c_first_name_1:=c_first_name, c_last_name_1:=c_last_name
                              │     │     └─ Repartition Exchange Est. ? rows
                              │     │        │     Partition by: {d_date_sk_7}
                              │     │        └─ Filter Est. ? rows
                              │     │           │     Condition: (d_year_7 = 2000) AND (d_moy_3 = 2)
                              │     │           └─ TableScan tpcds.date_dim Est. ? rows
                              │     │                    Condition : (d_year = 2000) AND (d_moy = 2).
                              │     │                    Outputs: d_date_sk_7:=d_date_sk, d_moy_3:=d_moy, d_year_7:=d_year
                              │     └─ Aggregating Est. ? rows
                              │        │     Group by: {i_item_sk_5}
                              │        └─ Filter Est. ? rows
                              │           │     Condition: isNotNull(i_item_sk_5)
                              │           └─ CTERef[0] Est. ? rows
                              └─ Aggregating Est. ? rows
                                 │     Group by: {c_customer_sk_9}
                                 └─ Filter Est. ? rows
                                    │     Condition: isNotNull(c_customer_sk_9)
                                    └─ CTERef[1] Est. ? rows
CTEDef [1]
   Inner Join Est. ? rows
   │     Condition: 
   │     Filter: `expr#sum(multiply(ss_quantity, ss_sales_price))_4` > ('0.500000' * `expr#max(csales)_1`)
   ├─ Aggregating Est. ? rows
   │  │     Group by: {c_customer_sk_5}
   │  │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_4:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_2)
   │  └─ Projection Est. ? rows
   │     │     Expressions: [c_customer_sk_5], expr#multiply(ss_quantity, ss_sales_price)_2:=ss_quantity_2 * ss_sales_price_2
   │     └─ Inner Join Est. ? rows
   │        │     Condition: ss_customer_sk_2 == c_customer_sk_5
   │        ├─ Repartition Exchange Est. ? rows
   │        │  │     Partition by: {ss_customer_sk_2}
   │        │  └─ Filter Est. ? rows
   │        │     │     Condition: isNotNull(ss_customer_sk_2)
   │        │     └─ TableScan tpcds.store_sales Est. ? rows
   │        │              Condition : isNotNull(ss_customer_sk).
   │        │              Outputs: ss_customer_sk_2:=ss_customer_sk, ss_quantity_2:=ss_quantity, ss_sales_price_2:=ss_sales_price
   │        └─ Repartition Exchange Est. ? rows
   │           │     Partition by: {c_customer_sk_5}
   │           └─ Filter Est. ? rows
   │              │     Condition: isNotNull(c_customer_sk_5)
   │              └─ TableScan tpcds.customer Est. ? rows
   │                       Condition : isNotNull(c_customer_sk).
   │                       Outputs: c_customer_sk_5:=c_customer_sk
   └─ Broadcast Exchange Est. ? rows
      └─ MergingAggregated Est. ? rows
         └─ Gather Exchange Est. ? rows
            └─ Aggregating Est. ? rows
               │     Group by: {}
               │     Aggregates: expr#max(csales)_1:=AggNull(max)(expr#sum(multiply(ss_quantity, ss_sales_price))_5)
               └─ Projection Est. ? rows
                  │     Expressions: [expr#sum(multiply(ss_quantity, ss_sales_price))_5]
                  └─ MergingAggregated Est. ? rows
                     └─ Repartition Exchange Est. ? rows
                        │     Partition by: {c_customer_sk_6}
                        └─ Aggregating Est. ? rows
                           │     Group by: {c_customer_sk_6}
                           │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_5:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_3)
                           └─ Projection Est. ? rows
                              │     Expressions: [c_customer_sk_6], expr#multiply(ss_quantity, ss_sales_price)_3:=ss_quantity_3 * ss_sales_price_3
                              └─ Inner Join Est. ? rows
                                 │     Condition: ss_sold_date_sk_3 == d_date_sk_6
                                 ├─ Repartition Exchange Est. ? rows
                                 │  │     Partition by: {ss_sold_date_sk_3}
                                 │  └─ Inner Join Est. ? rows
                                 │     │     Condition: ss_customer_sk_3 == c_customer_sk_6
                                 │     ├─ Repartition Exchange Est. ? rows
                                 │     │  │     Partition by: {ss_customer_sk_3}
                                 │     │  └─ TableScan tpcds.store_sales Est. ? rows
                                 │     │           Outputs: ss_customer_sk_3:=ss_customer_sk, ss_quantity_3:=ss_quantity, ss_sales_price_3:=ss_sales_price, ss_sold_date_sk_3:=ss_sold_date_sk
                                 │     └─ Repartition Exchange Est. ? rows
                                 │        │     Partition by: {c_customer_sk_6}
                                 │        └─ TableScan tpcds.customer Est. ? rows
                                 │                 Outputs: c_customer_sk_6:=c_customer_sk
                                 └─ Repartition Exchange Est. ? rows
                                    │     Partition by: {d_date_sk_6}
                                    └─ Filter Est. ? rows
                                       │     Condition: d_year_6 IN (2000, 2001, 2002, 2003)
                                       └─ TableScan tpcds.date_dim Est. ? rows
                                                Condition : d_year IN (2000, 2001, 2002, 2003).
                                                Outputs: d_date_sk_6:=d_date_sk, d_year_6:=d_year
CTEDef [0]
   Projection Est. ? rows
   │     Expressions: [i_item_sk_3]
   └─ Filter Est. ? rows
      │     Condition: `expr#count()_3` > 4
      └─ Aggregating Est. ? rows
         │     Group by: {d_date_3, expr#substring(i_item_desc, 1, 30)_3, i_item_sk_3}
         │     Aggregates: expr#count()_3:=AggNull(count)()
         └─ Projection Est. ? rows
            │     Expressions: [d_date_3, i_item_sk_3], expr#substring(i_item_desc, 1, 30)_3:=substring(i_item_desc_1, 1, 30)
            └─ Inner Join Est. ? rows
               │     Condition: ss_item_sk_1 == i_item_sk_3
               ├─ Repartition Exchange Est. ? rows
               │  │     Partition by: {ss_item_sk_1}
               │  └─ Inner Join Est. ? rows
               │     │     Condition: ss_sold_date_sk_2 == d_date_sk_5
               │     ├─ Repartition Exchange Est. ? rows
               │     │  │     Partition by: {ss_sold_date_sk_2}
               │     │  └─ Filter Est. ? rows
               │     │     │     Condition: isNotNull(ss_item_sk_1)
               │     │     └─ TableScan tpcds.store_sales Est. ? rows
               │     │              Condition : isNotNull(ss_item_sk).
               │     │              Outputs: ss_item_sk_1:=ss_item_sk, ss_sold_date_sk_2:=ss_sold_date_sk
               │     └─ Repartition Exchange Est. ? rows
               │        │     Partition by: {d_date_sk_5}
               │        └─ Filter Est. ? rows
               │           │     Condition: d_year_5 IN (2000, 2001, 2002, 2003)
               │           └─ TableScan tpcds.date_dim Est. ? rows
               │                    Condition : d_year IN (2000, 2001, 2002, 2003).
               │                    Outputs: d_date_3:=d_date, d_date_sk_5:=d_date_sk, d_year_5:=d_year
               └─ Repartition Exchange Est. ? rows
                  │     Partition by: {i_item_sk_3}
                  └─ Filter Est. ? rows
                     │     Condition: isNotNull(i_item_sk_3)
                     └─ TableScan tpcds.item Est. ? rows
                              Condition : isNotNull(i_item_sk).
                              Outputs: i_item_desc_1:=i_item_desc, i_item_sk_3:=i_item_sk
note: CTE(Common Table Expression) is applied for 4 times.
