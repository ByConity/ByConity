name: CI
trigger:
  change:
  manual:
    branches: ["ce-dev"]
    types: ["create", "push", "submit"]
jobs:
  scm_build:
    name: SCM Build for clang11 ch_vanilla_debian_ci
    image: hub.byted.org/data-ci-debian:latest
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - uses: actions/scm
        id: scm_build
        inputs:
          scm_repo: dp/clickhouse/ch_vanilla_clang_ci
          version_type: test
          sync_bvc: false
          sync_aws: false
          sync_oss: false
          envs: {CUSTOM_CMAKE_BUILD_TYPE: "RelWithDebInfo"}

  FuntionalStatelessTest:
    name: FuntionalStatelessTest
    image: hub.byted.org/bytehouse/clickhouse-stateless-test:gdb11.2
    depends: [scm_build]
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run FuntionalStatelessTest
        commands:
          - cd /
          - cp -r /home/code/docker/test/stateless/. .
          - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
          - /bin/bash run.sh
      - name: Upload Artifact
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Analyse Result
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  FuntionalStatefulTest:
    name: FuntionalStatefulTest
    image: hub.byted.org/bytehouse/clickhouse-stateful-test:gdb11.2
    depends: [scm_build]
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run FuntionalStatefulTest
        commands:
          - cd /
          - cp -r /home/code/docker/test/stateful/. .
          - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
          - /bin/bash run.sh
      - name: Upload Artifact
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Analyse Result
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  CertificateStatefullTest:
    name: CertificateStatefullTest
    image: hub.byted.org/bytehouse/clickhouse-certificate-stateful-test:gdb11.2
    depends: [scm_build]
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run CertificateStatefullTest
        commands:
          - cd /
          - cp /home/code/docker/test/certificate/run.sh run.sh
          - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
          - /bin/bash run.sh
      - name: Upload Artifact
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Analyse Result
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  StressTest:
    name: StressTest
    image: hub.byted.org/bytehouse/clickhouse-stress-test:gdb11.2
    depends: [scm_build]
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run FuntionalStressTest
        commands:
          - cd /
          - cp /home/code/docker/test/stress/run.sh run.sh
          - cp /home/code/docker/test/stress/stress stress
          - /bin/bash run.sh
      - name: Upload Artifact
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Analyse Result
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  scm_build_ASAN: #Build will be skipped by default
    name: SCM Build_ASAN for clang11 ch_vanilla_debian_ci
    image: hub.byted.org/data-ci-debian:latest
    if: ${{ false }}
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - uses: actions/scm
        id: scm_build
        inputs:
          scm_repo: dp/clickhouse/ch_vanilla_clang_ci
          version_type: test
          sync_bvc: false
          sync_aws: false
          sync_oss: false
          envs:
            CUSTOM_SANITIZE: "address"

  FuntionalStatelessTest-ASAN: #Test will be skipped by default if SCM ASAN build is skipped
    name: FuntionalStatelessTest-ASAN
    image: hub.byted.org/bytehouse/clickhouse-stateless-test:gdb11.2
    depends: [scm_build_ASAN]
    if: ${{ Jobs.scm_build_ASAN.Conclusion == "success" }}
    envs:
      ASAN_OPTIONS: "halt_on_error=false,log_path=/var/log/clickhouse-server/asan.log"
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build_ASAN"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run FuntionalStatelessTest
        commands:
          - cd /
          - cp /home/code/docker/test/stateless/run.sh run.sh
          - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
          - /bin/bash run.sh
      - name: Upload Artifact
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Upload sanitizer log
        uses: actions/upload-artifact
        inputs:
          name: sanitizer_log_output
          path: /sanitizer_log_output
      - name: Analyse Result
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  IntegrationTestsRelease0:
    name: IntegrationTestRelease0
    image: minikube:1.22.0
    timeout: 360
    runs-on:
      linux: {}
    depends: [scm_build]
    if: ${{ false }}
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run IntegrationTest-CI-Runner
        continue-on-error: true
        commands:
          - minikube start
          - export RUN_BY_HASH_NUM=0
          - export RUN_BY_HASH_TOTAL=2
          - /bin/bash /home/code/tests/integration/run.sh
      - name: Upload Artifact
        continue-on-error: true
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Analyse Result
        continue-on-error: true
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  IntegrationTestsRelease1:
    name: IntegrationTestRelease1
    image: minikube:1.22.0
    timeout: 360
    runs-on:
      linux: {}
    depends: [scm_build]
    if: ${{ false }}
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run IntegrationTest-CI-Runner
        continue-on-error: true
        commands:
          - minikube start
          - export RUN_BY_HASH_NUM=1
          - export RUN_BY_HASH_TOTAL=2
          - /bin/bash /home/code/tests/integration/run.sh
      - name: Upload Artifact
        continue-on-error: true
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Analyse Result
        continue-on-error: true
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  FuntionalStatefulTest-ASAN: #Test will be skipped by default if SCM ASAN build is skipped
    name: FuntionalStatefulTest-ASAN
    image: hub.byted.org/bytehouse/clickhouse-stateful-test:gdb11.2
    depends: [scm_build_ASAN]
    if: ${{ Jobs.scm_build_ASAN.Conclusion == "success" }}
    envs:
      ASAN_OPTIONS: "halt_on_error=false,log_path=/var/log/clickhouse-server/asan.log"
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: Download From SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build_ASAN"].Steps["scm_build"].Outputs["version"] }}
          - CLICKHOUSE_PREFIX="clickhouse"
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
      - name: Run FuntionalStatefulTest
        commands:
          - cd /
          - cp /home/code/docker/test/stateful/run.sh run.sh
          - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
          - /bin/bash run.sh
      - name: Upload Artifact
        uses: actions/upload-artifact
        inputs:
          name: test_output
          path: /test_output
      - name: Upload sanitizer log
        uses: actions/upload-artifact
        inputs:
          name: sanitizer_log_output
          path: /sanitizer_log_output
      - name: Analyse Result
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  FuntionalStatelessTest-ASAN-LocateASANError:
      name: FuntionalStatelessTest-ASAN-LocateASANError
      image: hub.byted.org/bytehouse/clickhouse-stateless-test:gdb11.2
      timeout: 360
      depends: [scm_build_ASAN]
      if: ${{ Jobs.scm_build_ASAN.Conclusion = "success" }}
      envs:
        ASAN_OPTIONS: "halt_on_error=false,log_path=/var/log/clickhouse-server/asan.log"
      steps:
        - uses: actions/checkout
          inputs:
            depth: 1
        - name: Download From SCM
          commands:
            - echo $(pwd)
            - cd /
            - CLICKHOUSE_VERSION=${{ Jobs["scm_build_ASAN"].Steps["scm_build"].Outputs["version"] }}
            - CLICKHOUSE_PREFIX="clickhouse"
            - mkdir -p $CLICKHOUSE_PREFIX
            - echo 'ok'
            - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
            - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
            - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
        - name: Run  FuntionalStatelessTest-ASAN-LocateASANError
          commands:
            - cd /
            - cp /home/code/docker/test/stateless_locate_asan_error/run.sh run.sh
            - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
            - /bin/bash run.sh
        - name: Upload Artifact
          uses: actions/upload-artifact
          inputs:
            name: test_output
            path: /test_output
        - name: Upload sanitizer log
          uses: actions/upload-artifact
          inputs:
            name: sanitizer_log_output
            path: /sanitizer_log_output
        - name: Analyse Result
          commands:
            - /bin/bash /home/code/docker/test/result.sh
