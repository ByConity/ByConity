"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[4033],{9613:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>d});var a=n(9496);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},o=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),m=s(n),c=l,d=m["".concat(p,".").concat(c)]||m[c]||k[c]||i;return n?a.createElement(d,r(r({ref:t},o),{},{components:n})):a.createElement(d,r({ref:t},o))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=c;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u[m]="string"==typeof e?e:l,r[1]=u;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4109:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>k,frontMatter:()=>i,metadata:()=>u,toc:()=>s});var a=n(4778),l=(n(9496),n(9613));const i={title:"Aggregation",slug:"aggregate",hidden:!1,metadata:{title:"Aggregation Functions in ByConity",description:"Find out various aggregation functions supported in ByConity such as anyHeavy, anyLast, argMax, argMin, avg, corr, covarPop, covarSamp, groupBitAnd, etc."},createdAt:"2021-07-29T11:49:53.230Z",updatedAt:"2021-09-23T03:25:11.849Z",tags:["Docs"]},r=void 0,u={unversionedId:"SQL\u8bed\u6cd5\u8bf4\u660e/functions/aggregate",id:"SQL\u8bed\u6cd5\u8bf4\u660e/functions/aggregate",title:"Aggregation",description:"Notice:",source:"@site/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/functions/aggregate.mdx",sourceDirName:"SQL\u8bed\u6cd5\u8bf4\u660e/functions",slug:"/SQL\u8bed\u6cd5\u8bf4\u660e/functions/aggregate",permalink:"/zh-cn/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/aggregate",draft:!1,editUrl:"https://github.com/ByConity/ByConity/tree/main/website/../docs/en/SQL\u8bed\u6cd5\u8bf4\u660e/functions/aggregate.mdx",tags:[{label:"Docs",permalink:"/zh-cn/docs/tags/docs"}],version:"current",frontMatter:{title:"Aggregation",slug:"aggregate",hidden:!1,metadata:{title:"Aggregation Functions in ByConity",description:"Find out various aggregation functions supported in ByConity such as anyHeavy, anyLast, argMax, argMin, avg, corr, covarPop, covarSamp, groupBitAnd, etc."},createdAt:"2021-07-29T11:49:53.230Z",updatedAt:"2021-09-23T03:25:11.849Z",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/zh-cn/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/functions"},next:{title:"Arithmetic",permalink:"/zh-cn/docs/SQL\u8bed\u6cd5\u8bf4\u660e/functions/arithmetic"}},p={},s=[{value:"any",id:"any",level:2},{value:"anyHeavy",id:"anyheavy",level:2},{value:"anyLast",id:"anylast",level:2},{value:"argMax",id:"argmax",level:2},{value:"argMin",id:"argmin",level:2},{value:"avg",id:"avg",level:2},{value:"corr",id:"corr",level:2},{value:"covarPop",id:"covarpop",level:2},{value:"covarSamp",id:"covarsamp",level:2},{value:"groupArray",id:"grouparray",level:2},{value:"groupBitAnd",id:"groupbitand",level:2},{value:"groupBitOr",id:"groupbitor",level:2},{value:"groupBitXor",id:"groupbitxor",level:2},{value:"groupBitmap",id:"groupbitmap",level:2},{value:"groupBitmapAnd",id:"groupbitmapand",level:2},{value:"groupBitmapOr",id:"groupbitmapor",level:2},{value:"groupBitmapXor",id:"groupbitmapxor",level:2},{value:"groupUniqArray",id:"groupuniqarray",level:2},{value:"histogram",id:"histogram",level:2},{value:"max",id:"max",level:2},{value:"median",id:"median",level:2},{value:"medianDeterministic",id:"mediandeterministic",level:2},{value:"medianExact",id:"medianexact",level:2},{value:"medianExactWeighted",id:"medianexactweighted",level:2},{value:"medianTDigest",id:"mediantdigest",level:2},{value:"medianTDigestWeighted",id:"mediantdigestweighted",level:2},{value:"medianTiming",id:"mediantiming",level:2},{value:"medianTimingWeighted",id:"mediantimingweighted",level:2},{value:"quantile",id:"quantile",level:2},{value:"quantileDeterministic",id:"quantiledeterministic",level:2},{value:"quantileExact",id:"quantileexact",level:2},{value:"quantileExactWeighted",id:"quantileexactweighted",level:2},{value:"quantileTDigest",id:"quantiletdigest",level:2},{value:"quantileTDigestWeighted",id:"quantiletdigestweighted",level:2},{value:"quantileTiming",id:"quantiletiming",level:2},{value:"quantileTimingWeighted",id:"quantiletimingweighted",level:2},{value:"quantiles",id:"quantiles",level:2},{value:"quantilesTimingWeighted",id:"quantilestimingweighted",level:2},{value:"sequenceCount",id:"sequencecount",level:2},{value:"sequenceMatch",id:"sequencematch",level:2},{value:"stddevPop",id:"stddevpop",level:2},{value:"stddevSamp",id:"stddevsamp",level:2},{value:"STDDEV_POP",id:"stddev_pop",level:2},{value:"STDDEV_SAMP",id:"stddev_samp",level:2},{value:"sum",id:"sum",level:2},{value:"sumKahan",id:"sumkahan",level:2},{value:"sumMap",id:"summap",level:2},{value:"sumMapFiltered",id:"summapfiltered",level:2},{value:"sumWithOverflow",id:"sumwithoverflow",level:2},{value:"topK",id:"topk",level:2},{value:"topKWeighted",id:"topkweighted",level:2},{value:"uniq",id:"uniq",level:2},{value:"uniqCombined",id:"uniqcombined",level:2},{value:"uniqExact",id:"uniqexact",level:2},{value:"uniqHLL12",id:"uniqhll12",level:2},{value:"uniqUpTo",id:"uniqupto",level:2},{value:"varPop",id:"varpop",level:2},{value:"varSamp",id:"varsamp",level:2},{value:"VAR_POP",id:"var_pop",level:2},{value:"VAR_SAMP",id:"var_samp",level:2}],o={toc:s},m="wrapper";function k(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Notice:\nSome of the examples below are referenced from ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/"},"ClickHouse Documentation")," but have been adapted and modified to work in ByConity.")),(0,l.kt)("h2",{id:"any"},"any"),(0,l.kt)("p",null,"Selects the first encountered value.\nThe query can be executed in any order and even in a different order each time, so the result of this function is indeterminate.\nTo get a determinate result, you can use the \u2018min\u2019 or \u2018max\u2019 function instead of \u2018any\u2019."),(0,l.kt)("p",null,"In some cases, you can rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY."),(0,l.kt)("p",null,"When a ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," query has the ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," clause or at least one aggregate function, ByConity (in contrast to MySQL) requires that all expressions in the ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"HAVING")," , and ",(0,l.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clauses be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions. To get behavior like in MySQL, you can put the other columns in the ",(0,l.kt)("inlineCode",{parentName:"p"},"any")," aggregate function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"any(column)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column")," \u2013 The column name. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first value encontered. Type is same as input column.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT any(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500any(number)\u2500\u2510\n\u2502 0           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"anyheavy"},"anyHeavy"),(0,l.kt)("p",null,"Selects a frequently occurring value using the ",(0,l.kt)("a",{parentName:"p",href:"http://www.cs.umd.edu/~samir/498/karp.pdf"},"heavy hitters")," algorithm. If there is a value that occurs more than in half the cases in each of the query\u2019s execution threads, this value is returned. Normally, the result is nondeterministic."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"anyHeavy(column)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column")," \u2013 The column name. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"most frequent value. Type is same as input column.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionAnyHeavy(id Int) ENGINE=CnchMergeTree() ORDER BY id;\nINSERT INTO test.functionAnyHeavy values (1),(1),(1),(2),(3);\nSELECT anyHeavy(id) FROM test.functionAnyHeavy;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500anyHeavy(id)\u2500\u2510\n\u2502 1            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"anylast"},"anyLast"),(0,l.kt)("p",null,"Selects the last value encountered.\nThe result is just as indeterminate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"anyLast(column)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column")," \u2013 The column name. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"last value encountered. Type is same as input column.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT anyLast(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500anyLast(number)\u2500\u2510\n\u2502 9               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"argmax"},"argMax"),(0,l.kt)("p",null,"Calculates the ",(0,l.kt)("inlineCode",{parentName:"p"},"arg")," value for a maximum ",(0,l.kt)("inlineCode",{parentName:"p"},"val")," value. If there are several different values of ",(0,l.kt)("inlineCode",{parentName:"p"},"arg")," for maximum values of ",(0,l.kt)("inlineCode",{parentName:"p"},"val")," , returns the first of these values encountered."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"argMax(arg, val)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arg")," \u2014 Argument. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," \u2014 Value. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"arg value that corresponds to maximum val value. Type is same as arg type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionArgMax (user String, salary Int) Engine=CnchMergeTree() ORDER BY user;\nINSERT INTO test.functionArgMax VALUES ('director',5000),('manager',3000),('worker',1000);\nSELECT argMax(user, salary) FROM test.functionArgMax;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500argMax(user, salary)\u2500\u2510\n\u2502 director             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"argmin"},"argMin"),(0,l.kt)("p",null,"Calculates the ",(0,l.kt)("inlineCode",{parentName:"p"},"arg")," value for a minimum ",(0,l.kt)("inlineCode",{parentName:"p"},"val")," value. If there are several different values of ",(0,l.kt)("inlineCode",{parentName:"p"},"arg")," for minimum values of ",(0,l.kt)("inlineCode",{parentName:"p"},"val")," , returns the first of these values encountered."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"argMin(arg, val)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arg")," \u2014 Argument. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," \u2014 Value. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"arg value that corresponds to minimum val value. Type is same as arg type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionArgMin (user String, salary Int) Engine=CnchMergeTree() ORDER BY user;\nINSERT INTO test.functionArgMin VALUES ('director',5000),('manager',3000),('worker',1000);\nSELECT argMin(user, salary) FROM test.functionArgMin;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500argMin(user, salary)\u2500\u2510\n\u2502 worker               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"avg"},"avg"),(0,l.kt)("p",null,"Calculates the arithmetic mean."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"avg(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 input values, must be Integer, Float or Decimal. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The arithmetic mean, always as Float64. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," if the input parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," is empty. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionAvg (x Int8) ENGINE=CnchMergeTree() ORDER BY x;\nINSERT INTO test.functionAvg SELECT * FROM numbers(6);\nSELECT avg(x) FROM test.functionAvg;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500avg(x)\u2500\u2500\u2510\n\u2502 2.5e+00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionAvg (x Int8) ENGINE=CnchMergeTree() ORDER BY x;\nSELECT avg(x) FROM test.functionAvg;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500avg(x)\u2500\u2510\n\u2502 NaN    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"corr"},"corr"),(0,l.kt)("p",null,"Calculates the Pearson correlation coefficient: ",(0,l.kt)("inlineCode",{parentName:"p"},"\u03a3((x - x\u0305)(y - y\u0305)) / sqrt(\u03a3((x - x\u0305)^2) * \u03a3((y - y\u0305)^2))"),".\nThis function uses a numerically unstable algorithm. If you need ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_stability"},"numerical stability")," in calculations, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"corrStable")," function. It works slower but provides a lower computational error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"corr(x, y)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 input values, must be Integer, Float. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," \u2014 input values, must be Integer, Float.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Pearson correlation coefficient, always as Float64. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionCorr (x Int8, y Int8) ENGINE=CnchMergeTree() ORDER BY x;\nINSERT INTO test.functionCorr VALUES (1,5),(2,4),(3,3),(4,2),(5,1);\nSELECT corr(x,y) FROM test.functionCorr;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500corr(x, y)\u2500\u2510\n\u2502 -1e+00     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"covarpop"},"covarPop"),(0,l.kt)("p",null,"Calculates the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"\u03a3((x - x\u0305)(y - y\u0305)) / n"),".\nThis function uses a numerically unstable algorithm. If you need ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_stability"},"numerical stability")," in calculations, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"covarPopStable")," function. It works slower but provides a lower computational error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"covarPop(x, y)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 input values, must be Integer, Float. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," \u2014 input values, must be Integer, Float.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"\u03a3((x - x\u0305)(y - y\u0305)) / n"),", always as Float64.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionCovarPop (x Int8, y Int8) ENGINE=CnchMergeTree() ORDER BY x;\nINSERT INTO test.functionCovarPop VALUES (1,5),(2,4),(3,3),(4,2),(5,1);\nSELECT covarPop(x,y) FROM test.functionCovarPop;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500covarPop(x, y)\u2500\u2510\n\u2502 -2e+00         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"covarsamp"},"covarSamp"),(0,l.kt)("p",null,"Calculates the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"\u03a3((x - x\u0305)(y - y\u0305)) / (n - 1)"),".\nThis function uses a numerically unstable algorithm. If you need ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_stability"},"numerical stability")," in calculations, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"covarSampStable")," function. It works slower but provides a lower computational error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"covarSamp(x, y)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 input values, must be Integer, Float. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," \u2014 input values, must be Integer, Float.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"\u03a3((x - x\u0305)(y - y\u0305)) / (n - 1)"),", always as Float64."),(0,l.kt)("li",{parentName:"ul"},"When n <= 1, returns NaN.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionCovarSamp (x Int8, y Int8) ENGINE=CnchMergeTree() ORDER BY x;\nINSERT INTO test.functionCovarSamp VALUES (1,5),(2,4),(3,3),(4,2),(5,1);\nSELECT covarSamp(x,y) FROM test.functionCovarSamp;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500covarSamp(x, y)\u2500\u2510\n\u2502 -2.5e+00        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionCovarSamp (x Int8, y Int8) ENGINE=CnchMergeTree() ORDER BY x;\nINSERT INTO test.functionCovarSamp VALUES (1,5);\nSELECT covarSamp(x,y) FROM test.functionCovarSamp;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500covarSamp(x, y)\u2500\u2510\n\u2502 NaN             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"grouparray"},"groupArray"),(0,l.kt)("p",null,"Creates an array of argument values.\nValues can be added to the array in any (indeterminate) order."),(0,l.kt)("p",null,"The second version (with the ",(0,l.kt)("inlineCode",{parentName:"p"},"max_size")," parameter) limits the size of the resulting array to ",(0,l.kt)("inlineCode",{parentName:"p"},"max_size")," elements. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"groupArray(1)(x)")," is equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"[any (x)]")," ."),(0,l.kt)("p",null,"In some cases, you can still rely on the order of execution. This applies to cases when ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," comes from a subquery that uses ",(0,l.kt)("inlineCode",{parentName:"p"},"ORDER BY")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupArray(x)\ngroupArray(max_size)(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"array of values. Type is Array.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select groupArray(number) from numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupArray(number)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select groupArray(5)(number) from numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupArray(5)(number)\u2500\u2510\n\u2502 [0, 1, 2, 3, 4]       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"groupbitand"},"groupBitAnd"),(0,l.kt)("p",null,"Applies bitwise ",(0,l.kt)("inlineCode",{parentName:"p"},"AND")," for series of numbers."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupBitAnd(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2013 An expression that results in ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt*")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt*")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.groupBitAnd (num UInt8) ENGINE=CnchMergeTree() ORDER BY num;\nINSERT INTO test.groupBitAnd VALUES (44),(28),(13),(85);\nSELECT groupBitAnd(num) FROM test.groupBitAnd;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupBitAnd(num)\u2500\u2510\n\u2502 4                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Bit representation of 44,28,13 and 85 are 00101100,00011100,00001101 and 01010101. The bit and of the four numbers is 00000100 which is equal to 4."),(0,l.kt)("h2",{id:"groupbitor"},"groupBitOr"),(0,l.kt)("p",null,"Applies bitwise ",(0,l.kt)("inlineCode",{parentName:"p"},"OR")," for series of numbers."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupBitOr(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2013 An expression that results in ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt*")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt*")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionGroupBitOr (num UInt8) ENGINE=CnchMergeTree ORDER BY num;\nINSERT INTO test.functionGroupBitOr VALUES (44),(28),(13),(85);\nSELECT groupBitOr(num) FROM test.functionGroupBitOr;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupBitOr(num)\u2500\u2510\n\u2502 125             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Bit representation of 44,28,13 and 85 are 00101100,00011100,00001101 and 01010101. The bit or of the four numbers is 01111101 which is equal to 125."),(0,l.kt)("h2",{id:"groupbitxor"},"groupBitXor"),(0,l.kt)("p",null,"Applies bitwise ",(0,l.kt)("inlineCode",{parentName:"p"},"XOR")," for series of numbers."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupBitXor(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2013 An expression that results in ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt*")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt*")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionGroupBitXor (num UInt8) ENGINE=CnchMergeTree ORDER BY num;\nINSERT INTO test.functionGroupBitXor VALUES (44),(28),(13),(85);\nSELECT groupBitXor(num) FROM test.functionGroupBitXor;\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupBitXor(num)\u2500\u2510\n\u2502 104              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Bit representation of 44,28,13 and 85 are 00101100,00011100,00001101 and 01010101. The bit xor of the four numbers is 01101000 which is equal to 104."),(0,l.kt)("h2",{id:"groupbitmap"},"groupBitmap"),(0,l.kt)("p",null,"Bitmap or Aggregate calculations from a unsigned integer column, return cardinality of type UInt64, if add suffix -State, then return bitmap object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupBitmap(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2013 An expression that results in ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt*")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt64")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT groupBitmapState(number) FROM numbers(4);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupBitmap(number)\u2500\u2510\n\u2502 4                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"groupbitmapand"},"groupBitmapAnd"),(0,l.kt)("p",null,"Calculations the AND of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return bitmap object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupBitmapAnd(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2013 An expression that results in ",(0,l.kt)("inlineCode",{parentName:"li"},"AggregateFunction(groupBitmap, UInt*)")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt64")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DROP TABLE IF EXISTS bitmap_column_expr_test2;\n\nCREATE TABLE bitmap_column_expr_test2(tag_id String,z AggregateFunction(groupBitmap, UInt32)) ENGINE = CnchMergeTree ORDER BY tag_id;\n\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag1', bitmapBuild(cast([1,2,3,4,5,6,7,8,9,10] as Array(UInt32))));\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag2', bitmapBuild(cast([6,7,8,9,10,11,12,13,14,15] as Array(UInt32))));\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag3', bitmapBuild(cast([2,4,6,8,10,12] as Array(UInt32))));\n\nSELECT groupBitmapAnd(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n\u250c\u2500groupBitmapAnd(z)\u2500\u2510\n\u2502               3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSELECT arraySort(bitmapToArray(groupBitmapAndState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n\u250c\u2500arraySort(bitmapToArray(groupBitmapAndState(z)))\u2500\u2510\n\u2502 [6,8,10]                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,l.kt)("h2",{id:"groupbitmapor"},"groupBitmapOr"),(0,l.kt)("p",null,"Calculations the OR of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return bitmap object. This is equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBitmapMerge")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupBitmapOr(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2013 An expression that results in ",(0,l.kt)("inlineCode",{parentName:"li"},"AggregateFunction(groupBitmap, UInt*)")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt64")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"\nDROP TABLE IF EXISTS bitmap_column_expr_test2;\nCREATE TABLE bitmap_column_expr_test2(tag_id String,z AggregateFunction(groupBitmap, UInt32)) ENGINE = CnchMergeTree ORDER BY tag_id;\n\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag1', bitmapBuild(cast([1,2,3,4,5,6,7,8,9,10] as Array(UInt32))));\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag2', bitmapBuild(cast([6,7,8,9,10,11,12,13,14,15] as Array(UInt32))));\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag3', bitmapBuild(cast([2,4,6,8,10,12] as Array(UInt32))));\n\nSELECT groupBitmapOr(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n\n\u250c\u2500groupBitmapOr(z)\u2500\u2510\n\u2502             15   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSELECT arraySort(bitmapToArray(groupBitmapOrState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n\u250c\u2500arraySort(bitmapToArray(groupBitmapOrState(z)))\u2500\u2510\n\u2502 [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"groupbitmapxor"},"groupBitmapXor"),(0,l.kt)("p",null,"Calculations the XOR of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return bitmap object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupBitmapOr(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2013 An expression that results in ",(0,l.kt)("inlineCode",{parentName:"li"},"AggregateFunction(groupBitmap, UInt*)")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt64")," type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"\nDROP TABLE IF EXISTS bitmap_column_expr_test2;\nCREATE TABLE bitmap_column_expr_test2(tag_id String, z AggregateFunction(groupBitmap, UInt32)) ENGINE = CnchMergeTree ORDER BY tag_id;\n\n\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag1', bitmapBuild(cast([1,2,3,4,5,6,7,8,9,10] as Array(UInt32))));\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag2', bitmapBuild(cast([6,7,8,9,10,11,12,13,14,15] as Array(UInt32))));\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag3', bitmapBuild(cast([2,4,6,8,10,12] as Array(UInt32))));\n\nSELECT groupBitmapXor(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n\u250c\u2500groupBitmapXor(z)\u2500\u2510\n\u2502              10   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSELECT arraySort(bitmapToArray(groupBitmapXorState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n\n\u250c\u2500arraySort(bitmapToArray(groupBitmapXorState(z)))\u2500\u2510\n\u2502 [1,3,5,6,8,10,11,13,14,15]                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,l.kt)("h2",{id:"groupuniqarray"},"groupUniqArray"),(0,l.kt)("p",null,"Creates an array from different argument values. Memory consumption is the same as for the uniqExact function."),(0,l.kt)("p",null,"The second version (with the ",(0,l.kt)("inlineCode",{parentName:"p"},"max_size")," parameter) limits the size of the resulting array to ",(0,l.kt)("inlineCode",{parentName:"p"},"max_size")," elements."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"groupUniqArray(x)\ngroupUniqArray(max_size)(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"array of values. Type is Array.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select groupUniqArray(number) from numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupUniqArray(number)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [0, 8, 3, 9, 7, 2, 1, 6, 4, 5] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select groupUniqArray(5)(number) from numbers(10); \n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500groupArray(5)(number)\u2500\u2510\n\u2502 [0, 1, 2, 3, 4]       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"histogram"},"histogram"),(0,l.kt)("p",null,"Calculates an adaptive histogram. It does not guarantee precise results."),(0,l.kt)("p",null,"The functions uses ",(0,l.kt)("a",{parentName:"p",href:"http://jmlr.org/papers/volume11/ben-haim10a/ben-haim10a.pdf"},"A Streaming Parallel Decision Tree Algorithm")," . The borders of histogram bins are adjusted as new data enters a function. In common case, the widths of bins are not equal."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"histogram(number_of_bins)(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number_of_bins")," \u2014 Upper limit for the number of bins in the histogram. The function automatically calculates the number of bins. It tries to reach the specified number of bins, but if it fails, it uses fewer bins."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," \u2014 Expression resulting in input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Array of Tuples of the following format:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[(lower_1, upper_1, height_1), ... (lower_N, upper_N, height_N)]\n\n- `lower` \u2014 Lower bound of the bin.\n- `upper` \u2014 Upper bound of the bin.\n- `height` \u2014 Calculated height of the bin.\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT histogram(5)(number + 1) FROM numbers(20);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500histogram(5)(plus(number, 1))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [(1,4.5,4),(4.5,8.5,4),(8.5,12.75,4.125),(12.75,17,4.625),(17,20,3.25)] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"You can visualize a histogram with the bar function, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"\nWITH histogram(5)(rand() % 100) AS hist\nSELECT\n    arrayJoin(hist).3 AS height,\n    bar(height, 0, 6, 5) AS bar\nFROM numbers(20);\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\n\u250c\u2500height\u2500\u252c\u2500bar\u2500\u2500\u2500\u2510\n\n\u2502  2.125 \u2502 \u2588\u258b    \u2502\n\n\u2502   3.25 \u2502 \u2588\u2588\u258c   \u2502\n\n\u2502  5.625 \u2502 \u2588\u2588\u2588\u2588\u258f \u2502\n\n\u2502  5.625 \u2502 \u2588\u2588\u2588\u2588\u258f \u2502\n\n\u2502  3.375 \u2502 \u2588\u2588\u258c   \u2502\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,l.kt)("p",null,"In this case, you should remember that you do not know the histogram bin borders."),(0,l.kt)("h2",{id:"max"},"max"),(0,l.kt)("p",null,"Aggregate function that calculates the maximum across a group of values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"max(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"maximum value. Type is same as values")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT max(number) FROM numbers(20);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500max(number)\u2500\u2510\n\u2502 19          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"If you need non-aggregate function to choose a maximum of two values, see ",(0,l.kt)("inlineCode",{parentName:"p"},"greatest")," :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT greatest(a, b) FROM table;\n")),(0,l.kt)("h2",{id:"median"},"median"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"median*")," functions are the aliases for the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions. They calculate median of a numeric data sample."),(0,l.kt)("p",null,"Functions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"median")," \u2014 Alias for quantile. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianDeterministic")," \u2014 Alias for quantileDeterministic. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianExact")," \u2014 Alias for quantileExact. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianExactWeighted")," \u2014 Alias for quantileExactWeighted. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianTiming")," \u2014 Alias for quantileTiming."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianTimingWeighted")," \u2014 Alias for quantileTimingWeighted. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianTDigest")," \u2014 Alias for quantileTDigest. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianTDigestWeighted")," \u2014 Alias for quantileTDigestWeighted. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"medianBFloat16")," \u2014 Alias for quantileBFloat16.")),(0,l.kt)("h2",{id:"mediandeterministic"},"medianDeterministic"),(0,l.kt)("p",null,"Alias for quantileDeterministic."),(0,l.kt)("h2",{id:"medianexact"},"medianExact"),(0,l.kt)("p",null,"Alias for quantileExact."),(0,l.kt)("h2",{id:"medianexactweighted"},"medianExactWeighted"),(0,l.kt)("p",null,"Alias for quantileExactWeighted."),(0,l.kt)("h2",{id:"mediantdigest"},"medianTDigest"),(0,l.kt)("p",null,"Alias for quantileTDigest."),(0,l.kt)("h2",{id:"mediantdigestweighted"},"medianTDigestWeighted"),(0,l.kt)("p",null,"Alias for quantileTDigestWeighted."),(0,l.kt)("h2",{id:"mediantiming"},"medianTiming"),(0,l.kt)("p",null,"Alias for quantileTiming."),(0,l.kt)("h2",{id:"mediantimingweighted"},"medianTimingWeighted"),(0,l.kt)("p",null,"Alias for quantileTimingWeighted."),(0,l.kt)("h2",{id:"quantile"},"quantile"),(0,l.kt)("p",null,"Computes an approximate ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence."),(0,l.kt)("p",null,"This function applies ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Reservoir_sampling"},"reservoir sampling")," with a reservoir size up to 8192 and a random number generator for sampling. The result is non-deterministic. To get an exact quantile, use the quantileExact function."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantile(level)(expr)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"median")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over the column values resulting in numeric, Date, or DateTime.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Approximate quantile of the specified level.\nType:"),(0,l.kt)("li",{parentName:"ul"},"Float64 for numeric data type input. "),(0,l.kt)("li",{parentName:"ul"},"Date if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," type."),(0,l.kt)("li",{parentName:"ul"},"DateTime if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," type. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT quantile(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantile(number)\u2500\u2510\n\u2502 4.5e+00          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantiledeterministic"},"quantileDeterministic"),(0,l.kt)("p",null,"Computes an approximate ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence."),(0,l.kt)("p",null,"This function applies ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Reservoir_sampling"},"reservoir sampling")," with a reservoir size up to 8192 and deterministic algorithm of sampling. The result is deterministic. To get an exact quantile, use the quantileExact function."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileDeterministic(level)(expr, determinator)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianDeterministic")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over the column values resulting in numeric data types, Date or DateTime. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"determinator")," \u2014 Number whose hash is used instead of a random number generator in the reservoir sampling algorithm to make the result of sampling deterministic. As a determinator you can use any deterministic positive number, for example, a user id or an event id. If the same determinator value occures too often, the function works incorrectly. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Approximate quantile of the specified level.\nType:"),(0,l.kt)("li",{parentName:"ul"},"Float64 for numeric data type input. "),(0,l.kt)("li",{parentName:"ul"},"Date if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," type."),(0,l.kt)("li",{parentName:"ul"},"DateTime if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," type. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT quantileDeterministic(number, 1) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantileDeterministic(number, 1)\u2500\u2510\n\u2502 4.5e+00                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantileexact"},"quantileExact"),(0,l.kt)("p",null,"Exactly computes the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence."),(0,l.kt)("p",null,"To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," memory, where ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is a number of values that were passed. However, for a small number of values, the function is very effective."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileExact(level)(expr)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianExact")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over the column values resulting in numeric data types, Date or DateTime. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Quantile of the specified level.\nType:"),(0,l.kt)("li",{parentName:"ul"},"Float64 for numeric data type input. "),(0,l.kt)("li",{parentName:"ul"},"Date if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," type. "),(0,l.kt)("li",{parentName:"ul"},"DateTime if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," type. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT quantileExact(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantileExact(number)\u2500\u2510\n\u2502                     5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantileexactweighted"},"quantileExactWeighted"),(0,l.kt)("p",null,"Exactly computes the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence, taking into account the weight of each element."),(0,l.kt)("p",null,"To get exact value, all the passed values are combined into an array, which is then partially sorted. Each value is counted with its weight, as if it is present ",(0,l.kt)("inlineCode",{parentName:"p"},"weight")," times. A hash table is used in the algorithm. Because of this, if the passed values are frequently repeated, the function consumes less RAM than quantileExact. You can use this function instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"quantileExact")," and specify the weight 1."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileExactWeighted(level)(expr, weight)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianExactWeighted")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over the column values resulting in numeric, Date or DateTime. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"weight")," \u2014 Column with weights of sequence members. Weight is a number of value occurrences. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Quantile of the specified level.\nType:"),(0,l.kt)("li",{parentName:"ul"},"Float64 for numeric data type input. "),(0,l.kt)("li",{parentName:"ul"},"Date if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," type. "),(0,l.kt)("li",{parentName:"ul"},"DateTime if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," type. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionQuantileExactWeighted (n UInt8, val UInt8) ENGINE=CnchMergeTree ORDER BY n;\nINSERT INTO test.functionQuantileExactWeighted VALUES (0,3),(1,2),(2,1),(5,4);\nSELECT quantileExactWeighted(n, val) FROM test.functionQuantileExactWeighted;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantileExactWeighted(n, val)\u2500\u2510\n\u2502                             1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantiletdigest"},"quantileTDigest"),(0,l.kt)("p",null,"Computes an approximate ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence using the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf"},"t-digest")," algorithm."),(0,l.kt)("p",null,"Memory consumption is ",(0,l.kt)("inlineCode",{parentName:"p"},"log(n)")," , where ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is a number of values. The result depends on the order of running the query, and is nondeterministic."),(0,l.kt)("p",null,"The performance of the function is lower than performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile")," ."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileTDigest(level)(expr)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianTDigest")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over the column values resulting in numeric data types, Date or DateTime. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Approximate quantile of the specified level.\nType:"),(0,l.kt)("li",{parentName:"ul"},"Float64 for numeric data type input. "),(0,l.kt)("li",{parentName:"ul"},"Date if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," type. "),(0,l.kt)("li",{parentName:"ul"},"DateTime if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," type. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT quantileTDigest(number) FROM numbers(10)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantileTDigest(number)\u2500\u2510\n\u2502 4.5e+00                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantiletdigestweighted"},"quantileTDigestWeighted"),(0,l.kt)("p",null,"Computes an approximate ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence using the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf"},"t-digest")," algorithm. The function takes into account the weight of each sequence member. The maximum error is 1%. Memory consumption is ",(0,l.kt)("inlineCode",{parentName:"p"},"log(n)")," , where ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is a number of values."),(0,l.kt)("p",null,"The performance of the function is lower than the performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile"),"."),(0,l.kt)("p",null,"The result depends on the order of running the query and is nondeterministic."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,"[block:callout]",'\n{\n"type": "info",\n"title": "Note",\n"body": "Using ',(0,l.kt)("inlineCode",{parentName:"p"},"quantileTDigestWeighted")," ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tdunning/t-digest/issues/167#issuecomment-828650275"},"is not recommended for tiny data sets")," and can lead to significat error. In this case, consider possibility of using ",(0,l.kt)("inlineCode",{parentName:"p"},"quantileTDigest"),' instead."\n}\n',"[/block]","\n",(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileTDigestWeighted(level)(expr, weight)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianTDigestWeighted")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over the column values resulting in numeric data types, Date or DateTime. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"weight")," \u2014 Column with weights of sequence elements. Weight is a number of value occurrences. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Approximate quantile of the specified level.\nType:"),(0,l.kt)("li",{parentName:"ul"},"Float64 for numeric data type input. "),(0,l.kt)("li",{parentName:"ul"},"Date if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," type. "),(0,l.kt)("li",{parentName:"ul"},"DateTime if input values have the ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," type. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT quantileTDigestWeighted(number, 1) FROM numbers(10)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantileTDigestWeighted(number, 1)\u2500\u2510\n\u2502 4.5e+00                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantiletiming"},"quantileTiming"),(0,l.kt)("p",null,"With the determined precision computes the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence."),(0,l.kt)("p",null,"The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileTiming(level)(expr)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianTiming")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over a column values returning a Float* -type number. ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If negative values are passed to the function, the behavior is undefined. "),(0,l.kt)("li",{parentName:"ul"},"If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000. ")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Accuracy"),"\nThe calculation is accurate if:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Total number of values does not exceed 5670. "),(0,l.kt)("li",{parentName:"ul"},"Total number of values exceeds 5670, but the page loading time is less than 1024ms. ")),(0,l.kt)("p",null,"Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms."),(0,l.kt)("p",null,'!!! note "Note"\nFor calculating page loading time quantiles, this function is more effective and accurate than quantile.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Quantile of the specified level.\nType: ",(0,l.kt)("inlineCode",{parentName:"li"},"Float32")," .")),(0,l.kt)("p",null,'!!! note "Note"\nIf no values are passed to the function (when using ',(0,l.kt)("inlineCode",{parentName:"p"},"quantileTimingIf")," ), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionQuantileTiming (response_time UInt32) ENGINE=CnchMergeTree ORDER BY response_time;\nINSERT INTO test.functionQuantileTiming VALUES (72),(112),(126),(145),(104),(242),(313),(168),(108);\nSELECT quantileTiming(response_time) FROM test.functionQuantileTiming;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantileTiming(response_time)\u2500\u2510\n\u2502 1.26e+02                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantiletimingweighted"},"quantileTimingWeighted"),(0,l.kt)("p",null,"With the determined precision computes the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a numeric data sequence according to the weight of each sequence member."),(0,l.kt)("p",null,"The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times."),(0,l.kt)("p",null,"When using multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"quantile*")," functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileTimingWeighted(level)(expr, weight)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianTimingWeighted")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]")," . Default value: 0.5. At ",(0,l.kt)("inlineCode",{parentName:"li"},"level=0.5")," the function calculates ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Median"},"median")," . "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression over a column values returning a Float* -type number. "),(0,l.kt)("li",{parentName:"ul"},"If negative values are passed to the function, the behavior is undefined."),(0,l.kt)("li",{parentName:"ul"},"If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"weight")," \u2014 Column with weights of sequence elements. Weight is a number of value occurrences. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Accuracy"),"\nThe calculation is accurate if:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Total number of values does not exceed 5670. "),(0,l.kt)("li",{parentName:"ul"},"Total number of values exceeds 5670, but the page loading time is less than 1024ms. ")),(0,l.kt)("p",null,"Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms."),(0,l.kt)("p",null,'!!! note "Note"\nFor calculating page loading time quantiles, this function is more effective and accurate than quantile.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Quantile of the specified level.\nType: ",(0,l.kt)("inlineCode",{parentName:"li"},"Float32")," .")),(0,l.kt)("p",null,'!!! note "Note"\nIf no values are passed to the function (when using ',(0,l.kt)("inlineCode",{parentName:"p"},"quantileTimingIf")," ), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionQuantileTimingWeighted (response_time UInt32, weight UInt32) ENGINE=CnchMergeTree ORDER BY response_time;\nINSERT INTO test.functionQuantileTimingWeighted VALUES (68,1),(104,2),(112,3),(126,2),(138,1),(162,1);\nSELECT quantileTimingWeighted(response_time, weight) FROM test.functionQuantileTimingWeighted;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantileTimingWeighted(response_time, weight)\u2500\u2510\n\u2502 1.12e+02                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"quantiles"},"quantiles"),(0,l.kt)("p",null,"All the quantile functions also have corresponding quantiles functions: ",(0,l.kt)("inlineCode",{parentName:"p"},"quantiles")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"quantilesDeterministic")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"quantilesTiming")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"quantilesTimingWeighted")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"quantilesExact")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"quantilesExactWeighted")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"quantilesTDigest")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"quantilesBFloat16")," . These functions calculate all the quantiles of the listed levels in one pass, and return an array of the resulting values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantiles(level1, level2, \u2026)(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level1,level2...")," \u2014 Levels of quantiles. Each level is a constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]"),". ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A list of quantiles. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT quantiles(0.5,0.4)(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantiles(0.5, 0.4)(number)\u2500\u2510\n\u2502 [4.5e+00, 3.6e+00]          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"quantiles(0.5,0.4)(number) equivalent to quantile(0.5)(number) and quantile(0.4)(number)."),(0,l.kt)("h2",{id:"quantilestimingweighted"},"quantilesTimingWeighted"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("inlineCode",{parentName:"p"},"quantileTimingWeighted")," , but accept multiple parameters with quantile levels and return an Array filled with many values of that quantiles."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileTimingWeighted(level1, level2, \u2026)(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level1,level2...")," \u2014 Levels of quantiles. Each level is a constant floating-point number from 0 to 1. We recommend using a ",(0,l.kt)("inlineCode",{parentName:"li"},"level")," value in the range of ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.01, 0.99]"),". ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A list of quantiles. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionQuantilesTimingWeighted (response_time UInt32, weight UInt32) ENGINE=CnchMergeTree ORDER BY response_time;\nINSERT INTO test.functionQuantilesTimingWeighted VALUES (68,1),(104,2),(112,3),(126,2),(138,1),(162,1);\nSELECT quantilesTimingWeighted(0.5, 0.99)(response_time, weight) FROM test.functionQuantilesTimingWeighted;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500quantilesTimingWeighted(0.5, 0.99)(response_time, weight)\u2500\u2510\n\u2502 [1.12e+02, 1.62e+02]                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"sequencecount"},"sequenceCount"),(0,l.kt)("p",null,"sequenceCount(pattern)(time, cond1, cond2, \u2026)"),(0,l.kt)("p",null,"Counts the number of event chains that matched the pattern. The function searches event chains that do not overlap. It starts to search for the next chain after the current chain is matched."),(0,l.kt)("p",null,'!!! warning "Warning"\nEvents that occur at the same second may lay in the sequence in an undefined order affecting the result.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sequenceCount(pattern)(timestamp, cond1, cond2, ...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 Pattern string. See Pattern syntax. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp")," \u2014 Column considered to contain time data. Typical data types are ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," . You can also use any of the supported UInt data types. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cond1")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"cond2")," \u2014 Conditions that describe the chain of events. Data type: ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt8")," . You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Number of non-overlapping event chains that are matched.\nType: ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt64")," .")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),"\nCount how many times the number 2 occurs after the number 1 with any amount of other numbers between them:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.functionSequenceCount (time DateTime, number UInt8) ENGINE=CnchMergeTree ORDER BY time;\nINSERT INTO test.functionSequenceCount VALUES (1,1),(2,3),(3,2),(4,1),(5,3),(6,2);\nSELECT sequenceCount('(?1).*(?2)')(time, number = 1, number = 2) FROM test.functionSequenceCount;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sequenceCount('(?1).*(?2)')(time, equals(number, 1), equals(number, 2))\u2500\u2510\n\u2502                                                                       2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"sequencematch"},"sequenceMatch"),(0,l.kt)("p",null,"sequenceMatch(pattern)(timestamp, cond1, cond2, \u2026)"),(0,l.kt)("p",null,"Checks whether the sequence contains an event chain that matches the pattern."),(0,l.kt)("p",null,'!!! warning "Warning"\nEvents that occur at the same second may lay in the sequence in an undefined order affecting the result.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sequenceMatch(pattern)(timestamp, cond1, cond2, ...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 Pattern string. See Pattern syntax. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp")," \u2014 Column considered to contain time data. Typical data types are ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," . You can also use any of the supported UInt data types. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cond1")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"cond2")," \u2014 Conditions that describe the chain of events. Data type: ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt8")," . You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"1, if the pattern is matched. "),(0,l.kt)("li",{parentName:"ul"},"0, if the pattern isn\u2019t matched.\nType: ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt8")," .")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Pattern syntax")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"(?N)")," \u2014 Matches the condition argument at position ",(0,l.kt)("inlineCode",{parentName:"li"},"N")," . Conditions are numbered in the ",(0,l.kt)("inlineCode",{parentName:"li"},"[1, 32]")," range. For example, ",(0,l.kt)("inlineCode",{parentName:"li"},"(?1)")," matches the argument passed to the ",(0,l.kt)("inlineCode",{parentName:"li"},"cond1")," parameter. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".*")," \u2014 Matches any number of events. You do not need conditional arguments to match this element of the pattern. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"(?t operator value)")," \u2014 Sets the time in seconds that should separate two events. For example, pattern ",(0,l.kt)("inlineCode",{parentName:"li"},"(?1)(?t>1800)(?2)")," matches events that occur more than 1800 seconds from each other. An arbitrary number of any events can lay between these events. You can use the ",(0,l.kt)("inlineCode",{parentName:"li"},">=")," , ",(0,l.kt)("inlineCode",{parentName:"li"},">")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"<")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"<=")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"==")," operators. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),"\nConsider data in the ",(0,l.kt)("inlineCode",{parentName:"p"},"t")," table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\n\u250c\u2500time\u2500\u252c\u2500number\u2500\u2510\n\n\u2502    1 \u2502      1 \u2502\n\n\u2502    2 \u2502      3 \u2502\n\n\u2502    3 \u2502      2 \u2502\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,l.kt)("p",null,"Perform the query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionSequenceMatch (time DateTime, number UInt8) ENGINE=CnchMergeTree ORDER BY time;\nINSERT INTO test.functionSequenceMatch VALUES (1,1),(2,3),(3,2);\nSELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2) FROM test.functionSequenceMatch;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sequenceMatch('(?1)(?2)')(time, equals(number, 1), equals(number, 2))\u2500\u2510\n\u2502                                                                     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"The function found the event chain where number 2 follows number 1. It skipped number 3 between them, because the number is not described as an event. If we want to take this number into account when searching for the event chain given in the example, we should make a condition for it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 3) FROM test.functionSequenceMatch;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sequenceMatch('(?1)(?2)')(time, equals(number, 1), equals(number, 2), equals(number, 3))\u2500\u2510\n\u2502                                                                                        0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"In this case, the function couldn\u2019t find the event chain matching the pattern, because the event for number 3 occured between 1 and 2. If in the same case we checked the condition for number 4, the sequence would match the pattern."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 4) FROM test.functionSequenceMatch;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sequenceMatch('(?1)(?2)')(time, equals(number, 1), equals(number, 2), equals(number, 4))\u2500\u2510\n\u2502                                                                                        1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"stddevpop"},"stddevPop"),(0,l.kt)("p",null,"The result is equal to the square root of varPop."),(0,l.kt)("p",null,"This function uses a numerically unstable algorithm. If you need ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_stability"},"numerical stability")," in calculations, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"stddevPopStable")," function. It works slower but provides a lower computational error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"stddevPop(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"stddevPop of values. Returns Float64.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT stddevPop(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500stddevPop(number)\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2.8722813232690143e+00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"stddevsamp"},"stddevSamp"),(0,l.kt)("p",null,"The result is equal to the square root of varSamp."),(0,l.kt)("p",null,"This function uses a numerically unstable algorithm. If you need ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_stability"},"numerical stability")," in calculations, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"stddevSampStable")," function. It works slower but provides a lower computational error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"stddevSamp(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"stddevSamp of values. Returns Float64.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT stddevSamp(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500stddevSamp(number)\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3.0276503540974917e+00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"stddev_pop"},"STDDEV_POP"),(0,l.kt)("p",null,"Alias to stddevPop."),(0,l.kt)("h2",{id:"stddev_samp"},"STDDEV_SAMP"),(0,l.kt)("p",null,"Alias to stddevSamp."),(0,l.kt)("h2",{id:"sum"},"sum"),(0,l.kt)("p",null,"Calculates the sum. Only works for numbers."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sum(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"sum of values. Type is same as values")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sum(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sum(number)\u2500\u2510\n\u2502 45          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"sum from 0 to 9."),(0,l.kt)("h2",{id:"sumkahan"},"sumKahan"),(0,l.kt)("p",null,"Calculates the sum of the numbers with ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Kahan_summation_algorithm"},"Kahan compensated summation algorithm"),"\nSlower than sum function."),(0,l.kt)("p",null,"The compensation works only for Float types."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sumKahan(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Input value, must be Integer, Float, or Decimal.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the sum of numbers, with type Integer, Float, or Decimal depends on type of input arguments")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sum(0.1), sumKahan(0.1) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sum(0.1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500sumKahan(0.1)\u2500\u2510\n\u2502 9.999999999999999e-01 \u2502 1e+00         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"summap"},"sumMap"),(0,l.kt)("p",null,"Totals the ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," array according to the keys specified in the ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," array.\nThe number of elements in ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," must be the same for each row that is totaled."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sumMap(key, value)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key")," \u2014 Input keys. Type Array"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Input values. Type Array")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.functionSumMap(\n    date Date,\n    timeslot DateTime,\n    status UInt16,\n    requests UInt64\n) ENGINE = CnchMergeTree ORDER BY date;\n\nINSERT INTO test.functionSumMap VALUES\n    ('2000-01-01', '2000-01-01 00:00:00', 1,2),\n    ('2000-01-01', '2000-01-01 00:00:00', 1,5),\n    ('2000-01-01', '2000-01-01 00:00:00', 3,4),\n    ('2000-01-01', '2000-01-01 00:01:00', 5,6),\n    ('2000-01-01', '2000-01-01 00:01:00', 7,8);\n\nSELECT timeslot, sumMap([status], [requests]) FROM test.functionSumMap GROUP BY timeslot;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500timeslot\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500sumMap(array(status), array(requests))\u2500\u2510\n\u2502 2000-01-01 00:00:00 \u2502 ([1, 3], [7, 4])                       \u2502\n\u2502 2000-01-01 00:01:00 \u2502 ([5, 7], [6, 8])                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"summapfiltered"},"sumMapFiltered"),(0,l.kt)("p",null,"Same behavior as sumMap except that an array of keys is passed as a parameter. This can be especially useful when working with a high cardinality of keys."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sumMapFiltered(keys_to_keep)(keys, values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"keys_to_keep")," - Input keys_to_keep. Type Array"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key")," \u2014 Input keys. Type Array"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Input values. Type Array")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.functionSumMapFiltered(\n    date Date,\n    timeslot DateTime,\n    status UInt16,\n    requests UInt64\n) ENGINE = CnchMergeTree ORDER BY date;\n\nINSERT INTO test.functionSumMapFiltered VALUES\n    ('2000-01-01', '2000-01-01 00:00:00', 1,2),\n    ('2000-01-01', '2000-01-01 00:00:00', 1,5),\n    ('2000-01-01', '2000-01-01 00:00:00', 3,4),\n    ('2000-01-01', '2000-01-01 00:01:00', 5,6),\n    ('2000-01-01', '2000-01-01 00:01:00', 7,8);\n\nSELECT timeslot, sumMapFiltered([1])([status], [requests]) FROM test.functionSumMapFiltered GROUP BY timeslot;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500timeslot\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500sumMapFiltered([1])(array(status), array(requests))\u2500\u2510\n\u2502 2000-01-01 00:00:00 \u2502 ([1], [7])                                          \u2502\n\u2502 2000-01-01 00:01:00 \u2502 ([], [])                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"sumwithoverflow"},"sumWithOverflow"),(0,l.kt)("p",null,"Computes the sum of the numbers, using the same data type for the result as for the input parameters. If the sum exceeds the maximum value for this data type, it is calculated with overflow."),(0,l.kt)("p",null,"Only works for numbers."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sumWithOverflow(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," - Input Values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Sum of the numbers.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS test.functionSumWithOverflow (x UInt8) ENGINE=CnchMergeTree ORDER BY x;\nINSERT INTO test.functionSumWithOverflow values (254),(254);\nSELECT sum(x), sumWithOverflow(x) FROM test.functionSumWithOverflow;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sum(x)\u2500\u252c\u2500sumWithOverflow(x)\u2500\u2510\n\u2502 508    \u2502 252                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"topk"},"topK"),(0,l.kt)("p",null,"Returns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves)."),(0,l.kt)("p",null,"Implements the ",(0,l.kt)("a",{parentName:"p",href:"http://www.l2f.inesc-id.pt/~fmmb/wiki/uploads/Work/misnis.ref0a.pdf"},"Filtered Space-Saving")," algorithm for analyzing TopK, based on the reduce-and-combine algorithm from ",(0,l.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/1401.0702.pdf"},"Parallel Space Saving")," ."),(0,l.kt)("p",null,"This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren\u2019t the most frequent values."),(0,l.kt)("p",null,"We recommend using the ",(0,l.kt)("inlineCode",{parentName:"p"},"N < 10")," value; performance is reduced with large ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," values. Maximum value of ",(0,l.kt)("inlineCode",{parentName:"p"},"N = 65536")," ."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"topK(N)(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"N")," \u2013 The number of elements to return. If the parameter is omitted, default value 10 is used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2013 The values to calculate frequency. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT topK(3)(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500topK(3)(number)\u2500\u2510\n\u2502 [0, 1, 2]       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"topkweighted"},"topKWeighted"),(0,l.kt)("p",null,"Returns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). Additionally, the weight of the value is taken into account."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"topKWeighted(N)(x, weight)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"N")," \u2014 The number of elements to return. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," \u2014 The value. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"weight")," \u2014 The weight. Every value is accounted ",(0,l.kt)("inlineCode",{parentName:"li"},"weight")," times for frequency calculation. UInt64. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value"),"\nReturns an array of the values with maximum approximate sum of weights."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT topKWeighted(10)(number, number) FROM numbers(1000)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500topKWeighted(10)(number, number)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [999,998,997,996,995,994,993,992,991,990] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"uniq"},"uniq"),(0,l.kt)("p",null,"Calculates the approximate number of different values of the argument."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"uniq(x[, ...])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The function takes a variable number of parameters. Parameters can be ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuple")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"Array")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"String")," , or numeric types.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A UInt64 -type number. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Implementation details"),"\nFunction:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculates a hash for all parameters in the aggregate, then uses it in calculations. "),(0,l.kt)("li",{parentName:"ul"},"Uses an adaptive sampling algorithm. For the calculation state, the function uses a sample of element hash values up to 65536. ")),(0,l.kt)("p",null,"This algorithm is very accurate and very efficient on the CPU. When the query contains several of these functions, using ",(0,l.kt)("inlineCode",{parentName:"p"},"uniq")," is almost as fast as using other aggregate functions.This algorithm is very accurate and very efficient on the CPU. When the query contains several of these functions, using ",(0,l.kt)("inlineCode",{parentName:"p"},"uniq")," is almost as fast as using other aggregate functions."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Provides the result deterministically (it does not depend on the query processing order). ")),(0,l.kt)("p",null,"We recommend using this function in almost all scenarios."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniq(number) FROM numbers(1000);\n")),(0,l.kt)("h2",{id:"uniqcombined"},"uniqCombined"),(0,l.kt)("p",null,"Calculates the approximate number of different argument values.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"uniqCombined")," function is a good choice for calculating the number of different values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"uniqCombined(HLL_precision)(x[, ...])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The function takes a variable number of parameters. Parameters can be ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuple")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"Array")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"String")," , or numeric types."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HLL_precision")," is the base-2 logarithm of the number of cells in ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/HyperLogLog"},"HyperLogLog")," . Optional, you can use the function as ",(0,l.kt)("inlineCode",{parentName:"li"},"uniqCombined(x[, ...])")," . The default value for ",(0,l.kt)("inlineCode",{parentName:"li"},"HLL_precision")," is 17, which is effectively 96 KiB of space (2^17 cells, 6 bits each).")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A number UInt64 -type number. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Implementation details"),"\nFunction:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculates a hash (64-bit hash for ",(0,l.kt)("inlineCode",{parentName:"li"},"String")," and 32-bit otherwise) for all parameters in the aggregate, then uses it in calculations. "),(0,l.kt)("li",{parentName:"ul"},"Uses a combination of three algorithms: array, hash table, and HyperLogLog with an error correction table. ")),(0,l.kt)("p",null,"For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory.For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Provides the result deterministically (it does not depend on the query processing order). ")),(0,l.kt)("p",null,"Note"),(0,l.kt)("p",null,"Since it uses 32-bit hash for non- ",(0,l.kt)("inlineCode",{parentName:"p"},"String")," type, the result will have very high error for cardinalities significantly larger than ",(0,l.kt)("inlineCode",{parentName:"p"},"UINT_MAX")," (error will raise quickly after a few tens of billions of distinct values), hence in this case you should use uniqCombined64"),(0,l.kt)("p",null,"Compared to the uniq function, the ",(0,l.kt)("inlineCode",{parentName:"p"},"uniqCombined")," :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Consumes several times less memory. "),(0,l.kt)("li",{parentName:"ul"},"Calculates with several times higher accuracy. "),(0,l.kt)("li",{parentName:"ul"},"Usually has slightly lower performance. In some scenarios, ",(0,l.kt)("inlineCode",{parentName:"li"},"uniqCombined")," can perform better than ",(0,l.kt)("inlineCode",{parentName:"li"},"uniq")," , for example, with distributed queries that transmit a large number of aggregation states over the network. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniqCombined(number) FROM numbers(1000);\n")),(0,l.kt)("h2",{id:"uniqexact"},"uniqExact"),(0,l.kt)("p",null,"Calculates the exact number of different argument values."),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"uniqExact")," function if you absolutely need an exact result. Otherwise use the uniq function."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"uniqExact")," function uses more memory than ",(0,l.kt)("inlineCode",{parentName:"p"},"uniq")," , because the size of the state has unbounded growth as the number of different values increases."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"uniqExact(x[, ...])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),"\nThe function takes a variable number of parameters. Parameters can be ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"Array")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"String")," , or numeric types."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A number UInt64 -type number. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniqExact(number) FROM numbers(1000);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500uniqExact(number)\u2500\u2510\n\u2502 1000              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"uniqhll12"},"uniqHLL12"),(0,l.kt)("p",null,"Calculates the approximate number of different argument values, using the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/HyperLogLog"},"HyperLogLog")," algorithm."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"uniqHLL12(x[, ...])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),"\nThe function takes a variable number of parameters. Parameters can be ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"Array")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"String")," , or numeric types."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A UInt64 -type number. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Implementation details"),"\nFunction:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculates a hash for all parameters in the aggregate, then uses it in calculations. "),(0,l.kt)("li",{parentName:"ul"},"Uses the HyperLogLog algorithm to approximate the number of different argument values.\n2^12 5-bit cells are used. The size of the state is slightly more than 2.5 KB. The result is not very accurate (up to ~10% error) for small data sets (<10K elements). However, the result is fairly accurate for high-cardinality data sets (10K-100M), with a maximum error of ~1.6%. Starting from 100M, the estimation error increases, and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements)."),(0,l.kt)("li",{parentName:"ul"},"Provides the determinate result (it does not depend on the query processing order). ")),(0,l.kt)("p",null,"We do not recommend using this function. In most cases, use the uniq or uniqCombined function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniqHLL12(number) FROM numbers(1000);\n")),(0,l.kt)("h2",{id:"uniqupto"},"uniqUpTo"),(0,l.kt)("p",null,"Calculates the number of different argument values if it is less than or equal to N. If the number of different argument values is greater than N, it returns N + 1."),(0,l.kt)("p",null,"Recommended for use with small Ns, up to 10. The maximum value of N is 100."),(0,l.kt)("p",null,"For the state of an aggregate function, it uses the amount of memory equal to 1 + N * the size of one value of bytes."),(0,l.kt)("p",null,"For strings, it stores a non-cryptographic hash of 8 bytes. That is, the calculation is approximated for strings."),(0,l.kt)("p",null,"The function also works for several arguments."),(0,l.kt)("p",null,"It works as fast as possible, except for cases when a large N value is used and the number of unique values is slightly less than N."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"uniqUpTo(N)(x)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"N")," The function takes a variable number of parameters. Parameters can be ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuple")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"Array")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"String")," , or numeric types.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A UInt64 -type number. ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniqUpTo(5)(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500uniqUpTo(5)(number)\u2500\u2510\n\u2502 6                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniqUpTo(5)(number) FROM numbers(4);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500uniqUpTo(5)(number)\u2500\u2510\n\u2502 4                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"varpop"},"varPop"),(0,l.kt)("p",null,"Calculates the amount ",(0,l.kt)("inlineCode",{parentName:"p"},"\u03a3((x - x\u0305)^2) / n")," , where ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is the sample size and ",(0,l.kt)("inlineCode",{parentName:"p"},"x\u0305")," is the average value of ",(0,l.kt)("inlineCode",{parentName:"p"},"x")," ."),(0,l.kt)("p",null,"This function uses a numerically unstable algorithm. If you need ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_stability"},"numerical stability")," in calculations, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"varPopStable")," function. It works slower but provides a lower computational error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"varPop(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"varPop of values. Returns Float64.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT varPop(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500varPop(number)\u2500\u2510\n\u2502 8.25e+00       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"varsamp"},"varSamp"),(0,l.kt)("p",null,"Calculates the amount ",(0,l.kt)("inlineCode",{parentName:"p"},"\u03a3((x - x\u0305)^2) / (n - 1)")," , where ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is the sample size and ",(0,l.kt)("inlineCode",{parentName:"p"},"x\u0305")," is the average value of ",(0,l.kt)("inlineCode",{parentName:"p"},"x")," ."),(0,l.kt)("p",null,"It represents an unbiased estimate of the variance of a random variable if passed values form its sample."),(0,l.kt)("p",null,"This function uses a numerically unstable algorithm. If you need ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_stability"},"numerical stability")," in calculations, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"varSampStable")," function. It works slower but provides a lower computational error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"varSamp(values)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"values")," \u2014 input values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"varSamp of values. Returns Float64."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"n <= 1")," , returns ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," .")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT varSamp(number) FROM numbers(10);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500varSamp(number)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 9.166666666666666e+00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT varSamp(number) FROM numbers(1);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500varSamp(number)\u2500\u2510\n\u2502 NaN             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"var_pop"},"VAR_POP"),(0,l.kt)("p",null,"Alias to varPop."),(0,l.kt)("h2",{id:"var_samp"},"VAR_SAMP"),(0,l.kt)("p",null,"Alias to varSamp."))}k.isMDXComponent=!0}}]);