#!/bin/bash

set -e
set -x
PROJECT="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P  )"

# Used to seperate cache between different target branches.
BRANCH="cnch-ce-merge"

export PATH=$(echo "$PATH" | sed -e 's/:\/opt\/tiger\/typhoon-blade//')
ENABLE_JAVA_EXTENSIONS="${ENABLE_JAVA_EXTENSIONS:-0}"
JAVA_EXTENSIONS_VERSION="${JAVA_EXTENSIONS_VERSION:-1.0.0.3}"

rm -rf output/
mkdir -p output/bin

# It's a temporary code that allow us to use LLVM 11 as a backup.
# We can remove it after enough verification on LLVM 16.
if [ "$CUSTOM_USE_LLVM_11" = "" ]; then
	if [ -f "/switch.sh" ] && [ ! -f "/usr/bin/clang" ]; then
		# Switching to LLVM 16, only do that for once.
		sudo bash /switch.sh
	fi
	if [ -f "/usr/bin/clang" ]; then export CC=/usr/bin/clang; fi
	if [ -f "/usr/bin/clang++" ]; then export CXX=/usr/bin/clang++; fi
fi

. ./utils/release/release_lib.sh && gen_revision_author && cat ./cmake/autogenerated_versions.txt

python3 ./utils/bytedance-versions/check_scm_version.py ./utils/bytedance-versions/CDW.VERSION

export CMAKE_BUILD_TYPE=${CUSTOM_CMAKE_BUILD_TYPE:-RelWithDebInfo}
export CMAKE_FLAGS="-DCMAKE_INSTALL_PREFIX=../output -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DUSE_BYTEDANCE_RDKAFKA=${CUSTOM_USE_BYTEDANCE_RDKAFKA:-1} ${CMAKE_FLAGS}"
CMAKE_FLAGS="-DCMAKE_INSTALL_PREFIX=../output ${CMAKE_FLAGS}"
CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=${CUSTOM_CMAKE_BUILD_TYPE:-RelWithDebInfo} $CMAKE_FLAGS"
CMAKE_FLAGS="-DENABLE_BREAKPAD=ON $CMAKE_FLAGS" # enable minidump
CMAKE_FLAGS="-DENABLE_HUALLOC=OFF ${CMAKE_FLAGS}"
[[ -n "$CUSTOM_SANITIZE" ]] && CMAKE_FLAGS="-DSANITIZE=$CUSTOM_SANITIZE $CMAKE_FLAGS"
[[ -n "$CUSTOM_MAX_LINKING_JOBS" ]] && CMAKE_FLAGS="-DPARALLEL_LINK_JOBS=${CUSTOM_MAX_LINKING_JOBS} ${CMAKE_FLAGS}"
[[ -n "$CUSTOM_MAX_COMPILE_JOBS" ]] && CMAKE_FLAGS="-DPARALLEL_COMPILE_JOBS=${CUSTOM_MAX_COMPILE_JOBS} ${CMAKE_FLAGS}"
export CMAKE_FLAGS

source /etc/os-release
set -e
if [ "$NAME" == "CentOS Linux" ] && [ "$VERSION_ID" == "7" ] && hash scl 2>/dev/null; then
    echo "Found Centos 7 and scl"
    scl enable devtoolset-9 "CC=clang CXX=clang++ cmake3 ${CMAKE_FLAGS} -DCMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/ninja ../"
    scl enable devtoolset-9 "ninja"
    scl enable devtoolset-9 "ninja install"
else
    export CC=/usr/bin/clang
    export CXX=/usr/bin/clang++
    cmake ../ ${CMAKE_FLAGS} && ninja
fi

# Store the cmake flags passed by caller.
EXTERNAL_CMAKE_FLAGS=${CMAKE_FLAGS}

# NOTE: Please use `CUSTOM_DISABLE_CCACHE` to disable the usage of ccache.
# Use `CUSTOM_CACHE_DIR` to change the base folder of ccache cache directory.
# # Enabled if `CACHE_DIR` is set.
CACHE_DIR=${CUSTOM_CACHE_DIR:-/opt/tiger/compile_path/src/code.byted.org/dp/build64_release}/${BRANCH}

if [ "$CUSTOM_DISABLE_CCACHE" == "" ]; then
	mkdir -p "$CACHE_DIR"
fi

load_git_cache() {
	cd "$PROJECT"
	if [ "$ENABLE_GIT_CACHE" == "0" ]; then
		return 0
	fi
	if [ -d "$CACHE_DIR" ]; then
		mkdir -p "$CACHE_DIR/git_modules"
		du -shL "$CACHE_DIR/git_modules"
		if [ -f "$PROJECT/.git/modules" ]; then
			ls "$PROJECT/.git/modules"
			du -shL "$PROJECT/.git/modules"
		fi
		ln -s "$CACHE_DIR/git_modules" "$PROJECT/.git/modules"
	fi
	# Remove the broken symlinks.
	lines=$(find "$PROJECT/.git/" -xtype l | wc -l)
	if [ "$lines" != "0" ]; then
		git submodule deinit -f --all
		find "$PROJECT/.git/" -xtype l -delete
	fi
}

build_binary() {

	cd "$PROJECT"

	CMAKE_FLAGS=${EXTERNAL_CMAKE_FLAGS}

	# Enabled if `CACHE_DIR` is set.
	ENABLE_CCACHE=0
	if [ "$CACHE_DIR" != "" ] && [ "$CUSTOM_DISABLE_CCACHE" = "" ]; then
		ENABLE_CCACHE=1
		if command -v ccache &>/dev/null; then
			# Use ccache as the first choice.
			CACHE_TOOL=ccache
			export CCACHE_DIR=$CACHE_DIR/ccache
			if [ -d "$CCACHE_DIR" ]; then
				du -sh "$CCACHE_DIR"
			fi
			ccache -M 800GB
			ccache -p
			echo "Will use ccache."
		else
			echo "Will not use build cache."
			ENABLE_CCACHE=0
		fi
	fi

	rm -rf output/
	mkdir -p output

	load_git_cache

	git config http.postBuffer 524288000
	git submodule sync

	# Same effects with `git config --global http.sslVerify "false"` without modifing config.
	export GIT_SSL_NO_VERIFY=true

	set +e
	(
		set -e

		http_proxy=http://sys-proxy-rd-relay.byted.org:8118 https_proxy=http://sys-proxy-rd-relay.byted.org:8118 no_proxy=.byted.org git submodule update --init --recursive --depth 1 --jobs 20
	)
	RET=$?
	# Return early when build failed.
	if [[ $RET -ne 0 ]]; then return 1; fi
	set -e

	#export CMAKE_BUILD_TYPE=${CUSTOM_CMAKE_BUILD_TYPE:-RelWithDebInfo}
	#export CMAKE_FLAGS="-DCMAKE_INSTALL_PREFIX=../output -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DUSE_BYTEDANCE_RDKAFKA=${CUSTOM_USE_BYTEDANCE_RDKAFKA:-1} ${CMAKE_FLAGS}"
	CMAKE_FLAGS="-DCMAKE_INSTALL_PREFIX=../output ${CMAKE_FLAGS}"
	CMAKE_FLAGS="-DUSE_BYTEDANCE_RDKAFKA=${CUSTOM_USE_BYTEDANCE_RDKAFKA:-1} ${CMAKE_FLAGS}"
	CMAKE_FLAGS="-DUSE_BYTEDANCE_LIBHDFS3=${CUSTOM_USE_BYTEDANCE_LIBHDFS3:-1} ${CMAKE_FLAGS}"
	CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=${CUSTOM_CMAKE_BUILD_TYPE:-RelWithDebInfo} $CMAKE_FLAGS"
	CMAKE_FLAGS="-DENABLE_BREAKPAD=ON $CMAKE_FLAGS" # enable minidump
	CMAKE_FLAGS="-DENABLE_PYUDF=ON ${CMAKE_FLAGS}"
	CMAKE_FLAGS="-DENABLE_GIS=ON ${CMAKE_FLAGS}"
	CMAKE_FLAGS="-DENABLE_JAVA_EXTENSIONS=${ENABLE_JAVA_EXTENSIONS} ${CMAKE_FLAGS}"
	CMAKE_FLAGS="-DENABLE_HUALLOC=OFF ${CMAKE_FLAGS}"

	[[ -n "$CUSTOM_SANITIZE" ]] && CMAKE_FLAGS="-DSANITIZE=$CUSTOM_SANITIZE $CMAKE_FLAGS"
	[[ -n "$CUSTOM_MAX_LINKING_JOBS" ]] && CMAKE_FLAGS="-DPARALLEL_LINK_JOBS=${CUSTOM_MAX_LINKING_JOBS} ${CMAKE_FLAGS}"
	[[ -n "$CUSTOM_MAX_COMPILE_JOBS" ]] && CMAKE_FLAGS="-DPARALLEL_COMPILE_JOBS=${CUSTOM_MAX_COMPILE_JOBS} ${CMAKE_FLAGS}"
	[[ "$CUSTOM_USE_CLOUDFS" = "true" ]] && CMAKE_FLAGS="-DUSE_CLOUDFS=1 ${CMAKE_FLAGS}"
	[[ -n "$CUSTOM_ENABLE_FAISS" ]] && CMAKE_FLAGS="-DENABLE_FAISS=$CUSTOM_ENABLE_FAISS $CMAKE_FLAGS"
	CMAKE_FLAGS="-DENABLE_CCACHE=${ENABLE_CCACHE} ${CMAKE_FLAGS}"
	export CMAKE_FLAGS

	rm -rf build && mkdir build && cd build

	source /etc/os-release
	if [ "$NAME" == "CentOS Linux" ] && [ "$VERSION_ID" == "7" ] && hash scl 2>/dev/null; then
		echo "Found Centos 7 and scl"
		scl enable devtoolset-9 "CC=clang CXX=clang++ cmake3 ${CMAKE_FLAGS} -DCMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/ninja ../"
		set +e
		(
			set -e
			scl enable devtoolset-9 "ninja"
		)
		RET=$?
		# Return early when build failed.
		if [[ $RET -ne 0 ]]; then return 1; fi
		set -e
		scl enable devtoolset-9 "ninja install"
	else
		cmake ../ ${CMAKE_FLAGS}
		set +e
		(
			set -e
			ninja
		)
		RET=$?
		# Return early when build failed.
		if [[ $RET -ne 0 ]]; then return 1; fi
		set -e
		ninja install
	fi

	if [ ! -z $CACHE_TOOL ]; then
		$CACHE_TOOL -s
	fi

	# copy shared libaries
	cp ${PROJECT}/contrib/foundationdb/lib/libfdb_c.so ../output/lib
	cp -r ${PROJECT}/contrib/MKL/lib/* ../output/lib
	cp -r ${PROJECT}/contrib/libomp/lib/* ../output/lib

	if [[ -n $BUILD_TYPE ]] && [[ $BUILD_TYPE != "online" ]] && [[ -f "${PROJECT}/build/src/unit_tests_dbms" ]]; then
		mv "${PROJECT}/build/src/unit_tests_dbms" ../output/bin/
	fi

	if [[ $ENABLE_JAVA_EXTENSIONS -eq 1 ]]; then
		JAR_URL="https://maven.byted.org/repository/releases/org/byconity/las/${JAVA_EXTENSIONS_VERSION}/las-${JAVA_EXTENSIONS_VERSION}-jar-with-dependencies.jar"
		mkdir -p ../output/lib/jar
		curl -o ../output/lib/jar/las-reader-jar-with-dependencies.jar $JAR_URL
	fi

	# create the `usr/bin` directory to keep it same with old version
	mkdir -p ../output/usr
	mv ../output/bin ../output/usr/

	# create symlink to make CI and deployment tests happy
	cd ../output
	ln -s usr/bin bin
	cd bin
	ln -s udf-manager udf_manager_server
	cd ../etc
	ln -s clickhouse-server cnch-server
	ln -s clickhouse-server cnch-worker
}

build_binary
RET=$?
set -e

# If we used build cache last time and the build failed, try to rebuild without cache.
if [[ "$RET" -ne 0 ]] && [[ -n "$ENABLE_CCACHE" ]]; then
	echo "Rebuild without build cache"
	CUSTOM_DISABLE_CCACHE=1
	rm -rf "$CACHE_DIR"
	build_binary
fi
