Projection
│     Expressions: [c_acctbal, c_address, c_comment, c_custkey, c_name, c_phone, n_name], revenue:=`expr#sum(multiply(l_extendedprice, minus(1, l_discount)))`
└─ Limit
   │     Limit: 20
   └─ Sorting
      │     Order by: {expr#sum(multiply(l_extendedprice, minus(1, l_discount))) DESC NULLS LAST}
      │     Limit: 20
      └─ Gather Exchange
         └─ Sorting
            │     Order by: {expr#sum(multiply(l_extendedprice, minus(1, l_discount))) DESC NULLS LAST}
            │     Limit: 20
            └─ MergingAggregated
               └─ Repartition Exchange
                  │     Partition by: {c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment}
                  └─ Aggregating
                     │     Group by: {c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment}
                     │     Aggregates: expr#sum(multiply(l_extendedprice, minus(1, l_discount))):=AggNull(sum)(expr#multiply(l_extendedprice, minus(1, l_discount)))
                     └─ Projection
                        │     Expressions: [c_acctbal, c_address, c_comment, c_custkey, c_name, c_phone, n_name], expr#multiply(l_extendedprice, minus(1, l_discount)):=l_extendedprice * (1 - l_discount)
                        └─ Inner (PARALLEL_HASH) Join
                           │     Condition: l_orderkey == o_orderkey
                           │     Runtime Filters Builder: {o_orderkey}
                           ├─ Repartition Exchange
                           │  │     Partition by: {l_orderkey}
                           │  └─ Projection
                           │     │     Expressions: [l_discount, l_extendedprice, l_orderkey]
                           │     └─ Filter
                           │        │     Condition: l_returnflag = 'R' Runtime Filters: {l_orderkey}
                           │        └─ TableScan tpch1000.lineitem
                           │                 Where: l_returnflag = 'R' Runtime Filters: {l_orderkey}
                           │                 Outputs: [l_orderkey, l_extendedprice, l_discount, l_returnflag]
                           └─ Repartition Exchange
                              │     Partition by: {o_orderkey}
                              └─ Inner Join
                                 │     Condition: c_nationkey == n_nationkey
                                 ├─ Inner (PARALLEL_HASH) Join
                                 │  │     Condition: c_custkey == o_custkey
                                 │  │     Runtime Filters Builder: {o_custkey}
                                 │  ├─ Repartition Exchange
                                 │  │  │     Partition by: {c_custkey}
                                 │  │  └─ Filter
                                 │  │     │     Condition: Runtime Filters: {c_custkey}
                                 │  │     └─ TableScan tpch1000.customer
                                 │  │              Where: Runtime Filters: {c_custkey}
                                 │  │              Outputs: [c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_comment]
                                 │  └─ Repartition Exchange
                                 │     │     Partition by: {o_custkey}
                                 │     └─ Projection
                                 │        │     Expressions: [o_custkey, o_orderkey]
                                 │        └─ Filter
                                 │           │     Condition: (o_orderdate >= cast(8674, 'Date')) AND (o_orderdate < cast(8766, 'Date'))
                                 │           └─ TableScan tpch1000.orders
                                 │                    Where: (o_orderdate >= cast(8674, 'Date')) AND (o_orderdate < cast(8766, 'Date'))
                                 │                    Outputs: [o_orderkey, o_custkey, o_orderdate]
                                 └─ Broadcast Exchange
                                    └─ TableScan tpch1000.nation
                                             Outputs: [n_nationkey, n_name]
note: Runtime Filter is applied for 2 times.
