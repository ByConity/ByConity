Projection
│     Expressions: [i_category, i_class], lochierarchy:=`expr#plus(grouping(i_category), grouping(i_class))`, rank_within_parent:=`expr#rank() OVER (PARTITION BY grouping(i_category) + grouping(i_class), multiIf(grouping(i_class) = 0, i_category, NULL) ORDER BY sum(ws_net_paid) DESC)`, total_sum:=`expr#sum(ws_net_paid)`
└─ Limit
   │     Limit: 100
   └─ Sorting
      │     Order by: {expr#plus(grouping(i_category), grouping(i_class)) DESC NULLS LAST, expr#multiIf(equals(plus(grouping(i_category), grouping(i_class)), 0), i_category, NULL) ASC NULLS LAST, expr#rank() OVER (PARTITION BY grouping(i_category) + grouping(i_class), multiIf(grouping(i_class) = 0, i_category, NULL) ORDER BY sum(ws_net_paid) DESC) ASC NULLS LAST}
      │     Limit: 100
      └─ Gather Exchange
         └─ Sorting
            │     Order by: {expr#plus(grouping(i_category), grouping(i_class)) DESC NULLS LAST, expr#multiIf(equals(plus(grouping(i_category), grouping(i_class)), 0), i_category, NULL) ASC NULLS LAST, expr#rank() OVER (PARTITION BY grouping(i_category) + grouping(i_class), multiIf(grouping(i_class) = 0, i_category, NULL) ORDER BY sum(ws_net_paid) DESC) ASC NULLS LAST}
            │     Limit: 100
            └─ Projection
               │     Expressions: [expr#plus(grouping(i_category), grouping(i_class)), expr#rank() OVER (PARTITION BY grouping(i_category) + grouping(i_class), multiIf(grouping(i_class) = 0, i_category, NULL) ORDER BY sum(ws_net_paid) DESC), expr#sum(ws_net_paid), i_category, i_class], expr#multiIf(equals(plus(grouping(i_category), grouping(i_class)), 0), i_category, NULL):=multiIf(`expr#plus(grouping(i_category), grouping(i_class))` = 0, i_category, NULL)
               └─ Window
                  └─ Repartition Exchange
                     │     Partition by: {expr#plus(grouping(i_category), grouping(i_class)), expr#multiIf(equals(grouping(i_class), 0), i_category, NULL)}
                     └─ Projection
                        │     Expressions: [expr#sum(ws_net_paid), i_category, i_class], expr#multiIf(equals(grouping(i_class), 0), i_category, NULL):=multiIf(`expr#grouping(i_class)` = 0, i_category, NULL), expr#plus(grouping(i_category), grouping(i_class)):=`expr#grouping(i_category)` + `expr#grouping(i_class)`
                        └─ MergingAggregated
                           └─ Repartition Exchange
                              │     Partition by: {i_category, i_class, __grouping_set}
                              └─ Aggregating
                                 │     Group by: {i_category, i_class}
                                 │     Aggregates: expr#sum(ws_net_paid):=AggNull(sum)(ws_net_paid)
                                 └─ Inner Join
                                    │     Condition: ws_item_sk == i_item_sk
                                    ├─ Inner Join
                                    │  │     Condition: ws_sold_date_sk == d_date_sk
                                    │  │     Runtime Filters Builder: {d_date_sk}
                                    │  ├─ Filter
                                    │  │  │     Condition: Runtime Filters: {ws_sold_date_sk}
                                    │  │  └─ TableScan tpcds1000.web_sales
                                    │  │           Where: Runtime Filters: {ws_sold_date_sk}
                                    │  │           Outputs: [ws_sold_date_sk, ws_item_sk, ws_net_paid]
                                    │  └─ Broadcast Exchange
                                    │     └─ Projection
                                    │        │     Expressions: [d_date_sk]
                                    │        └─ Filter
                                    │           │     Condition: (d_month_seq >= 1200) AND (d_month_seq <= cast(1211, 'UInt32'))
                                    │           └─ TableScan tpcds1000.date_dim
                                    │                    Where: (d_month_seq >= 1200) AND (d_month_seq <= cast(1211, 'UInt32'))
                                    │                    Outputs: [d_date_sk, d_month_seq]
                                    └─ TableScan tpcds1000.item
                                             Outputs: [i_item_sk, i_class, i_category]
note: Runtime Filter is applied for 1 times.
