Projection
│     Expressions: best_performing:=i_product_name, rnk:=`expr#rank() OVER (ORDER BY rank_col DESC)`, worst_performing:=i_product_name_1
└─ Limit
   │     Limit: 100
   └─ Sorting
      │     Order by: {expr#rank() OVER (ORDER BY rank_col DESC) ASC NULLS LAST}
      │     Limit: 100
      └─ Gather Exchange
         └─ Sorting
            │     Order by: {expr#rank() OVER (ORDER BY rank_col DESC) ASC NULLS LAST}
            │     Limit: 100
            └─ Inner Join
               │     Condition: ss_item_sk_1 == i_item_sk_1
               ├─ Repartition Exchange
               │  │     Partition by: {ss_item_sk_1}
               │  └─ Inner Join
               │     │     Condition: ss_item_sk == i_item_sk
               │     ├─ Repartition Exchange
               │     │  │     Partition by: {ss_item_sk}
               │     │  └─ Inner Join
               │     │     │     Condition: expr#rank() OVER (ORDER BY rank_col DESC) == expr#rank() OVER (ORDER BY rank_col ASC)
               │     │     ├─ Repartition Exchange
               │     │     │  │     Partition by: {expr#rank() OVER (ORDER BY rank_col DESC)}
               │     │     │  └─ Projection
               │     │     │     │     Expressions: [expr#rank() OVER (ORDER BY rank_col DESC), ss_item_sk_1]
               │     │     │     └─ Filter
               │     │     │        │     Condition: `expr#rank() OVER (ORDER BY rank_col DESC)` < 11
               │     │     │        └─ Window
               │     │     │           └─ Gather Exchange
               │     │     │              └─ Buffer
               │     │     │                 └─ CTERef[1]
               │     │     └─ Repartition Exchange
               │     │        │     Partition by: {expr#rank() OVER (ORDER BY rank_col ASC)}
               │     │        └─ Projection
               │     │           │     Expressions: [expr#rank() OVER (ORDER BY rank_col ASC), ss_item_sk]
               │     │           └─ Filter
               │     │              │     Condition: `expr#rank() OVER (ORDER BY rank_col ASC)` < 11
               │     │              └─ Window
               │     │                 └─ Gather Exchange
               │     │                    └─ Buffer
               │     │                       └─ CTERef[1]
               │     └─ Repartition Exchange
               │        │     Partition by: {i_item_sk}
               │        └─ TableScan tpcds1000.item
               │                 Outputs: [i_item_sk, i_product_name]
               └─ Repartition Exchange
                  │     Partition by: {i_item_sk_1}
                  └─ TableScan tpcds1000.item
                           Outputs: i_item_sk_1:=i_item_sk, i_product_name_1:=i_product_name
CTEDef [1]
   Inner Join
   │     Condition: 
   │     Filter: `expr#avg(ss_net_profit)` > ('0.9' * `expr#avg(ss_net_profit)_1`)
   ├─ Aggregating
   │  │     Group by: {ss_item_sk}
   │  │     Aggregates: expr#avg(ss_net_profit):=AggNull(avg)(ss_net_profit)
   │  └─ Projection
   │     │     Expressions: [ss_item_sk, ss_net_profit]
   │     └─ Filter
   │        │     Condition: ss_store_sk = 4
   │        └─ TableScan tpcds1000.store_sales
   │                 Where: ss_store_sk = 4
   │                 Outputs: [ss_item_sk, ss_store_sk, ss_net_profit]
   └─ Broadcast Exchange
      └─ EnforceSingleRow
         └─ Gather Exchange
            └─ Projection
               │     Expressions: [expr#avg(ss_net_profit)_1]
               └─ MergingAggregated
                  └─ Repartition Exchange
                     │     Partition by: {ss_store_sk_1}
                     └─ Aggregating
                        │     Group by: {ss_store_sk_1}
                        │     Aggregates: expr#avg(ss_net_profit)_1:=AggNull(avg)(ss_net_profit_1)
                        └─ Projection
                           │     Expressions: [ss_net_profit_1, ss_store_sk_1]
                           └─ Filter
                              │     Condition: (ss_store_sk_1 = 4) AND isNull(ss_addr_sk)
                              └─ TableScan tpcds1000.store_sales
                                       Where: (ss_store_sk = 4) AND isNull(ss_addr_sk)
                                       Outputs: [ss_addr_sk], ss_store_sk_1:=ss_store_sk, ss_net_profit_1:=ss_net_profit
note: CTE(Common Table Expression) is applied for 2 times.
