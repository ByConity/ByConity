Projection
│     Expressions: [ss_customer_sk, ss_item_sk], other_chan_qty:=`expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))`, other_chan_sales_price:=`expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0))`, other_chan_wholesale_cost:=`expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0))`, ratio:=`expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2)`, ss_sold_year:=d_year, store_qty:=`expr#sum(ss_quantity)`, store_sales_price:=`expr#sum(ss_sales_price)`, store_wholesale_cost:=`expr#sum(ss_wholesale_cost)`
└─ Limit
   │     Limit: 100
   └─ Sorting
      │     Order by: {d_year ASC NULLS LAST, ss_item_sk ASC NULLS LAST, ss_customer_sk ASC NULLS LAST, expr#sum(ss_quantity) DESC NULLS LAST, expr#sum(ss_wholesale_cost) DESC NULLS LAST, expr#sum(ss_sales_price) DESC NULLS LAST, expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0)) ASC NULLS LAST, expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0)) ASC NULLS LAST, expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0)) ASC NULLS LAST, expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2) ASC NULLS LAST}
      │     Limit: 100
      └─ Gather Exchange
         └─ Sorting
            │     Order by: {d_year ASC NULLS LAST, ss_item_sk ASC NULLS LAST, ss_customer_sk ASC NULLS LAST, expr#sum(ss_quantity) DESC NULLS LAST, expr#sum(ss_wholesale_cost) DESC NULLS LAST, expr#sum(ss_sales_price) DESC NULLS LAST, expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0)) ASC NULLS LAST, expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0)) ASC NULLS LAST, expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0)) ASC NULLS LAST, expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2) ASC NULLS LAST}
            │     Limit: 100
            └─ Projection
               │     Expressions: [d_year, expr#sum(ss_quantity), expr#sum(ss_sales_price), expr#sum(ss_wholesale_cost), ss_customer_sk, ss_item_sk], expr#plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0)):=coalesce(`expr#sum(ws_quantity)`, 0) + coalesce(`expr#sum(cs_quantity)`, 0), expr#plus(coalesce(ws_sp, 0), coalesce(cs_sp, 0)):=coalesce(`expr#sum(ws_sales_price)`, 0) + coalesce(`expr#sum(cs_sales_price)`, 0), expr#plus(coalesce(ws_wc, 0), coalesce(cs_wc, 0)):=coalesce(`expr#sum(ws_wholesale_cost)`, 0) + coalesce(`expr#sum(cs_wholesale_cost)`, 0), expr#round(divide(ss_qty, plus(coalesce(ws_qty, 0), coalesce(cs_qty, 0))), 2):=round(`expr#sum(ss_quantity)` / (coalesce(`expr#sum(ws_quantity)`, 0) + coalesce(`expr#sum(cs_quantity)`, 0)), 2)
               └─ Filter
                  │     Condition: (coalesce(`expr#sum(ws_quantity)`, 0) > 0) OR (coalesce(`expr#sum(cs_quantity)`, 0) > 0)
                  └─ Left (PARALLEL_HASH) Join
                     │     Condition: d_year == d_year_2, ss_customer_sk == cs_bill_customer_sk, ss_item_sk == cs_item_sk
                     ├─ Left (PARALLEL_HASH) Join
                     │  │     Condition: d_year == d_year_1, ss_customer_sk == ws_bill_customer_sk, ss_item_sk == ws_item_sk
                     │  ├─ Aggregating
                     │  │  │     Group by: {d_year, ss_item_sk, ss_customer_sk}
                     │  │  │     Aggregates: expr#sum(ss_quantity):=AggNull(sum)(ss_quantity), expr#sum(ss_wholesale_cost):=AggNull(sum)(ss_wholesale_cost), expr#sum(ss_sales_price):=AggNull(sum)(ss_sales_price)
                     │  │  └─ Projection
                     │  │     │     Expressions: [d_year, ss_customer_sk, ss_item_sk, ss_quantity, ss_sales_price, ss_wholesale_cost]
                     │  │     └─ Filter
                     │  │        │     Condition: isNull(sr_ticket_number)
                     │  │        └─ Left (PARALLEL_HASH) Join
                     │  │           │     Condition: ss_item_sk == sr_item_sk, ss_ticket_number == sr_ticket_number
                     │  │           ├─ Inner Join
                     │  │           │  │     Condition: ss_sold_date_sk == d_date_sk
                     │  │           │  │     Runtime Filters Builder: {d_date_sk}
                     │  │           │  ├─ Filter
                     │  │           │  │  │     Condition: Runtime Filters: {ss_sold_date_sk}
                     │  │           │  │  └─ TableScan tpcds1000.store_sales
                     │  │           │  │           Where: Runtime Filters: {ss_sold_date_sk}
                     │  │           │  │           Outputs: [ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price]
                     │  │           │  └─ Broadcast Exchange
                     │  │           │     └─ Filter
                     │  │           │        │     Condition: d_year = 2000
                     │  │           │        └─ TableScan tpcds1000.date_dim
                     │  │           │                 Where: d_year = 2000
                     │  │           │                 Outputs: [d_date_sk, d_year]
                     │  │           └─ TableScan tpcds1000.store_returns
                     │  │                    Outputs: [sr_item_sk, sr_ticket_number]
                     │  └─ Aggregating
                     │     │     Group by: {d_year_1, ws_item_sk, ws_bill_customer_sk}
                     │     │     Aggregates: expr#sum(ws_quantity):=AggNull(sum)(ws_quantity), expr#sum(ws_wholesale_cost):=AggNull(sum)(ws_wholesale_cost), expr#sum(ws_sales_price):=AggNull(sum)(ws_sales_price)
                     │     └─ Projection
                     │        │     Expressions: [d_year_1, ws_bill_customer_sk, ws_item_sk, ws_quantity, ws_sales_price, ws_wholesale_cost]
                     │        └─ Filter
                     │           │     Condition: isNull(wr_order_number)
                     │           └─ Left (PARALLEL_HASH) Join
                     │              │     Condition: ws_item_sk == wr_item_sk, ws_order_number == wr_order_number
                     │              ├─ Inner Join
                     │              │  │     Condition: ws_sold_date_sk == d_date_sk_1
                     │              │  │     Runtime Filters Builder: {d_date_sk_1}
                     │              │  ├─ Filter
                     │              │  │  │     Condition: Runtime Filters: {ws_sold_date_sk}
                     │              │  │  └─ TableScan tpcds1000.web_sales
                     │              │  │           Where: Runtime Filters: {ws_sold_date_sk}
                     │              │  │           Outputs: [ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_sales_price]
                     │              │  └─ Broadcast Exchange
                     │              │     └─ Filter
                     │              │        │     Condition: d_year_1 = 2000
                     │              │        └─ TableScan tpcds1000.date_dim
                     │              │                 Where: d_year = 2000
                     │              │                 Outputs: d_date_sk_1:=d_date_sk, d_year_1:=d_year
                     │              └─ TableScan tpcds1000.web_returns
                     │                       Outputs: [wr_item_sk, wr_order_number]
                     └─ Aggregating
                        │     Group by: {d_year_2, cs_item_sk, cs_bill_customer_sk}
                        │     Aggregates: expr#sum(cs_quantity):=AggNull(sum)(cs_quantity), expr#sum(cs_wholesale_cost):=AggNull(sum)(cs_wholesale_cost), expr#sum(cs_sales_price):=AggNull(sum)(cs_sales_price)
                        └─ Projection
                           │     Expressions: [cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_sales_price, cs_wholesale_cost, d_year_2]
                           └─ Filter
                              │     Condition: isNull(cr_order_number)
                              └─ Left (PARALLEL_HASH) Join
                                 │     Condition: cs_item_sk == cr_item_sk, cs_order_number == cr_order_number
                                 ├─ Inner Join
                                 │  │     Condition: cs_sold_date_sk == d_date_sk_2
                                 │  │     Runtime Filters Builder: {d_date_sk_2}
                                 │  ├─ Filter
                                 │  │  │     Condition: Runtime Filters: {cs_sold_date_sk}
                                 │  │  └─ TableScan tpcds1000.catalog_sales
                                 │  │           Where: Runtime Filters: {cs_sold_date_sk}
                                 │  │           Outputs: [cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price]
                                 │  └─ Broadcast Exchange
                                 │     └─ Filter
                                 │        │     Condition: d_year_2 = 2000
                                 │        └─ TableScan tpcds1000.date_dim
                                 │                 Where: d_year = 2000
                                 │                 Outputs: d_date_sk_2:=d_date_sk, d_year_2:=d_year
                                 └─ TableScan tpcds1000.catalog_returns
                                          Outputs: [cr_item_sk, cr_order_number]
note: Runtime Filter is applied for 3 times.
