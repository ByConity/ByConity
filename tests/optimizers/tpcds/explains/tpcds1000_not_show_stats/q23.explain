Projection
│     Expressions: sum(sales):=`expr#sum(sales)`
└─ Limit
   │     Limit: 100
   └─ MergingAggregated
      └─ Gather Exchange
         └─ Union
            │     OutputToInputs: expr#sum(sales) = [expr#sum(sales),expr#sum(sales)]
            ├─ Aggregating
            │  │     Group by: {}
            │  │     Aggregates: expr#sum(sales):=AggNull(sum)(expr#multiply(cs_quantity, cs_list_price))
            │  └─ Projection
            │     │     Expressions: expr#multiply(cs_quantity, cs_list_price):=cs_quantity * cs_list_price
            │     └─ Left Semi (PARALLEL_HASH) Join
            │        │     Condition: cs_bill_customer_sk == c_customer_sk_2
            │        │     Runtime Filters Builder: {c_customer_sk_2}
            │        ├─ Repartition Exchange
            │        │  │     Partition by: {cs_bill_customer_sk}
            │        │  └─ Right Semi (PARALLEL_HASH) Join
            │        │     │     Condition: i_item_sk_1 == cs_item_sk
            │        │     │     Runtime Filters Builder: {cs_item_sk}
            │        │     ├─ Filter
            │        │     │  │     Condition: Runtime Filters: {i_item_sk_1}
            │        │     │  └─ Local Exchange
            │        │     │     └─ CTERef[0]
            │        │     └─ Inner Join
            │        │        │     Condition: cs_sold_date_sk == d_date_sk
            │        │        │     Runtime Filters Builder: {d_date_sk}
            │        │        ├─ Filter
            │        │        │  │     Condition: Runtime Filters: {cs_bill_customer_sk, cs_sold_date_sk}
            │        │        │  └─ TableScan tpcds1000.catalog_sales
            │        │        │           Where: Runtime Filters: {cs_bill_customer_sk, cs_sold_date_sk}
            │        │        │           Outputs: [cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price]
            │        │        └─ Broadcast Exchange
            │        │           └─ Projection
            │        │              │     Expressions: [d_date_sk]
            │        │              └─ Filter
            │        │                 │     Condition: (d_year = 2000) AND (d_moy = 2)
            │        │                 └─ TableScan tpcds1000.date_dim
            │        │                          Where: (d_year = 2000) AND (d_moy = 2)
            │        │                          Outputs: [d_date_sk, d_year, d_moy]
            │        └─ CTERef[1]
            └─ Aggregating
               │     Group by: {}
               │     Aggregates: expr#sum(sales):=AggNull(sum)(expr#multiply(ws_quantity, ws_list_price))
               └─ Projection
                  │     Expressions: expr#multiply(ws_quantity, ws_list_price):=ws_quantity * ws_list_price
                  └─ Left Semi (PARALLEL_HASH) Join
                     │     Condition: ws_bill_customer_sk == c_customer_sk_3
                     │     Runtime Filters Builder: {c_customer_sk_3}
                     ├─ Repartition Exchange
                     │  │     Partition by: {ws_bill_customer_sk}
                     │  └─ Right Semi (PARALLEL_HASH) Join
                     │     │     Condition: i_item_sk_2 == ws_item_sk
                     │     │     Runtime Filters Builder: {ws_item_sk}
                     │     ├─ Filter
                     │     │  │     Condition: Runtime Filters: {i_item_sk_2}
                     │     │  └─ Local Exchange
                     │     │     └─ CTERef[0]
                     │     └─ Inner Join
                     │        │     Condition: ws_sold_date_sk == d_date_sk_3
                     │        │     Runtime Filters Builder: {d_date_sk_3}
                     │        ├─ Filter
                     │        │  │     Condition: Runtime Filters: {ws_bill_customer_sk, ws_sold_date_sk}
                     │        │  └─ TableScan tpcds1000.web_sales
                     │        │           Where: Runtime Filters: {ws_bill_customer_sk, ws_sold_date_sk}
                     │        │           Outputs: [ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price]
                     │        └─ Broadcast Exchange
                     │           └─ Projection
                     │              │     Expressions: [d_date_sk_3]
                     │              └─ Filter
                     │                 │     Condition: (d_moy_1 = 2) AND (d_year_3 = 2000)
                     │                 └─ TableScan tpcds1000.date_dim
                     │                          Where: (d_moy = 2) AND (d_year = 2000)
                     │                          Outputs: d_date_sk_3:=d_date_sk, d_year_3:=d_year, d_moy_1:=d_moy
                     └─ Local Exchange
                        └─ CTERef[1]
CTEDef [0]
   Projection
   │     Expressions: i_item_sk:=ss_item_sk
   └─ Filter
      │     Condition: `expr#count()` > 4
      └─ Aggregating
         │     Group by: {expr#substring(i_item_desc, 1, 30), ss_item_sk, d_date}
         │     Aggregates: expr#count():=AggNull(count)()
         └─ Projection
            │     Expressions: [d_date, ss_item_sk], expr#substring(i_item_desc, 1, 30):=substring(i_item_desc, 1, 30)
            └─ Inner Join
               │     Condition: ss_item_sk == i_item_sk
               ├─ Inner Join
               │  │     Condition: ss_sold_date_sk == d_date_sk_1
               │  ├─ TableScan tpcds1000.store_sales
               │  │        Outputs: [ss_sold_date_sk, ss_item_sk]
               │  └─ Broadcast Exchange
               │     └─ Projection
               │        │     Expressions: [d_date, d_date_sk_1]
               │        └─ Filter
               │           │     Condition: d_year_1 IN (2000, 2001, 2002, 2003)
               │           └─ TableScan tpcds1000.date_dim
               │                    Where: d_year IN (2000, 2001, 2002, 2003)
               │                    Outputs: [d_date], d_date_sk_1:=d_date_sk, d_year_1:=d_year
               └─ TableScan tpcds1000.item
                        Outputs: [i_item_sk, i_item_desc]
CTEDef [1]
   Projection
   │     Expressions: c_customer_sk:=ss_customer_sk
   └─ Inner Join
      │     Condition: 
      │     Filter: `expr#sum(multiply(ss_quantity, ss_sales_price))` > ('0.5' * `expr#max(csales)`)
      ├─ MergingAggregated
      │  └─ Repartition Exchange
      │     │     Partition by: {ss_customer_sk}
      │     └─ Aggregating
      │        │     Group by: {ss_customer_sk}
      │        │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price)):=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price))
      │        └─ Projection
      │           │     Expressions: [ss_customer_sk], expr#multiply(ss_quantity, ss_sales_price):=ss_quantity * ss_sales_price
      │           └─ Filter
      │              │     Condition: isNotNull(ss_customer_sk)
      │              └─ TableScan tpcds1000.store_sales
      │                       Where: isNotNull(ss_customer_sk)
      │                       Outputs: [ss_customer_sk, ss_quantity, ss_sales_price]
      └─ Broadcast Exchange
         └─ MergingAggregated
            └─ Gather Exchange
               └─ Aggregating
                  │     Group by: {}
                  │     Aggregates: expr#max(csales):=AggNull(max)(expr#sum(multiply(ss_quantity, ss_sales_price))_1)
                  └─ MergingAggregated
                     └─ Repartition Exchange
                        │     Partition by: {ss_customer_sk_1}
                        └─ Aggregating
                           │     Group by: {ss_customer_sk_1}
                           │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_1:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_1)
                           └─ Projection
                              │     Expressions: [ss_customer_sk_1], expr#multiply(ss_quantity, ss_sales_price)_1:=ss_quantity_1 * ss_sales_price_1
                              └─ Inner Join
                                 │     Condition: ss_sold_date_sk_1 == d_date_sk_2
                                 ├─ Filter
                                 │  │     Condition: isNotNull(ss_customer_sk_1)
                                 │  └─ TableScan tpcds1000.store_sales
                                 │           Where: isNotNull(ss_customer_sk)
                                 │           Outputs: ss_sold_date_sk_1:=ss_sold_date_sk, ss_customer_sk_1:=ss_customer_sk, ss_quantity_1:=ss_quantity, ss_sales_price_1:=ss_sales_price
                                 └─ Broadcast Exchange
                                    └─ Projection
                                       │     Expressions: [d_date_sk_2]
                                       └─ Filter
                                          │     Condition: d_year_2 IN (2000, 2001, 2002, 2003)
                                          └─ TableScan tpcds1000.date_dim
                                                   Where: d_year IN (2000, 2001, 2002, 2003)
                                                   Outputs: d_date_sk_2:=d_date_sk, d_year_2:=d_year
note: Runtime Filter is applied for 6 times.
note: CTE(Common Table Expression) is applied for 4 times.
Projection
│     Expressions: c_first_name:=c_first_name_2, c_last_name:=c_last_name_2, sales:=`expr#sum(multiply(cs_quantity, cs_list_price))_1`
└─ Limit
   │     Limit: 100
   └─ Sorting
      │     Order by: {c_last_name_2 ASC NULLS LAST, c_first_name_2 ASC NULLS LAST, expr#sum(multiply(cs_quantity, cs_list_price))_1 ASC NULLS LAST}
      │     Limit: 100
      └─ Gather Exchange
         └─ Sorting
            │     Order by: {c_last_name_2 ASC NULLS LAST, c_first_name_2 ASC NULLS LAST, expr#sum(multiply(cs_quantity, cs_list_price))_1 ASC NULLS LAST}
            │     Limit: 100
            └─ Union
               │     OutputToInputs: c_first_name_2 = [c_first_name,c_first_name_1], expr#sum(multiply(cs_quantity, cs_list_price))_1 = [expr#sum(multiply(cs_quantity, cs_list_price)),expr#sum(multiply(ws_quantity, ws_list_price))], c_last_name_2 = [c_last_name,c_last_name_1]
               ├─ MergingAggregated
               │  └─ Repartition Exchange
               │     │     Partition by: {c_last_name, c_first_name}
               │     └─ Aggregating
               │        │     Group by: {c_last_name, c_first_name}
               │        │     Aggregates: expr#sum(multiply(cs_quantity, cs_list_price)):=AggNull(sum)(expr#multiply(cs_quantity, cs_list_price)_2)
               │        └─ Projection
               │           │     Expressions: [c_first_name, c_last_name], expr#multiply(cs_quantity, cs_list_price)_2:=cs_quantity_1 * cs_list_price_1
               │           └─ Inner (PARALLEL_HASH) Join
               │              │     Condition: c_customer_sk_4 == cs_bill_customer_sk_1
               │              │     Runtime Filters Builder: {cs_bill_customer_sk_1}
               │              ├─ Repartition Exchange
               │              │  │     Partition by: {c_customer_sk_4}
               │              │  └─ Filter
               │              │     │     Condition: Runtime Filters: {c_customer_sk_4}
               │              │     └─ TableScan tpcds1000.customer
               │              │              Where: Runtime Filters: {c_customer_sk}
               │              │              Outputs: [c_first_name, c_last_name], c_customer_sk_4:=c_customer_sk
               │              └─ Left Semi (PARALLEL_HASH) Join
               │                 │     Condition: cs_bill_customer_sk_1 == c_customer_sk_7
               │                 │     Runtime Filters Builder: {c_customer_sk_7}
               │                 ├─ Repartition Exchange
               │                 │  │     Partition by: {cs_bill_customer_sk_1}
               │                 │  └─ Right Semi (PARALLEL_HASH) Join
               │                 │     │     Condition: i_item_sk_6 == cs_item_sk_1
               │                 │     │     Runtime Filters Builder: {cs_item_sk_1}
               │                 │     ├─ Filter
               │                 │     │  │     Condition: Runtime Filters: {i_item_sk_6}
               │                 │     │  └─ Local Exchange
               │                 │     │     └─ CTERef[0]
               │                 │     └─ Inner Join
               │                 │        │     Condition: cs_sold_date_sk_1 == d_date_sk_10
               │                 │        │     Runtime Filters Builder: {d_date_sk_10}
               │                 │        ├─ Filter
               │                 │        │  │     Condition: Runtime Filters: {cs_bill_customer_sk_1, cs_sold_date_sk_1}
               │                 │        │  └─ TableScan tpcds1000.catalog_sales
               │                 │        │           Where: Runtime Filters: {cs_bill_customer_sk, cs_sold_date_sk}
               │                 │        │           Outputs: cs_sold_date_sk_1:=cs_sold_date_sk, cs_bill_customer_sk_1:=cs_bill_customer_sk, cs_item_sk_1:=cs_item_sk, cs_quantity_1:=cs_quantity, cs_list_price_1:=cs_list_price
               │                 │        └─ Broadcast Exchange
               │                 │           └─ Projection
               │                 │              │     Expressions: [d_date_sk_10]
               │                 │              └─ Filter
               │                 │                 │     Condition: (d_moy_2 = 2) AND (d_year_10 = 2000)
               │                 │                 └─ TableScan tpcds1000.date_dim
               │                 │                          Where: (d_moy = 2) AND (d_year = 2000)
               │                 │                          Outputs: d_date_sk_10:=d_date_sk, d_year_10:=d_year, d_moy_2:=d_moy
               │                 └─ CTERef[1]
               └─ MergingAggregated
                  └─ Repartition Exchange
                     │     Partition by: {c_last_name_1, c_first_name_1}
                     └─ Aggregating
                        │     Group by: {c_last_name_1, c_first_name_1}
                        │     Aggregates: expr#sum(multiply(ws_quantity, ws_list_price)):=AggNull(sum)(expr#multiply(ws_quantity, ws_list_price)_1)
                        └─ Projection
                           │     Expressions: [c_first_name_1, c_last_name_1], expr#multiply(ws_quantity, ws_list_price)_1:=ws_quantity_1 * ws_list_price_1
                           └─ Inner (PARALLEL_HASH) Join
                              │     Condition: c_customer_sk_8 == ws_bill_customer_sk_1
                              │     Runtime Filters Builder: {ws_bill_customer_sk_1}
                              ├─ Repartition Exchange
                              │  │     Partition by: {c_customer_sk_8}
                              │  └─ Filter
                              │     │     Condition: Runtime Filters: {c_customer_sk_8}
                              │     └─ TableScan tpcds1000.customer
                              │              Where: Runtime Filters: {c_customer_sk}
                              │              Outputs: c_customer_sk_8:=c_customer_sk, c_first_name_1:=c_first_name, c_last_name_1:=c_last_name
                              └─ Left Semi (PARALLEL_HASH) Join
                                 │     Condition: ws_bill_customer_sk_1 == c_customer_sk_9
                                 │     Runtime Filters Builder: {c_customer_sk_9}
                                 ├─ Repartition Exchange
                                 │  │     Partition by: {ws_bill_customer_sk_1}
                                 │  └─ Right Semi (PARALLEL_HASH) Join
                                 │     │     Condition: i_item_sk_7 == ws_item_sk_1
                                 │     │     Runtime Filters Builder: {ws_item_sk_1}
                                 │     ├─ Filter
                                 │     │  │     Condition: Runtime Filters: {i_item_sk_7}
                                 │     │  └─ Local Exchange
                                 │     │     └─ CTERef[0]
                                 │     └─ Inner Join
                                 │        │     Condition: ws_sold_date_sk_1 == d_date_sk_13
                                 │        │     Runtime Filters Builder: {d_date_sk_13}
                                 │        ├─ Filter
                                 │        │  │     Condition: Runtime Filters: {ws_bill_customer_sk_1, ws_sold_date_sk_1}
                                 │        │  └─ TableScan tpcds1000.web_sales
                                 │        │           Where: Runtime Filters: {ws_bill_customer_sk, ws_sold_date_sk}
                                 │        │           Outputs: ws_sold_date_sk_1:=ws_sold_date_sk, ws_item_sk_1:=ws_item_sk, ws_bill_customer_sk_1:=ws_bill_customer_sk, ws_quantity_1:=ws_quantity, ws_list_price_1:=ws_list_price
                                 │        └─ Broadcast Exchange
                                 │           └─ Projection
                                 │              │     Expressions: [d_date_sk_13]
                                 │              └─ Filter
                                 │                 │     Condition: (d_moy_3 = 2) AND (d_year_13 = 2000)
                                 │                 └─ TableScan tpcds1000.date_dim
                                 │                          Where: (d_moy = 2) AND (d_year = 2000)
                                 │                          Outputs: d_date_sk_13:=d_date_sk, d_year_13:=d_year, d_moy_3:=d_moy
                                 └─ CTERef[1]
CTEDef [0]
   Projection
   │     Expressions: i_item_sk_5:=ss_item_sk_3
   └─ Filter
      │     Condition: `expr#count()_5` > 4
      └─ Aggregating
         │     Group by: {expr#substring(i_item_desc, 1, 30)_5, ss_item_sk_3, d_date_5}
         │     Aggregates: expr#count()_5:=AggNull(count)()
         └─ Projection
            │     Expressions: [d_date_5, ss_item_sk_3], expr#substring(i_item_desc, 1, 30)_5:=substring(i_item_desc_3, 1, 30)
            └─ Inner Join
               │     Condition: ss_item_sk_3 == i_item_sk_5
               ├─ Inner Join
               │  │     Condition: ss_sold_date_sk_8 == d_date_sk_11
               │  ├─ TableScan tpcds1000.store_sales
               │  │        Outputs: ss_sold_date_sk_8:=ss_sold_date_sk, ss_item_sk_3:=ss_item_sk
               │  └─ Broadcast Exchange
               │     └─ Projection
               │        │     Expressions: [d_date_5, d_date_sk_11]
               │        └─ Filter
               │           │     Condition: d_year_11 IN (2000, 2001, 2002, 2003)
               │           └─ TableScan tpcds1000.date_dim
               │                    Where: d_year IN (2000, 2001, 2002, 2003)
               │                    Outputs: d_date_sk_11:=d_date_sk, d_date_5:=d_date, d_year_11:=d_year
               └─ TableScan tpcds1000.item
                        Outputs: i_item_sk_5:=i_item_sk, i_item_desc_3:=i_item_desc
CTEDef [1]
   Projection
   │     Expressions: c_customer_sk_5:=ss_customer_sk_6
   └─ Inner Join
      │     Condition: 
      │     Filter: `expr#sum(multiply(ss_quantity, ss_sales_price))_8` > ('0.5' * `expr#max(csales)_3`)
      ├─ MergingAggregated
      │  └─ Repartition Exchange
      │     │     Partition by: {ss_customer_sk_6}
      │     └─ Aggregating
      │        │     Group by: {ss_customer_sk_6}
      │        │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_8:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_6)
      │        └─ Projection
      │           │     Expressions: [ss_customer_sk_6], expr#multiply(ss_quantity, ss_sales_price)_6:=ss_quantity_6 * ss_sales_price_6
      │           └─ Filter
      │              │     Condition: isNotNull(ss_customer_sk_6)
      │              └─ TableScan tpcds1000.store_sales
      │                       Where: isNotNull(ss_customer_sk)
      │                       Outputs: ss_customer_sk_6:=ss_customer_sk, ss_quantity_6:=ss_quantity, ss_sales_price_6:=ss_sales_price
      └─ Broadcast Exchange
         └─ MergingAggregated
            └─ Gather Exchange
               └─ Aggregating
                  │     Group by: {}
                  │     Aggregates: expr#max(csales)_3:=AggNull(max)(expr#sum(multiply(ss_quantity, ss_sales_price))_9)
                  └─ MergingAggregated
                     └─ Repartition Exchange
                        │     Partition by: {ss_customer_sk_7}
                        └─ Aggregating
                           │     Group by: {ss_customer_sk_7}
                           │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_9:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_7)
                           └─ Projection
                              │     Expressions: [ss_customer_sk_7], expr#multiply(ss_quantity, ss_sales_price)_7:=ss_quantity_7 * ss_sales_price_7
                              └─ Inner Join
                                 │     Condition: ss_sold_date_sk_9 == d_date_sk_12
                                 ├─ Filter
                                 │  │     Condition: isNotNull(ss_customer_sk_7)
                                 │  └─ TableScan tpcds1000.store_sales
                                 │           Where: isNotNull(ss_customer_sk)
                                 │           Outputs: ss_sold_date_sk_9:=ss_sold_date_sk, ss_customer_sk_7:=ss_customer_sk, ss_quantity_7:=ss_quantity, ss_sales_price_7:=ss_sales_price
                                 └─ Broadcast Exchange
                                    └─ Projection
                                       │     Expressions: [d_date_sk_12]
                                       └─ Filter
                                          │     Condition: d_year_12 IN (2000, 2001, 2002, 2003)
                                          └─ TableScan tpcds1000.date_dim
                                                   Where: d_year IN (2000, 2001, 2002, 2003)
                                                   Outputs: d_date_sk_12:=d_date_sk, d_year_12:=d_year
note: Runtime Filter is applied for 8 times.
note: CTE(Common Table Expression) is applied for 4 times.
