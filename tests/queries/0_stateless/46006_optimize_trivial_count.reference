optimized:
3
Projection Est. 0 rows, cost 1.600000e-01
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. 0 rows, cost 1.600000e-01
   └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
      └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
optimized:
1
Projection Est. 0 rows, cost 1.600000e-01
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. 0 rows, cost 1.600000e-01
   └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
      └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
optimized:
0
Projection Est. 0 rows, cost 1.600000e-01
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. 0 rows, cost 1.600000e-01
   └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
      └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
optimized:
2
Projection Est. 0 rows, cost 1.600000e-01
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. 0 rows, cost 1.600000e-01
   └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
      └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
optimized:
0
Projection Est. 0 rows, cost 1.600000e-01
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. 0 rows, cost 1.600000e-01
   └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
      └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
optimized:
2
Projection Est. 0 rows, cost 1.600000e-01
│     Expressions: cnt:=`expr#count()`
└─ Filter Est. 0 rows, cost 1.600000e-01
   │     Condition: `expr#count()` < 10
   └─ MergingAggregated Est. 0 rows, cost 1.600000e-01
      └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
         └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
optimized:
0
0
Projection Est. 0 rows, cost 3.200000e-01
│     Expressions: count():=`expr#count()_2`
└─ Union Est. 0 rows, cost 3.200000e-01
   ├─ MergingAggregated Est. 0 rows, cost 1.600000e-01
   │  └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
   │     └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
   └─ MergingAggregated Est. 0 rows, cost 1.600000e-01
      └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
         └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
optimized:
2
Projection Est. 0 rows, cost 1.600000e-01
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. 0 rows, cost 1.600000e-01
   └─ Gather Exchange Est. 0 rows, cost 1.600000e-01
      └─ ReadStorageRowCount Est. 0 rows, cost 0.000000e+00
non-optimized:
2
Projection Est. ? rows
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. ? rows
   └─ Gather Exchange Est. ? rows
      └─ Aggregating Est. ? rows
         │     Group by: {}
         │     Aggregates: expr#count():=AggNull(count)()
         └─ Filter Est. ? rows
            │     Condition: (i > 1) AND ((i + i) < 10) AND ((j + i) < 10)
            └─ TableScan default.test1 Est. ? rows
                     Condition : (i > 1) AND ((i + i) < 10) AND ((j + i) < 10).Prewhere : ((i AS iiii) + i) < 10.
                     Outputs: [i, j]
non-optimized:
0
Projection Est. ? rows
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. ? rows
   └─ Gather Exchange Est. ? rows
      └─ Aggregating Est. ? rows
         │     Group by: {}
         │     Aggregates: expr#count():=AggNull(count)()
         └─ Filter Est. ? rows
            │     Condition: (i + i) < 1
            └─ TableScan default.test1 Est. ? rows
                     Condition : (i + i) < 1.
                     Outputs: [i]
non-optimized:
3	1
2	1
1	1
Projection Est. ? rows
│     Expressions: [i], count():=`expr#count()`
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {i}
         └─ Aggregating Est. ? rows
            │     Group by: {i}
            │     Aggregates: expr#count():=AggNull(count)()
            └─ TableScan default.test1 Est. ? rows
                     Outputs: [i]
non-optimized:
3
Projection Est. ? rows
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. ? rows
   └─ Gather Exchange Est. ? rows
      └─ Aggregating Est. ? rows
         │     Group by: {}
         │     Aggregates: expr#count():=AggNull(count)()
         └─ Left Join Est. ? rows
            │     Condition: i == i_1
            ├─ Repartition Exchange Est. ? rows
            │  │     Partition by: {i}
            │  └─ TableScan default.test1 Est. ? rows
            │           Outputs: [i]
            └─ Repartition Exchange Est. ? rows
               │     Partition by: {i_1}
               └─ TableScan default.test1 Est. ? rows
                        Outputs: i_1:=i
