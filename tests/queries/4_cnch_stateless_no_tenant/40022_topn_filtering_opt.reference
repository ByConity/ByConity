Projection Est. 10 rows, cost 2.388000e+01
│     Expressions: count():=`expr#count()`, n:=number_3
└─ Limit Est. 10 rows, cost 2.314000e+01
   │     Limit: 10
   └─ Sorting Est. 10 rows, cost 2.314000e+01
      │     Order by: {number_3 asc}
      │     Limit: 10
      └─ Gather Exchange Est. 10 rows, cost 2.314000e+01
         └─ Sorting Est. 10 rows, cost 2.138000e+01
            │     Order by: {number_3 asc}
            │     Limit: 10
            └─ MergingAggregated Est. 90 rows, cost 2.138000e+01
               └─ Repartition Exchange Est. 90 rows, cost 2.138000e+01
                  │     Partition by: {number_3}
                  └─ Aggregating Est. 90 rows, cost 6.660000e+00
                     │     Group by: {number_3}
                     │     Aggregates: expr#count():=AggNull(count)()
                     └─ TopNFiltering Est. 90 rows, cost 6.660000e+00
                        │     Order by: {number_3 asc}
                        │     Size: 10
                        └─ Union Est. 90 rows, cost 6.660000e+00
                           ├─ Filter Est. 30 rows, cost 2.220000e+00
                           │  │     Condition: (number % 2) = 0
                           │  └─ Limit Est. 30 rows, cost 0.000000e+00
                           │     │     Limit: 30
                           │     └─ TableScan system.numbers Est. ? rows, cost 0.000000e+00
                           │              Limit : 30.
                           │              Outputs: [number]
                           ├─ Filter Est. 30 rows, cost 2.220000e+00
                           │  │     Condition: (number_1 % 3) = 0
                           │  └─ Limit Est. 30 rows, cost 0.000000e+00
                           │     │     Limit: 30
                           │     └─ TableScan system.numbers Est. ? rows, cost 0.000000e+00
                           │              Limit : 30.
                           │              Outputs: number_1:=number
                           └─ Filter Est. 30 rows, cost 2.220000e+00
                              │     Condition: (number_2 % 5) = 0
                              └─ Limit Est. 30 rows, cost 0.000000e+00
                                 │     Limit: 30
                                 └─ TableScan system.numbers Est. ? rows, cost 0.000000e+00
                                          Limit : 30.
                                          Outputs: number_2:=number
0	3
2	1
3	1
4	1
5	1
6	2
8	1
9	1
10	2
12	2
Projection Est. 10 rows, cost 2.820000e+00
│     Expressions: [block_number], gas_fee:=`expr#sum(multiply(gas, gas_price))`
└─ Limit Est. 10 rows, cost 2.080000e+00
   │     Limit: 10
   └─ Sorting Est. 10 rows, cost 2.080000e+00
      │     Order by: {block_number asc}
      │     Limit: 10
      └─ Gather Exchange Est. 10 rows, cost 2.080000e+00
         └─ Sorting Est. 10 rows, cost 3.200000e-01
            │     Order by: {block_number asc}
            │     Limit: 10
            └─ MergingAggregated Est. ? rows, cost 3.200000e-01
               └─ Repartition Exchange Est. ? rows, cost 3.200000e-01
                  │     Partition by: {block_number}
                  └─ Aggregating Est. ? rows, cost 0.000000e+00
                     │     Group by: {block_number}
                     │     Aggregates: expr#sum(multiply(gas, gas_price)):=AggNull(sum)(expr#multiply(gas, gas_price))
                     └─ Projection Est. ? rows, cost 0.000000e+00
                        │     Expressions: [block_number], expr#multiply(gas, gas_price):=gas * gas_price
                        └─ TopNFiltering Est. ? rows, cost 0.000000e+00
                           │     Order by: {block_number asc}
                           │     Size: 10
                           └─ Filter Est. ? rows, cost 0.000000e+00
                              │     Condition: (block_number > 10000000) AND (block_number < 20000000)
                              └─ TableScan test.polygon_tx_v87 Est. ? rows, cost 0.000000e+00
                                       Condition : (block_number > 10000000) AND (block_number < 20000000).
                                       Outputs: [block_number, gas, gas_price]
