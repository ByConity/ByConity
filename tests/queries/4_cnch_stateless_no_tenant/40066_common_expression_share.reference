-- { echo }
-- test leaf segment(PREWHERE)
SET enable_common_expression_sharing_for_prewhere = 1;
EXPLAIN SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
FROM ut40066_comexp_x
PREWHERE multiIf(length(key) = 4, 1, bar / 2 > 1, 0, 1)
WHERE ((((a + 1) * 3) % 7) as bar) = 3
GROUP BY key;
Projection Est. ? rows
│     Expressions: cnt:=`expr#count()`, key:=`expr#trimBoth(substring(lower(s), 1, 4))`
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {expr#trimBoth(substring(lower(s), 1, 4))}
         └─ Aggregating Est. ? rows
            │     Group by: {expr#trimBoth(substring(lower(s), 1, 4))}
            │     Aggregates: expr#count():=AggNull(count)()
            └─ Projection Est. ? rows
               │     Expressions: expr#trimBoth(substring(lower(s), 1, 4)):=`expr#trimBoth(substring(lower(s), 1, 4))_1`
               └─ Filter Est. ? rows
                  │     Condition: `expr#modulo(multiply(plus(a, 1), 3), 7)` = 3
                  └─ TableScan test.ut40066_comexp_x Est. ? rows
                           Where: ((((a + 1) * 3) % 7) = 3) AND multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) > 1, 0, 1)
                           Prewhere: multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) > 1, 0, 1)
                           Inline expressions: [expr#modulo(multiply(plus(a, 1), 3), 7):=((a + 1) * 3) % 7, expr#trimBoth(substring(lower(s), 1, 4))_1:=trimBoth(substring(lower(s), 1, 4))]
                           Outputs: 
SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
FROM ut40066_comexp_x
PREWHERE multiIf(length(key) = 4, 1, bar / 2 > 1, 0, 1)
WHERE ((((a + 1) * 3) % 7) as bar) = 3
GROUP BY key;
aabb	1
-- test leaf segment(non-PREWHERE)
SET enable_common_expression_sharing_for_prewhere = 0;
EXPLAIN SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
FROM ut40066_comexp_x
PREWHERE multiIf(length(key) = 4, 1, 0)
WHERE startsWith(key, 'aa')
GROUP BY key;
Projection Est. ? rows
│     Expressions: cnt:=`expr#count()`, key:=`expr#trimBoth(substring(lower(s), 1, 4))`
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {expr#trimBoth(substring(lower(s), 1, 4))}
         └─ Aggregating Est. ? rows
            │     Group by: {expr#trimBoth(substring(lower(s), 1, 4))}
            │     Aggregates: expr#count():=AggNull(count)()
            └─ Projection Est. ? rows
               │     Expressions: expr#trimBoth(substring(lower(s), 1, 4)):=`expr#trimBoth(substring(lower(s), 1, 4))_1`
               └─ Filter Est. ? rows
                  │     Condition: startsWith(`expr#trimBoth(substring(lower(s), 1, 4))_1`, \'aa\')
                  └─ Projection Est. ? rows
                     │     Expressions: expr#trimBoth(substring(lower(s), 1, 4))_1:=trimBoth(substring(lower(s), 1, 4))
                     └─ TableScan test.ut40066_comexp_x Est. ? rows
                              Where: multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, 0) AND startsWith(trimBoth(substring(lower(s), 1, 4)), \'aa\')
                              Prewhere: multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, 0)
                              Outputs: [s]
SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
FROM ut40066_comexp_x
PREWHERE multiIf(length(key) = 4, 1, 0)
WHERE startsWith(key, 'aa')
GROUP BY key;
aabb	1
-- test non-leaf segment
EXPLAIN SELECT trim(substring(lower(s1), 1, 4)) as key, count() as cnt
FROM
(
    SELECT max(s) AS s1 FROM ut40066_comexp_x
)
WHERE startsWith(key, 'aa')
GROUP BY key;
Projection Est. ? rows
│     Expressions: cnt:=`expr#count()`, key:=`expr#trimBoth(substring(lower(s1), 1, 4))`
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {expr#trimBoth(substring(lower(s1), 1, 4))}
         └─ Aggregating Est. ? rows
            │     Group by: {expr#trimBoth(substring(lower(s1), 1, 4))}
            │     Aggregates: expr#count():=AggNull(count)()
            └─ Projection Est. ? rows
               │     Expressions: expr#trimBoth(substring(lower(s1), 1, 4)):=`expr#trimBoth(substring(lower(expr#max(s)), 1, 4))`
               └─ Filter Est. ? rows
                  │     Condition: startsWith(`expr#trimBoth(substring(lower(expr#max(s)), 1, 4))`, \'aa\')
                  └─ Projection Est. ? rows
                     │     Expressions: expr#trimBoth(substring(lower(expr#max(s)), 1, 4)):=trimBoth(substring(lower(`expr#max(s)`), 1, 4))
                     └─ MergingAggregated Est. ? rows
                        └─ Gather Exchange Est. ? rows
                           └─ Aggregating Est. ? rows
                              │     Group by: {}
                              │     Aggregates: expr#max(s):=AggNull(max)(s)
                              └─ TableScan test.ut40066_comexp_x Est. ? rows
                                       Outputs: [s]
SELECT trim(substring(lower(s1), 1, 4)) as key, count() as cnt
FROM
(
    SELECT max(s) AS s1 FROM ut40066_comexp_x
)
WHERE startsWith(key, 'aa')
GROUP BY key;
aabb	1
-- test nodes with multiple chilren
SET enable_common_expression_sharing_for_prewhere = 1;
EXPLAIN SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
FROM ut40066_comexp_x
PREWHERE multiIf(length(key) = 4, 1, bar / 2 = 1, 0, 1)
WHERE ((((a + 1) * 3) % 7) as bar) <= 3
GROUP BY key
UNION ALL
SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
FROM ut40066_comexp_x
PREWHERE multiIf(length(key) = 4, 1, bar / 2 = 1, 0, 1)
WHERE ((((a + 1) * 3) % 7) as bar) > 3
GROUP BY key;
Projection Est. ? rows
│     Expressions: cnt:=`expr#count()_2`, key:=`expr#trimBoth(substring(lower(s), 1, 4))_2`
└─ Gather Exchange Est. ? rows
   └─ Union Est. ? rows
      │     OutputToInputs: expr#count()_2 = [expr#count(),expr#count()_1], expr#trimBoth(substring(lower(s), 1, 4))_2 = [expr#trimBoth(substring(lower(s), 1, 4)),expr#trimBoth(substring(lower(s), 1, 4))_1]
      ├─ MergingAggregated Est. ? rows
      │  └─ Repartition Exchange Est. ? rows
      │     │     Partition by: {expr#trimBoth(substring(lower(s), 1, 4))}
      │     └─ Aggregating Est. ? rows
      │        │     Group by: {expr#trimBoth(substring(lower(s), 1, 4))}
      │        │     Aggregates: expr#count():=AggNull(count)()
      │        └─ Projection Est. ? rows
      │           │     Expressions: expr#trimBoth(substring(lower(s), 1, 4)):=`expr#trimBoth(substring(lower(s), 1, 4))_3`
      │           └─ Filter Est. ? rows
      │              │     Condition: `expr#modulo(multiply(plus(a, 1), 3), 7)` <= 3
      │              └─ TableScan test.ut40066_comexp_x Est. ? rows
      │                       Where: ((((a + 1) * 3) % 7) <= 3) AND multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) = 1, 0, 1)
      │                       Prewhere: multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) = 1, 0, 1)
      │                       Inline expressions: [expr#modulo(multiply(plus(a, 1), 3), 7):=((a + 1) * 3) % 7, expr#trimBoth(substring(lower(s), 1, 4))_3:=trimBoth(substring(lower(s), 1, 4))]
      │                       Outputs: 
      └─ MergingAggregated Est. ? rows
         └─ Repartition Exchange Est. ? rows
            │     Partition by: {expr#trimBoth(substring(lower(s), 1, 4))_1}
            └─ Aggregating Est. ? rows
               │     Group by: {expr#trimBoth(substring(lower(s), 1, 4))_1}
               │     Aggregates: expr#count()_1:=AggNull(count)()
               └─ Projection Est. ? rows
                  │     Expressions: expr#trimBoth(substring(lower(s), 1, 4))_1:=`expr#trimBoth(substring(lower(s), 1, 4))_4`
                  └─ Filter Est. ? rows
                     │     Condition: `expr#modulo(multiply(plus(a, 1), 3), 7)_1` > 3
                     └─ TableScan test.ut40066_comexp_x Est. ? rows
                              Where: ((((a + 1) * 3) % 7) > 3) AND multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) = 1, 0, 1)
                              Prewhere: multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) = 1, 0, 1)
                              Inline expressions: [expr#modulo(multiply(plus(a, 1), 3), 7)_1:=((a + 1) * 3) % 7, expr#trimBoth(substring(lower(s), 1, 4))_4:=trimBoth(substring(lower(s), 1, 4))]
                              Outputs: 
SELECT *
FROM (
    SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
    FROM ut40066_comexp_x
    PREWHERE multiIf(length(key) = 4, 1, bar / 2 = 1, 0, 1)
    WHERE ((((a + 1) * 3) % 7) as bar) <= 3
    GROUP BY key
    UNION ALL
    SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
    FROM ut40066_comexp_x
    PREWHERE multiIf(length(key) = 4, 1, bar / 2 = 1, 0, 1)
    WHERE ((((a + 1) * 3) % 7) as bar) > 3
    GROUP BY key
)
ORDER BY key;
aab	1
aabb	1
-- test prune
SET common_expression_sharing_threshold = 10;
EXPLAIN SELECT trim(substring(lower(s), 1, 4)) as key, count() as cnt
FROM ut40066_comexp_x
PREWHERE multiIf(length(key) = 4, 1, bar / 2 > 1, 0, 1)
WHERE ((((a + 1) * 3) % 7) as bar) = 3
GROUP BY key;
Projection Est. ? rows
│     Expressions: cnt:=`expr#count()`, key:=`expr#trimBoth(substring(lower(s), 1, 4))`
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {expr#trimBoth(substring(lower(s), 1, 4))}
         └─ Aggregating Est. ? rows
            │     Group by: {expr#trimBoth(substring(lower(s), 1, 4))}
            │     Aggregates: expr#count():=AggNull(count)()
            └─ Projection Est. ? rows
               │     Expressions: expr#trimBoth(substring(lower(s), 1, 4)):=trimBoth(substring(lower(s), 1, 4))
               └─ Filter Est. ? rows
                  │     Condition: (((a + 1) * 3) % 7) = 3
                  └─ TableScan test.ut40066_comexp_x Est. ? rows
                           Where: ((((a + 1) * 3) % 7) = 3) AND multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) > 1, 0, 1)
                           Prewhere: multiIf(length(trimBoth(substring(lower(s), 1, 4))) = 4, 1, ((((a + 1) * 3) % 7) / 2) > 1, 0, 1)
                           Outputs: [a, s]
