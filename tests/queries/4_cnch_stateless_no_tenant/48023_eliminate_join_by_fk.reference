real pk?
1
OK: fk inner join pk
Projection Est. ? rows
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. ? rows
   └─ Gather Exchange Est. ? rows
      └─ Aggregating Est. ? rows
         │     Group by: {}
         │     Aggregates: expr#count():=AggNull(count)()
         └─ Filter Est. ? rows
            │     Condition: isNotNull(cast(sk, \'Nullable(Int64)\'))
            └─ TableScan test.web Est. ? rows
                     Where: isNotNull(cast(sk, \'Nullable(Int64)\'))
                     Outputs: [sk]
2
OK: fk left outer join pk with join filter
Projection Est. ? rows
│     Expressions: count():=`expr#count()`
└─ MergingAggregated Est. ? rows
   └─ Gather Exchange Est. ? rows
      └─ Aggregating Est. ? rows
         │     Group by: {}
         │     Aggregates: expr#count():=AggNull(count)()
         └─ Filter Est. ? rows
            │     Condition: price < 2000.
            └─ TableScan test.web Est. ? rows
                     Where: price < 2000.
                     Outputs: [price]
1
OK: fk left outer join pk
Projection Est. 10 rows, cost 2.500000e+00
│     Expressions: [price]
└─ Limit Est. 10 rows, cost 1.760000e+00
   │     Limit: 10
   └─ Sorting Est. 10 rows, cost 1.760000e+00
      │     Order by: {price ASC NULLS LAST}
      │     Limit: 10
      └─ Gather Exchange Est. 10 rows, cost 1.760000e+00
         └─ Sorting Est. 10 rows, cost 0.000000e+00
            │     Order by: {price ASC NULLS LAST}
            │     Limit: 10
            └─ TableScan test.web Est. ? rows, cost 0.000000e+00
                     Outputs: [price]
1000.2
2000.3
3003.5
OK: pk right outer join fk
Projection Est. 10 rows, cost 2.500000e+00
│     Expressions: [price]
└─ Limit Est. 10 rows, cost 1.760000e+00
   │     Limit: 10
   └─ Sorting Est. 10 rows, cost 1.760000e+00
      │     Order by: {price ASC NULLS LAST}
      │     Limit: 10
      └─ Gather Exchange Est. 10 rows, cost 1.760000e+00
         └─ Sorting Est. 10 rows, cost 0.000000e+00
            │     Order by: {price ASC NULLS LAST}
            │     Limit: 10
            └─ TableScan test.web Est. ? rows, cost 0.000000e+00
                     Outputs: [price]
1000.2
2000.3
3003.5
not OK: fk right outer join pk
Projection Est. 10 rows, cost 2.980000e+00
│     Expressions: [price]
└─ Limit Est. 10 rows, cost 2.240000e+00
   │     Limit: 10
   └─ Sorting Est. 10 rows, cost 2.240000e+00
      │     Order by: {price ASC NULLS LAST}
      │     Limit: 10
      └─ Gather Exchange Est. 10 rows, cost 2.240000e+00
         └─ Sorting Est. 10 rows, cost 4.800000e-01
            │     Order by: {price ASC NULLS LAST}
            │     Limit: 10
            └─ Right Join Est. ? rows, cost 4.800000e-01
               │     Condition: sk == expr#cast(sk_1, \'Nullable(Int64)\')
               ├─ Repartition Exchange Est. ? rows, cost 2.400000e-01
               │  │     Partition by: {sk}
               │  └─ TableScan test.web Est. ? rows, cost 0.000000e+00
               │           Outputs: [sk, price]
               └─ Repartition Exchange Est. ? rows, cost 2.400000e-01
                  │     Partition by: {expr#cast(sk_1, \'Nullable(Int64)\')}
                  └─ Projection Est. ? rows, cost 0.000000e+00
                     │     Expressions: expr#cast(sk_1, \'Nullable(Int64)\'):=cast(sk_1, \'Nullable(Int64)\')
                     └─ TableScan test.cust Est. ? rows, cost 0.000000e+00
                              Outputs: sk_1:=sk
1000.2
2000.3
\N
OK: fk semi join pk
Projection Est. 10 rows, cost 2.500000e+00
│     Expressions: [price]
└─ Limit Est. 10 rows, cost 1.760000e+00
   │     Limit: 10
   └─ Sorting Est. 10 rows, cost 1.760000e+00
      │     Order by: {price ASC NULLS LAST}
      │     Limit: 10
      └─ Gather Exchange Est. 10 rows, cost 1.760000e+00
         └─ Sorting Est. 10 rows, cost 0.000000e+00
            │     Order by: {price ASC NULLS LAST}
            │     Limit: 10
            └─ Projection Est. ? rows, cost 0.000000e+00
               │     Expressions: [price]
               └─ Filter Est. ? rows, cost 0.000000e+00
                  │     Condition: isNotNull(sk)
                  └─ TableScan test.web Est. ? rows, cost 0.000000e+00
                           Where: isNotNull(sk)
                           Outputs: [sk, price]
1000.2
2000.3
not OK: another incompeleted pk table
Projection Est. ? rows
│     Expressions: [price, ws_item_sk], bbsk:=sk, sk:=sk_2
└─ Sorting Est. ? rows
   │     Order by: {price ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {price ASC NULLS LAST}
         └─ Inner Join Est. ? rows
            │     Condition: expr#cast(sk, \'Nullable(Int64)\')_1 == expr#cast(sk_2, \'Nullable(Int64)\')
            ├─ Repartition Exchange Est. ? rows
            │  │     Partition by: {expr#cast(sk, \'Nullable(Int64)\')_1}
            │  └─ Projection Est. ? rows
            │     │     Expressions: [sk], expr#cast(sk, \'Nullable(Int64)\')_1:=cast(sk, \'Nullable(Int64)\')
            │     └─ Left Join Est. ? rows
            │        │     Condition: expr#cast(sk, \'Nullable(Int64)\') == expr#sum(sk)
            │        ├─ Repartition Exchange Est. ? rows
            │        │  │     Partition by: {expr#cast(sk, \'Nullable(Int64)\')}
            │        │  └─ Projection Est. ? rows
            │        │     │     Expressions: [sk], expr#cast(sk, \'Nullable(Int64)\'):=cast(sk, \'Nullable(Int64)\')
            │        │     └─ TableScan test.cust Est. ? rows
            │        │              Outputs: [sk]
            │        └─ Repartition Exchange Est. ? rows
            │           │     Partition by: {expr#sum(sk)}
            │           └─ Projection Est. ? rows
            │              │     Expressions: [expr#sum(sk)]
            │              └─ MergingAggregated Est. ? rows
            │                 └─ Repartition Exchange Est. ? rows
            │                    │     Partition by: {c_customer_id}
            │                    └─ Aggregating Est. ? rows
            │                       │     Group by: {c_customer_id}
            │                       │     Aggregates: expr#sum(sk):=AggNull(sum)(sk_1)
            │                       └─ TableScan test.cust Est. ? rows
            │                                Outputs: [c_customer_id], sk_1:=sk
            └─ Repartition Exchange Est. ? rows
               │     Partition by: {expr#cast(sk_2, \'Nullable(Int64)\')}
               └─ Projection Est. ? rows
                  │     Expressions: [price, sk_2, ws_item_sk], expr#cast(sk_2, \'Nullable(Int64)\'):=cast(sk_2, \'Nullable(Int64)\')
                  └─ TableScan test.web Est. ? rows
                           Outputs: [ws_item_sk, price], sk_2:=sk
1	100	1	1000.2
2	200	2	2000.3
not OK: under bottom join, pk right outer join others
Projection Est. ? rows
│     Expressions: [price], bbsk:=sk, sk:=sk_1, ws_item_sk:=ws_item_sk_1
└─ Sorting Est. ? rows
   │     Order by: {price ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {price ASC NULLS LAST}
         └─ Inner Join Est. ? rows
            │     Condition: expr#cast(sk, \'Nullable(Int64)\')_1 == expr#cast(sk_1, \'Nullable(Int64)\')
            ├─ Repartition Exchange Est. ? rows
            │  │     Partition by: {expr#cast(sk, \'Nullable(Int64)\')_1}
            │  └─ Projection Est. ? rows
            │     │     Expressions: [sk], expr#cast(sk, \'Nullable(Int64)\')_1:=cast(sk, \'Nullable(Int64)\')
            │     └─ Inner Join Est. ? rows
            │        │     Condition: expr#cast(sk, \'Nullable(Int64)\') == expr#cast(ws_item_sk, \'Nullable(Int64)\')
            │        ├─ Repartition Exchange Est. ? rows
            │        │  │     Partition by: {expr#cast(sk, \'Nullable(Int64)\')}
            │        │  └─ Projection Est. ? rows
            │        │     │     Expressions: [sk], expr#cast(sk, \'Nullable(Int64)\'):=cast(sk, \'Nullable(Int64)\')
            │        │     └─ TableScan test.cust Est. ? rows
            │        │              Outputs: [sk]
            │        └─ Repartition Exchange Est. ? rows
            │           │     Partition by: {expr#cast(ws_item_sk, \'Nullable(Int64)\')}
            │           └─ Projection Est. ? rows
            │              │     Expressions: expr#cast(ws_item_sk, \'Nullable(Int64)\'):=cast(ws_item_sk, \'Nullable(Int64)\')
            │              └─ TableScan test.web Est. ? rows
            │                       Outputs: [ws_item_sk]
            └─ Repartition Exchange Est. ? rows
               │     Partition by: {expr#cast(sk_1, \'Nullable(Int64)\')}
               └─ Projection Est. ? rows
                  │     Expressions: [price, sk_1, ws_item_sk_1], expr#cast(sk_1, \'Nullable(Int64)\'):=cast(sk_1, \'Nullable(Int64)\')
                  └─ TableScan test.web Est. ? rows
                           Outputs: [price], ws_item_sk_1:=ws_item_sk, sk_1:=sk
not OK: unique self join with select *
Projection Est. ? rows
│     Expressions: [c_customer_id, item, sk], b.c_customer_id:=c_customer_id_1, b.item:=item_1, b.sk:=sk
└─ Gather Exchange Est. ? rows
   └─ Inner Join Est. ? rows
      │     Condition: sk == sk_1
      ├─ Repartition Exchange Est. ? rows
      │  │     Partition by: {sk}
      │  └─ TableScan test.cust Est. ? rows
      │           Outputs: [sk, c_customer_id, item]
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {sk_1}
         └─ TableScan test.cust Est. ? rows
                  Outputs: sk_1:=sk, c_customer_id_1:=c_customer_id, item_1:=item
OK: with top union
Projection Est. ? rows
│     Expressions: customer_id:=c_customer_id_3, sale_type:=`expr#\'s\'_1`
└─ Gather Exchange Est. ? rows
   └─ Union Est. ? rows
      │     OutputToInputs: expr#\'s\'_1 = [expr#\'s\',expr#\'c\',expr#\'w\'], c_customer_id_3 = [c_customer_id,c_customer_id_1,c_customer_id_2]
      ├─ Projection Est. ? rows
      │  │     Expressions: [c_customer_id], expr#\'s\':=\'s\'
      │  └─ Aggregating Est. ? rows
      │     │     Group by: {c_customer_id}
      │     └─ Projection Est. ? rows
      │        │     Expressions: [c_customer_id]
      │        └─ Filter Est. ? rows
      │           │     Condition: (price < 2000.) AND (sk = sk_1)
      │           └─ CTERef[1] Est. ? rows
      ├─ Projection Est. ? rows
      │  │     Expressions: [c_customer_id_1], expr#\'c\':=\'c\'
      │  └─ Aggregating Est. ? rows
      │     │     Group by: {c_customer_id_1}
      │     └─ Projection Est. ? rows
      │        │     Expressions: [c_customer_id_1]
      │        └─ Filter Est. ? rows
      │           │     Condition: (price_1 < 3000.) AND (sk_2 = sk_3)
      │           └─ CTERef[1] Est. ? rows
      └─ Projection Est. ? rows
         │     Expressions: [c_customer_id_2], expr#\'w\':=\'w\'
         └─ Aggregating Est. ? rows
            │     Group by: {c_customer_id_2}
            └─ Projection Est. ? rows
               │     Expressions: [c_customer_id_2]
               └─ Filter Est. ? rows
                  │     Condition: (price_2 < 4000.) AND (sk_4 = sk_5)
                  └─ CTERef[1] Est. ? rows
CTEDef [1]
   Repartition Exchange Est. ? rows
   │     Partition by: {c_customer_id}
   └─ Inner Join Est. ? rows
      │     Condition: expr#cast(sk, \'Nullable(Int64)\') == expr#cast(sk_1, \'Nullable(Int64)\')
      ├─ Repartition Exchange Est. ? rows
      │  │     Partition by: {expr#cast(sk, \'Nullable(Int64)\')}
      │  └─ Projection Est. ? rows
      │     │     Expressions: [c_customer_id, sk], expr#cast(sk, \'Nullable(Int64)\'):=cast(sk, \'Nullable(Int64)\')
      │     └─ TableScan test.cust Est. ? rows
      │              Outputs: [sk, c_customer_id]
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {expr#cast(sk_1, \'Nullable(Int64)\')}
         └─ Projection Est. ? rows
            │     Expressions: [price, sk_1], expr#cast(sk_1, \'Nullable(Int64)\'):=cast(sk_1, \'Nullable(Int64)\')
            └─ Filter Est. ? rows
               │     Condition: (price < 2000.) OR (price < 3000.) OR (price < 4000.)
               └─ TableScan test.web Est. ? rows
                        Where: (price < 2000.) OR (price < 3000.) OR (price < 4000.)
                        Outputs: [price], sk_1:=sk
note: CTE(Common Table Expression) is applied for 3 times.
5
not OK: with top union, but pk of one child lost
Projection Est. ? rows
│     Expressions: customer_id:=c_customer_id_3, sale_type:=`expr#\'s\'_1`
└─ Gather Exchange Est. ? rows
   └─ Union Est. ? rows
      │     OutputToInputs: expr#\'s\'_1 = [expr#\'s\',expr#\'c\',expr#\'w\'], c_customer_id_3 = [c_customer_id,c_customer_id_1,c_customer_id_2]
      ├─ Projection Est. ? rows
      │  │     Expressions: [c_customer_id], expr#\'s\':=\'s\'
      │  └─ Aggregating Est. ? rows
      │     │     Group by: {c_customer_id}
      │     └─ Projection Est. ? rows
      │        │     Expressions: [c_customer_id]
      │        └─ Filter Est. ? rows
      │           │     Condition: (c_customer_id = \'notmatch\') AND (price < 2001.) AND (sk = sk_1)
      │           └─ CTERef[1] Est. ? rows
      ├─ Projection Est. ? rows
      │  │     Expressions: [c_customer_id_1], expr#\'c\':=\'c\'
      │  └─ Aggregating Est. ? rows
      │     │     Group by: {c_customer_id_1}
      │     └─ Projection Est. ? rows
      │        │     Expressions: [c_customer_id_1]
      │        └─ Filter Est. ? rows
      │           │     Condition: (price_1 < 3001.) AND (sk_2 = sk_3)
      │           └─ CTERef[1] Est. ? rows
      └─ Projection Est. ? rows
         │     Expressions: [c_customer_id_2], expr#\'w\':=\'w\'
         └─ Aggregating Est. ? rows
            │     Group by: {c_customer_id_2}
            └─ Projection Est. ? rows
               │     Expressions: [c_customer_id_2]
               └─ Filter Est. ? rows
                  │     Condition: (price_2 < 4001.) AND (sk_4 = sk_5)
                  └─ CTERef[1] Est. ? rows
CTEDef [1]
   Repartition Exchange Est. ? rows
   │     Partition by: {c_customer_id}
   └─ Inner Join Est. ? rows
      │     Condition: expr#cast(sk, \'Nullable(Int64)\') == expr#cast(sk_1, \'Nullable(Int64)\')
      │     Filter: (price < 3001.) OR (price < 4001.) OR (c_customer_id = \'notmatch\')
      ├─ Repartition Exchange Est. ? rows
      │  │     Partition by: {expr#cast(sk, \'Nullable(Int64)\')}
      │  └─ Projection Est. ? rows
      │     │     Expressions: [c_customer_id, sk], expr#cast(sk, \'Nullable(Int64)\'):=cast(sk, \'Nullable(Int64)\')
      │     └─ TableScan test.cust Est. ? rows
      │              Outputs: [sk, c_customer_id]
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {expr#cast(sk_1, \'Nullable(Int64)\')}
         └─ Projection Est. ? rows
            │     Expressions: [price, sk_1], expr#cast(sk_1, \'Nullable(Int64)\'):=cast(sk_1, \'Nullable(Int64)\')
            └─ Filter Est. ? rows
               │     Condition: (price < 3001.) OR (price < 4001.) OR (price < 2001.)
               └─ TableScan test.web Est. ? rows
                        Where: (price < 3001.) OR (price < 4001.) OR (price < 2001.)
                        Outputs: [price], sk_1:=sk
note: CTE(Common Table Expression) is applied for 3 times.
5
