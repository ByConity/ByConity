CREATE DATABASE IF NOT EXISTS test;


DROP TABLE IF EXISTS app_track_2;
CREATE TABLE app_track_2 (`id` Int64, `cluster_id` Nullable(String) COMMENT '集群编码', `create_time` DateTime COMMENT '入库时间', `unix_time` Nullable(Int64) COMMENT '服务器修正后的任务时间戳', `uuid` Nullable(String) COMMENT '唯一编码', `app_install_id` Nullable(String) COMMENT 'app升级id', `app_package` Nullable(String) COMMENT 'app包名称', `app_channel` Nullable(String) COMMENT 'app下发渠道', `app_id` Nullable(Int32) COMMENT 'app在内部的应用', `app_name` Nullable(String) COMMENT 'APP显示的名字', `app_version` Nullable(String) COMMENT 'APP版本号', `app_language` Nullable(String) COMMENT 'APP语言', `custom_event` Nullable(String) COMMENT '自定义事件', `device_type` Nullable(String) COMMENT '机器类型', `device_id` Nullable(String) COMMENT '设备唯一ID  android', `device_unique_id` Nullable(String) COMMENT '设备唯一ID 设备', `device_ip` Nullable(String) COMMENT '设备联网IP 、未联网时传空', `device_model` Nullable(String) COMMENT '手机型号 > iPhone 12 / mate30', `device_timezone` Nullable(String) COMMENT '设备所处时区', `element_id` Nullable(String) COMMENT '对应元素ID', `event` Nullable(String) COMMENT 'event', `header` Nullable(String) COMMENT 'header', `header_custom` Nullable(String) COMMENT 'header_custom', `latitude` Nullable(String) COMMENT '当前定位经纬度', `location_city` Nullable(String) COMMENT '定位城市', `location_province` Nullable(String) COMMENT '定位省份', `longitude` Nullable(String) COMMENT '当前定位经纬度', `network_type` Nullable(String) COMMENT '网络类型，2g、3g、4g、5g、wifi、unknown、no_network', `os_version` Nullable(String) COMMENT '设备系统版本', `page_id` Nullable(String) COMMENT '对应页面的唯一ID，模块_文件名', `page_pre_id` Nullable(String) COMMENT '事件发生的上一个页面', `params` Nullable(String) COMMENT '额外', `screen_density` Nullable(String) COMMENT '屏幕像素显示级别', `screen_id` Nullable(String) COMMENT '对应界面当前会话的唯一ID', `screen_resolution` Nullable(String) COMMENT '屏幕分辨率 > 2560x1080', `session_id` Nullable(String) COMMENT '会话ID', `time` Nullable(Int64) COMMENT '事件发生的时间戳', `user_id` Nullable(String) COMMENT '用户ID', `abtest_id` Nullable(String) COMMENT 'AB TEST实验对应的ID', `abtest_group` Nullable(String) COMMENT 'AB TEST实验结果', `user_unique_id` Nullable(String) COMMENT '用户唯一id，由app_id+user_id 生成', `hardware_version` Nullable(String) COMMENT '硬件信息版本号', `priority` Nullable(Int32) COMMENT '优先级(数据上报)') ENGINE = CnchMergeTree PARTITION BY toYYYYMM(toDate(`create_time`)) PRIMARY KEY `id` ORDER BY `id` UNIQUE KEY `id` SETTINGS index_granularity = 8192;

SET multiple_joins_rewriter_version = 2;
SET enable_global_with_statement = 1;
SET dialect_type = 'CLICKHOUSE';
SET enable_optimizer = 1;

SELECT a.id + 1 AS aid
FROM app_track_2 AS a
LEFT JOIN
(
    SELECT id AS xid
    FROM app_track_2
) AS p1 ON p1.xid = aid
LEFT JOIN
(
    SELECT id AS yid
    FROM app_track_2
) AS p2 ON p2.yid = aid;

WITH toDateTime('2023-02-25') AS RUN_TIME SELECT hh.device_unique_id, hh.shop_id, hh.pid, toStartOfHour(toDateTime(hh.task_max_time)) task_hour_str, toUnixTimestamp(task_hour_str) task_hour_time, round(sum(hh.mileage), 2), round(sum(hh.duration), 2), sum(hh.task_times), round(sum(hh.wait_duration), 2), round(sum(hh.pause_duration), 2), round(sum(hh.real_duration), 2), round(sum(hh.mileage)/sum(hh.real_duration), 2), round(sum(hh.expect_mileage), 2), sum(hh.steady_times), sum(hh.music_times), sum(hh.tray_used_count), sum(hh.destination_count), sum(hh.animation_close_times), sum(hh.protect_times), sum(hh.tray_sensor_times), sum(hh.voice_times), sum(hh.stop_times), sum(hh.voice_interaction_times), sum(hh.touch_times) FROM (SELECT ss.device_unique_id device_unique_id, ss.shop_id shop_id, ss.pid pid, ss.param_session_id session_id, max(ss.task_max_time) task_max_time, sum(ss.mileage) mileage, sum(ss.duration) duration, count(ss.param_scene_id) task_times, sum(ss.wait_duration) wait_duration, sum(ss.pause_duration) pause_duration, sum(ss.real_duration) real_duration, sum(ss.mileage)/sum(ss.real_duration) avg_speed, sum(ss.expect_mileage) expect_mileage, sum(ss.steady_times) steady_times, sum(ss.music_times) music_times, sum(ss.tray_used_count) tray_used_count, sum(ss.destination_count) destination_count, sum(ss.animation_close_times) animation_close_times, sum(ss.protect_times) protect_times, sum(ss.tray_sensor_times) tray_sensor_times, sum(ss.voice_times) voice_times, ifNull(sstop.stop_times, 0) stop_times, ifNull(svoice.voice_interaction_times, 0) voice_interaction_times, ifNull(stouch.touch_times, 0) touch_times FROM (WITH JSONExtractString(a.params, 'business_status') AS business_status, JSONExtractInt(a.header_custom, 'shop_id') AS shop_id, JSONExtractString(a.header_custom, 'pid') AS pid, JSONExtractString(a.params, 'scene_id') AS param_scene_id, JSONExtractString(a.params, 'session_id') AS param_session_id, max(if(business_status = 'ON_START', a.`time`/1000, 0)) AS task_start_time, search_scene_ids AS (SELECT DISTINCT JSONExtractString(params, 'scene_id') AS scene_id_base FROM app_track_2 WHERE custom_event = 'DELIVERY' AND JSONExtractString(params, 'business_status') = 'ON_STOP' AND toDate(create_time)=toDate(addDays(RUN_TIME, -1)) ) SELECT a.device_unique_id device_unique_id, shop_id, pid, param_session_id, param_scene_id, p.page_key param_page_key, max(if(business_status = 'ON_START', JSONExtractInt(a.params, 'mode'), 0)) MODE, (max(a.`time`)/1000) task_max_time, max(JSONExtractFloat(a.params, 'current_mileage')) mileage, (task_max_time - task_start_time) duration, ifNull(b.wait_duration, 0) wait_duration, ifNull(c.pause_duration, 0) pause_duration, (duration - wait_duration - pause_duration) real_duration, (mileage/real_duration) avg_speed, (avg_speed*duration) expect_mileage, sum(if(business_status = 'ON_START' AND JSONExtractBool(a.params, 'steady') = 1, 1, 0)) steady_times, sum(if(business_status = 'ON_START' AND JSONExtractBool(a.params, 'music') = 1, 1, 0)) music_times, sum(if(business_status = 'ON_START', JSONExtractInt(a.params, 'tray_used_number'), 0)) tray_used_count, sum(if(business_status = 'ON_START', JSONExtractInt(a.params, 'task_number'), 0)) destination_count, sum(if(business_status = 'ON_START' AND JSONExtractBool(a.params, 'animation') = 0, 1, 0)) animation_close_times, sum(if(business_status = 'ON_START' AND JSONExtractBool(a.params, 'pw_protection') = 1, 1, 0)) protect_times, sum(if(business_status = 'ON_START' AND JSONExtractBool(a.params, 'tray_sensor') = 1, 1, 0)) tray_sensor_times, sum(if(business_status = 'ON_START' AND JSONExtractBool(a.params, 'custom_voice') = 1, 1, 0)) voice_times FROM app_track_2 a LEFT JOIN (SELECT device_unique_id, JSONExtractString(params, 'scene_id') AS page_scene_id, JSONExtractString(params, 'page_key') AS page_key FROM app_track_2 WHERE custom_event = 'DELIVERY' AND JSONExtractString(params, 'business_status') = 'ON_START' AND toDate(create_time)=toDate(addDays(RUN_TIME, -1)) ) p ON a.device_unique_id = p.device_unique_id AND param_scene_id = p.page_scene_id LEFT JOIN (SELECT o.device_unique_id device_unique_id, o.scene_id scene_id, sum(o.wait_duration) wait_duration FROM (WITH JSONExtractString(params, 'business_status') AS business_status, JSONExtractString(params, 'scene_id') AS scene_id SELECT device_unique_id, scene_id, arrayJoin(CAST(groupUniqArray(if(business_status = 'ON_FINISH_ONE', `time`, NULL)), 'Array(Nullable(Int64))')) AS end_time, arraySort(CAST(groupUniqArray(if(business_status IN ('ON_FINISH_ONE', 'ON_ARRIVE'), `time`, NULL)), 'Array(Nullable(Int64))')) AS all_time, indexOf(all_time, end_time) pos, if(pos > 1, arrayElement(all_time, pos-1), 0) AS start_time, (end_time - start_time)/1000 wait_duration FROM app_track_2 WHERE custom_event = 'DELIVERY' AND scene_id IN search_scene_ids AND toDate(create_time) BETWEEN toDate(addDays(RUN_TIME, -2)) AND toDate(RUN_TIME) GROUP BY device_unique_id, scene_id HAVING start_time > 0) o GROUP BY o.device_unique_id, o.scene_id) b ON a.device_unique_id = b.device_unique_id AND param_scene_id = b.scene_id LEFT JOIN (SELECT o.device_unique_id, o.scene_id, sum(o.pause_duration) pause_duration FROM (WITH JSONExtractString(params, 'business_status') AS business_status, JSONExtractString(params, 'scene_id') AS scene_id SELECT device_unique_id, scene_id, arrayJoin(CAST(groupUniqArray(if(business_status = 'ON_PAUSE', `time`, NULL)), 'Array(Nullable(Int64))')) AS start_time, arraySort(CAST(groupUniqArray(`time`), 'Array(Nullable(Int64))')) AS all_time, indexOf(all_time, start_time) pos, length(all_time) max_pos, if(pos > 0 AND max_pos > pos, arrayElement(all_time, pos+1), 0) AS end_time, (end_time - start_time)/1000 pause_duration FROM app_track_2 WHERE custom_event = 'DELIVERY' AND scene_id IN search_scene_ids AND toDate(create_time) BETWEEN toDate(addDays(RUN_TIME, -2)) AND toDate(RUN_TIME) GROUP BY device_unique_id, scene_id HAVING end_time > 0) o GROUP BY o.device_unique_id, o.scene_id) c ON a.device_unique_id = c.device_unique_id AND param_scene_id = c.scene_id WHERE a.custom_event = 'DELIVERY' AND param_scene_id IN search_scene_ids AND toDate(a.create_time) BETWEEN toDate(addDays(RUN_TIME, -2)) AND toDate(RUN_TIME) GROUP BY a.device_unique_id, shop_id, pid, param_session_id, param_scene_id, p.page_key, b.wait_duration, c.pause_duration HAVING task_start_time > 0 AND duration < 900000) ss LEFT JOIN (WITH JSONExtractString(params, 'session_id') AS session_id SELECT device_unique_id, session_id, JSONExtractString(params, 'page_key') AS page_key, count() AS stop_times FROM app_track_2 WHERE custom_event = 'PERIPHERALS' AND JSONExtractString(params, 'peripherals_name') = 'EMERGENCY_STOP_SENSOR' AND JSONExtractInt(params, 'emergency_status') = 0 AND toDate(create_time) BETWEEN toDate(addDays(RUN_TIME, -2)) AND toDate(RUN_TIME) GROUP BY device_unique_id, session_id, page_key) sstop ON ss.device_unique_id = sstop.device_unique_id AND ss.param_session_id = sstop.session_id AND ss.param_page_key = sstop.page_key LEFT JOIN (WITH JSONExtractString(params, 'session_id') AS session_id SELECT device_unique_id, JSONExtractString(params, 'page_key') AS page_key, session_id, count() AS voice_interaction_times FROM app_track_2 WHERE custom_event = 'VOICE_INTERACTION' AND JSONExtractString(params, 'business_status') = 'ON_WAKEUP' AND toDate(create_time) BETWEEN toDate(addDays(RUN_TIME, -2)) AND toDate(RUN_TIME) GROUP BY device_unique_id, session_id, page_key) svoice ON ss.device_unique_id = svoice.device_unique_id AND ss.param_session_id = svoice.session_id AND ss.param_page_key = svoice.page_key LEFT JOIN (WITH JSONExtractString(params, 'session_id') AS session_id, JSONExtractString(params, 'peripherals_name') AS peripherals_name SELECT device_unique_id, session_id, JSONExtractString(params, 'page_key') AS page_key, count() AS touch_times FROM app_track_2 WHERE custom_event = 'PERIPHERALS' AND peripherals_name = 'TOUCH_SENSOR' AND toDate(create_time) BETWEEN toDate(addDays(RUN_TIME, -2)) AND toDate(RUN_TIME) GROUP BY device_unique_id, session_id, page_key) stouch ON ss.device_unique_id = stouch.device_unique_id AND ss.param_session_id = stouch.session_id AND ss.param_page_key = stouch.page_key GROUP BY ss.device_unique_id, ss.shop_id, ss.pid, ss.param_session_id, sstop.stop_times, svoice.voice_interaction_times, stouch.touch_times) hh GROUP BY hh.device_unique_id, hh.shop_id, hh.pid, task_hour_str, task_hour_time;
