import random, os

def get_data(path):
    result_array = []
    with open(path) as f:
        for line in f:
            result_array.append(line.replace('\n', ''))
    return result_array


class fuzzy(object):

    def __init__(self, sql_fuzzy_file_functions, sql_fuzzy_file_table_functions):
        self.word_symbol_set = '!#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_`abcdefghijklmnopqrstuvwxyz{|}~'
        self.word_set = 'abcdefghijklmnopqrstuvwxyz'
        self.number_set = '0123456789'
        self.type_cast = ['DateTime', 'Date', 'String']
        self.type = ['Int8', 'Int16', 'Int32', 'Int64', 'UInt8', 'UInt16', 'UInt32', 'UInt64', 'Float32', 'Float64']
        self.max_digit_of_decimal_point = 3
        self.SQL_FUZZY_FILE_FUNCTIONS = sql_fuzzy_file_functions
        self.SQL_FUZZY_FILE_TABLE_FUNCTIONS = sql_fuzzy_file_table_functions

    def rand_word(self, min=1, max=8):
        result = ''
        max_times = random.randint(min, max)
        for i in range(0, max_times):
            result += random.choice(self.word_set)
        return result

    def rand_string(self, min=1, max=8):
        result = ''
        max_times = random.randint(min, max)
        for i in range(0, max_times):
            result += random.choice(self.word_symbol_set)
        return "'" + result + "'"

    def rand_function(self):
        return random.choice(self.SQL_FUZZY_FILE_FUNCTIONS)

    def rand_number(self, min=1, max=8):
        minus_sign = random.choice(['', '-'])  # if minus_sign
        number = ''
        if random.choice([True, False]) is True:  # if dot_sign_number
            dot_sign_number = '.'
            max_times = random.randint(1, self.max_digit_of_decimal_point)
            for i in range(0, max_times):
                dot_sign_number += random.choice(self.number_set)
        else:
            dot_sign_number = ''

        max_times = random.randint(min, max)  # random number
        for i in range(0, max_times):
            number += random.choice(self.number_set)
        return str(minus_sign + number + dot_sign_number)

    def expression_cast(self, min=0, max=1):

        result = ''
        for i in range(min, max):
            select = random.randint(1, 9)

            if select == 1:  # 'CAST'
                result += '(CAST((' + self.expression_cast() + ') AS ' + random.choice(self.type_cast) + ')),'
            if select == 2:  # 'SELECT'
                result += '( ' + self.query_select() + ' ) AS ' + self.rand_word() + ','
            if select == 3:  # 'number'
                result += self.rand_number() + ','
            if select == 4:  # 'string'
                result += self.rand_string() + ','
            if select == 5:  # ''[]'
                result += '[]' + ','
            if select == 6:  # '[x]'
                result += '[' + self.expression_cast() + ']' + ','
            if select == 7:  # "'\\0'"
                result += "'\\0'" + ','
            if select == 8:  # "''"
                result += "''" + ','
            if select == 9:  # 'NULL'
                result += "'NULL'" + ','

        return result[:-1]

    def query_select(self):

        select = random.randint(1, 3)

        if select == 1:  # 'CAST'
            return 'SELECT ' + self.expression_cast(max=5)
        if select == 2:  # 'SELECT function()'
            return 'SELECT ' + random.choice(self.SQL_FUZZY_FILE_FUNCTIONS) + '(' + self.expression_cast(max=3) + ')'
        if select == 3:  # 'SELECT table_function()'
            return 'SELECT * FROM ' + random.choice(self.SQL_FUZZY_FILE_TABLE_FUNCTIONS) + '(' + self.expression_cast(max=3) + ')'

def main(temp_path,sql_count):
    run_fuzzy = fuzzy(get_data(temp_path +'SQL_FUZZY_FILE_FUNCTIONS'), get_data(temp_path +'SQL_FUZZY_FILE_TABLE_FUNCTIONS'))
    result = []
    for i in range(0, int(sql_count)):
        result.append(run_fuzzy.query_select() + ';')

    if os.path.exists(temp_path + '00746_sql_fuzzy.sql'):
        os.remove(temp_path + '00746_sql_fuzzy.sql')

    with open(temp_path + '00746_sql_fuzzy.sql','w') as f:
        for line in result:
            f.write(line + '\n')

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description="exampleï¼š python3 00746_sql_fuzzy.py -temp_path <path> -sql_count 1000")
    parser.add_argument('-temp_path', required=True, help="the temp path")
    parser.add_argument('-sql_count', required=True, help="the sql count requried")
    args = parser.parse_args()
    main(args.temp_path,args.sql_count)


