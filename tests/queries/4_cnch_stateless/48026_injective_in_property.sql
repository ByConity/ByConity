create database if not exists test_48026 engine = Cnch;
set enable_optimizer=1;
use test_48026;
drop table if exists  tea_event_table_medium_v3;
CREATE TABLE tea_event_table_medium_v3 (`app_id` UInt32, `app_name` String, `app_version` String, `device_id` String, `device_model` String, `device_brand` String, `hash_uid` UInt64, `os_name` String, `os_version` String, `network_type` String, `network_carrier` String, `app_channel` String, `user_register_ts` Nullable(UInt64), `server_time` UInt64, `time` UInt64, `event` String, `user_unique_id` String, `event_date` Date, `ab_version` Array(Int32), `tea_app_id` UInt32, `app_region` String, `region` String, `app_language` String, `language` String, `gender` String, `age` String, `string_params` Map(String, String), `int_params` Map(String, Int64), `float_params` Map(String, Float64), `string_profiles` Map(String, String), `int_profiles` Map(String, Int64), `float_profiles` Map(String, Float64), `user_id` String, `ssid` String) ENGINE = CnchMergeTree PARTITION BY (event_date, tea_app_id) CLUSTER BY hash_uid INTO 100 BUCKETS SPLIT_NUMBER 8000 ORDER BY (tea_app_id, event, event_date, hash_uid, user_unique_id, cityHash64(hash_uid)) SAMPLE BY cityHash64(hash_uid) TTL event_date + toIntervalDay(730) SETTINGS index_granularity = 8192, enable_addition_bg_task = 1, max_partition_for_multi_select = 750, cnch_merge_enable_batch_select = 1, max_addition_bg_task_num = 3000, cnch_merge_only_realtime_partition = 1, cnch_merge_parts_cache_timeout = 3600, cnch_merge_max_total_rows_to_merge = 100000000, cnch_merge_pick_worker_algo = 'RoundRobin', max_addition_mutation_task_num = 50, gc_remove_part_thread_pool_size = 64, cnch_gc_round_robin_partitions_number = 500, cnch_gc_round_robin_partitions_interval = 6000;

SELECT     toUInt32((server_time - 1692028800) / 86400) AS t,     count(1) AS cntq00 FROM tea_event_table_medium_v3 AS et WHERE (tea_app_id IN (172)) AND (event = 'app_launch') AND ((event_date >= '2023-08-15') AND (event_date <= '2023-08-18')) AND ((hash_uid, toUInt32(toUInt32((server_time - 1692028800) / 86400) + 3)) GLOBAL IN (     SELECT         user_caliber,         t     FROM     (         SELECT             user_caliber,             t,             (sum(cnt) OVER (          PARTITION BY user_caliber ORDER BY user_caliber ASC, t ASC ROWS BETWEEN 3 PRECEDING AND 0 PRECEDING EXCLUDE NO OTHERS  )) AS total_cnt         FROM         (             SELECT                 user_caliber,                 tuple.1 AS t,                 tuple.2 AS cnt             FROM             (                 SELECT                     user_caliber,                     arrayJoin(arrayMap(x -> if(indexOf(t, x) > 0, (x, cnt[indexOf(t, x)]), (x, 0)), range(toUInt32(0), toUInt32(7), 1))) AS tuple                 FROM                 (                     SELECT                         user_caliber,                         groupArray(t) AS t,                         groupArray(cnt) AS cnt                     FROM                     (                         SELECT                             hash_uid AS user_caliber,                             toUInt32((server_time - 1691596800) / 86400) AS t,                             count(1) AS cnt                         FROM tea_event_table_medium_v3 AS et                         WHERE (tea_app_id IN (172)) AND ((event_date >= '2023-08-10') AND (event_date <= '2023-08-16')) AND (event = 'push_click')                         GROUP BY                             user_caliber,                             t                     )                     GROUP BY user_caliber                 )             )         )     )     WHERE (total_cnt > 0) AND (total_cnt > 1) )) GROUP BY t LIMIT 500000 SETTINGS distributed_perfect_shard = 1, enable_injective_in_property=1;