---------test union
Projection Est. ? rows
│     Expressions: id:=id_2
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id_2}
         └─ Union Est. ? rows
            │     OutputToInputs: id_2 = [id,id_1]
            ├─ Aggregating Est. ? rows
            │  │     Group by: {id}
            │  └─ TableScan test_distinct.unique_1 Est. ? rows
            │           Outputs: [id]
            └─ Aggregating Est. ? rows
               │     Group by: {id_1}
               └─ MergingAggregated Est. ? rows
                  └─ Repartition Exchange Est. ? rows
                     │     Partition by: {id_1}
                     └─ Aggregating Est. ? rows
                        │     Group by: {id_1}
                        └─ TableScan test_distinct.unique_2 Est. ? rows
                                 Outputs: id_1:=id
---------test union2
Projection Est. ? rows
│     Expressions: id:=id_1
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id_1}
         └─ Union Est. ? rows
            │     OutputToInputs: id_1 = [id,id3]
            ├─ Aggregating Est. ? rows
            │  │     Group by: {id}
            │  └─ TableScan test_distinct.unique_1 Est. ? rows
            │           Outputs: [id]
            └─ Aggregating Est. ? rows
               │     Group by: {id3}
               └─ TableScan test_distinct.unique_3 Est. ? rows
                        Outputs: [id3]
---------test inner join1
Projection Est. ? rows
│     Expressions: [id]
└─ Gather Exchange Est. ? rows
   └─ Aggregating Est. ? rows
      │     Group by: {id}
      └─ Inner Join Est. ? rows
         │     Condition: id == id_1
         ├─ Repartition Exchange Est. ? rows
         │  │     Partition by: {id}
         │  └─ TableScan test_distinct.unique_1 Est. ? rows
         │           Outputs: [id]
         └─ Repartition Exchange Est. ? rows
            │     Partition by: {id_1}
            └─ TableScan test_distinct.unique_2 Est. ? rows
                     Outputs: id_1:=id
---------test inner join2
Projection Est. ? rows
│     Expressions: [id]
└─ Gather Exchange Est. ? rows
   └─ Inner Join Est. ? rows
      │     Condition: id == id3
      ├─ Repartition Exchange Est. ? rows
      │  │     Partition by: {id}
      │  └─ TableScan test_distinct.unique_1 Est. ? rows
      │           Outputs: [id]
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id3}
         └─ TableScan test_distinct.unique_3 Est. ? rows
                  Outputs: [id3]
---------test inner join3
Projection Est. ? rows
│     Expressions: [id]
└─ Gather Exchange Est. ? rows
   └─ Inner Join Est. ? rows
      │     Condition: id == id_1, m1 == id2
      ├─ Repartition Exchange Est. ? rows
      │  │     Partition by: {id, m1}
      │  └─ TableScan test_distinct.unique_1 Est. ? rows
      │           Outputs: [id, m1]
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id_1, id2}
         └─ TableScan test_distinct.unique_2 Est. ? rows
                  Outputs: [id2], id_1:=id
---------test left join
Projection Est. ? rows
│     Expressions: [id]
└─ Gather Exchange Est. ? rows
   └─ Left Join Est. ? rows
      │     Condition: id == id3
      ├─ Repartition Exchange Est. ? rows
      │  │     Partition by: {id}
      │  └─ TableScan test_distinct.unique_1 Est. ? rows
      │           Outputs: [id]
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id3}
         └─ TableScan test_distinct.unique_3 Est. ? rows
                  Outputs: [id3]
---------test right join
Projection Est. ? rows
│     Expressions: [id3]
└─ Gather Exchange Est. ? rows
   └─ Right Join Est. ? rows
      │     Condition: id == id3
      ├─ Repartition Exchange Est. ? rows
      │  │     Partition by: {id}
      │  └─ TableScan test_distinct.unique_1 Est. ? rows
      │           Outputs: [id]
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id3}
         └─ TableScan test_distinct.unique_3 Est. ? rows
                  Outputs: [id3]
---------test full join
Projection Est. ? rows
│     Expressions: [id]
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id}
         └─ Aggregating Est. ? rows
            │     Group by: {id}
            └─ Full Join Est. ? rows
               │     Condition: id == id3
               ├─ Repartition Exchange Est. ? rows
               │  │     Partition by: {id}
               │  └─ TableScan test_distinct.unique_1 Est. ? rows
               │           Outputs: [id]
               └─ Repartition Exchange Est. ? rows
                  │     Partition by: {id3}
                  └─ TableScan test_distinct.unique_3 Est. ? rows
                           Outputs: [id3]
---------test cte
Projection Est. ? rows
│     Expressions: plus(id3, 10):=`expr#plus(id3, 10)`
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {expr#plus(id3, 10)}
         └─ Aggregating Est. ? rows
            │     Group by: {expr#plus(id3, 10)}
            └─ Projection Est. ? rows
               │     Expressions: expr#plus(id3, 10):=id3 + 10
               └─ Inner Join Est. ? rows
                  │     Condition: 
                  │     Filter: id3 > `expr#divide(sum(avg_id), 20)_1`
                  ├─ Inner Join Est. ? rows
                  │  │     Condition: 
                  │  │     Filter: id3 > `expr#divide(sum(avg_id), 25)_1`
                  │  ├─ TableScan test_distinct.unique_3 Est. ? rows
                  │  │        Outputs: [id3]
                  │  └─ Projection Est. ? rows
                  │     │     Expressions: expr#divide(sum(avg_id), 25)_1:=cast(`expr#sum(avg_id)_4` / 25, \'Nullable(Float64)\')
                  │     └─ Broadcast Exchange Est. ? rows
                  │        └─ MergingAggregated Est. ? rows
                  │           └─ Gather Exchange Est. ? rows
                  │              └─ Aggregating Est. ? rows
                  │                 │     Group by: {}
                  │                 │     Aggregates: expr#sum(avg_id)_4:=AggNull(sum)(id_6)
                  │                 └─ TableScan test_distinct.unique_1 Est. ? rows
                  │                          Outputs: id_6:=id
                  └─ Projection Est. ? rows
                     │     Expressions: expr#divide(sum(avg_id), 20)_1:=cast(`expr#sum(avg_id)_5` / 20, \'Nullable(Float64)\')
                     └─ Broadcast Exchange Est. ? rows
                        └─ MergingAggregated Est. ? rows
                           └─ Gather Exchange Est. ? rows
                              └─ Aggregating Est. ? rows
                                 │     Group by: {}
                                 │     Aggregates: expr#sum(avg_id)_5:=AggNull(sum)(id_7)
                                 └─ TableScan test_distinct.unique_1 Est. ? rows
                                          Outputs: id_7:=id
---------test cte2
Projection Est. ? rows
│     Expressions: id:=id_3
└─ Gather Exchange Est. ? rows
   └─ Union Est. ? rows
      │     OutputToInputs: id_3 = [id_1,id_2]
      ├─ CTERef[1] Est. ? rows
      └─ CTERef[1] Est. ? rows
CTEDef [1]
   Projection Est. ? rows
   │     Expressions: id_1:=id_4
   └─ TableScan test_distinct.unique_1 Est. ? rows
            Outputs: id_4:=id
note: CTE(Common Table Expression) is applied for 2 times.
---------test groupby
Projection Est. ? rows
│     Expressions: [m1, m2]
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {m1, m2}
         └─ Aggregating Est. ? rows
            │     Group by: {m1, m2}
            └─ Filter Est. ? rows
               │     Condition: m1 > 1
               └─ TableScan test_distinct.unique_1 Est. ? rows
                        Where: m1 > 1
                        Outputs: [m1, m2]
---------test sipHash(64)
Projection Est. ? rows
│     Expressions: [id4, k3, m2]
└─ Gather Exchange Est. ? rows
   └─ MergingAggregated Est. ? rows
      └─ Repartition Exchange Est. ? rows
         │     Partition by: {id4, m2, k3}
         └─ Aggregating Est. ? rows
            │     Group by: {id4, m2, k3}
            └─ TableScan test_distinct.unique_4 Est. ? rows
                     Outputs: [id4, m2, k3]
1
1
