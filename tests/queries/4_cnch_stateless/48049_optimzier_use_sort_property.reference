-- { echoOn }
explain select * from test order by a, b, c, d;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {a ASC NULLS LAST, b ASC NULLS LAST, c ASC NULLS LAST, d ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a ASC NULLS LAST, b ASC NULLS LAST, c ASC NULLS LAST, d ASC NULLS LAST}
         │     Prefix Order: {a, b, c}
         └─ TableScan default.test Est. ? rows
                  Input Order Info: {a ASC ANY, b ASC ANY, c ASC ANY}
                  Outputs: [a, b, c, d]
explain select * from test order by a desc, b desc, c desc, d desc;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {a DESC NULLS LAST, b DESC NULLS LAST, c DESC NULLS LAST, d DESC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a DESC NULLS LAST, b DESC NULLS LAST, c DESC NULLS LAST, d DESC NULLS LAST}
         │     Prefix Order: {a, b, c}
         └─ TableScan default.test Est. ? rows
                  Input Order Info: {a DESC ANY, b DESC ANY, c DESC ANY}
                  Outputs: [a, b, c, d]
explain select * from test order by a, b desc, c;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {a ASC NULLS LAST, b DESC NULLS LAST, c ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a ASC NULLS LAST, b DESC NULLS LAST, c ASC NULLS LAST}
         │     Prefix Order: {a}
         └─ TableScan default.test Est. ? rows
                  Input Order Info: {a ASC ANY}
                  Outputs: [a, b, c, d]
explain select * from test order by a desc, b, c desc;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {a DESC NULLS LAST, b ASC NULLS LAST, c DESC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a DESC NULLS LAST, b ASC NULLS LAST, c DESC NULLS LAST}
         │     Prefix Order: {a}
         └─ TableScan default.test Est. ? rows
                  Input Order Info: {a DESC ANY}
                  Outputs: [a, b, c, d]
explain select a, b, concat(c, d) as e from test order by a, b, e;
Projection Est. ? rows
│     Expressions: [a, b], e:=`expr#concat(c, d)`
└─ Sorting Est. ? rows
   │     Order by: {a ASC NULLS LAST, b ASC NULLS LAST, expr#concat(c, d) ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a ASC NULLS LAST, b ASC NULLS LAST, expr#concat(c, d) ASC NULLS LAST}
         │     Prefix Order: {a, b}
         └─ Projection Est. ? rows
            │     Expressions: [a, b], expr#concat(c, d):=concat(c, d)
            └─ TableScan default.test Est. ? rows
                     Input Order Info: {a ASC ANY, b ASC ANY}
                     Outputs: [a, b, c, d]
explain select a as e, b, concat(c, d) as f from test order by e, b, f;
Projection Est. ? rows
│     Expressions: [b], e:=a, f:=`expr#concat(c, d)`
└─ Sorting Est. ? rows
   │     Order by: {a ASC NULLS LAST, b ASC NULLS LAST, expr#concat(c, d) ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a ASC NULLS LAST, b ASC NULLS LAST, expr#concat(c, d) ASC NULLS LAST}
         │     Prefix Order: {a, b}
         └─ Projection Est. ? rows
            │     Expressions: [a, b], expr#concat(c, d):=concat(c, d)
            └─ TableScan default.test Est. ? rows
                     Input Order Info: {a ASC ANY, b ASC ANY}
                     Outputs: [a, b, c, d]
explain select a as e, b, concat(c, d) as f from test order by e desc, b desc, f desc;
Projection Est. ? rows
│     Expressions: [b], e:=a, f:=`expr#concat(c, d)`
└─ Sorting Est. ? rows
   │     Order by: {a DESC NULLS LAST, b DESC NULLS LAST, expr#concat(c, d) DESC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a DESC NULLS LAST, b DESC NULLS LAST, expr#concat(c, d) DESC NULLS LAST}
         │     Prefix Order: {a, b}
         └─ Projection Est. ? rows
            │     Expressions: [a, b], expr#concat(c, d):=concat(c, d)
            └─ TableScan default.test Est. ? rows
                     Input Order Info: {a DESC ANY, b DESC ANY}
                     Outputs: [a, b, c, d]
explain select * from test where a = 'x' order by b, c, d;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {b ASC NULLS LAST, c ASC NULLS LAST, d ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {b ASC NULLS LAST, c ASC NULLS LAST, d ASC NULLS LAST}
         │     Prefix Order: {b, c}
         └─ Filter Est. ? rows
            │     Condition: a = \'x\'
            └─ TableScan default.test Est. ? rows
                     Input Order Info: {a ASC ANY, b ASC ANY, c ASC ANY}
                     Where: a = \'x\'
                     Outputs: [a, b, c, d]
explain select * from test where a = 'x' order by b desc, c desc, d desc;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {b DESC NULLS LAST, c DESC NULLS LAST, d DESC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {b DESC NULLS LAST, c DESC NULLS LAST, d DESC NULLS LAST}
         │     Prefix Order: {b, c}
         └─ Filter Est. ? rows
            │     Condition: a = \'x\'
            └─ TableScan default.test Est. ? rows
                     Input Order Info: {a DESC ANY, b DESC ANY, c DESC ANY}
                     Where: a = \'x\'
                     Outputs: [a, b, c, d]
explain select * from test where a = 'x' and d = 'z' order by d, b, c;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {d ASC NULLS LAST, b ASC NULLS LAST, c ASC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {d ASC NULLS LAST, b ASC NULLS LAST, c ASC NULLS LAST}
         │     Prefix Order: {d, b, c}
         └─ Filter Est. ? rows
            │     Condition: (a = \'x\') AND (d = \'z\')
            └─ TableScan default.test Est. ? rows
                     Input Order Info: {a ASC ANY, b ASC ANY, c ASC ANY}
                     Where: (a = \'x\') AND (d = \'z\')
                     Outputs: [a, b, c, d]
explain select * from test where a = 'x' and d = 'z' order by d desc, b desc, c desc;
Projection Est. ? rows
│     Expressions: [a, b, c, d]
└─ Sorting Est. ? rows
   │     Order by: {d DESC NULLS LAST, b DESC NULLS LAST, c DESC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {d DESC NULLS LAST, b DESC NULLS LAST, c DESC NULLS LAST}
         │     Prefix Order: {d, b, c}
         └─ Filter Est. ? rows
            │     Condition: (a = \'x\') AND (d = \'z\')
            └─ TableScan default.test Est. ? rows
                     Input Order Info: {a DESC ANY, b DESC ANY, c DESC ANY}
                     Where: (a = \'x\') AND (d = \'z\')
                     Outputs: [a, b, c, d]
explain pipeline select * from test where a = 'x' order by b, c limit 10;

Segment[ 1 ] :
(Sorting)
Limit
  (Filter)
  FilterTransform
    (TableScan) # 
    NullSource 0 → 1

------------------------------------------

Segment[ 0 ] :
(Projection)
ExpressionTransform
  (Limit)
  Limit
    (Sorting)
      (RemoteExchangeSource)
      Source segment_id : [ 1 ]
      ExchangeSource 0 → 1

------------------------------------------
explain select a, b, c from (select a, b, c from test union all select a, b, c from test) order by a desc, b desc, c desc;
Projection Est. ? rows
│     Expressions: a:=a_2, b:=b_2, c:=c_2
└─ Sorting Est. ? rows
   │     Order by: {a_2 DESC NULLS LAST, b_2 DESC NULLS LAST, c_2 DESC NULLS LAST}
   └─ Gather Exchange Est. ? rows
      └─ Sorting Est. ? rows
         │     Order by: {a_2 DESC NULLS LAST, b_2 DESC NULLS LAST, c_2 DESC NULLS LAST}
         └─ Union Est. ? rows
            │     OutputToInputs: c_2 = [c,c_1], b_2 = [b,b_1], a_2 = [a,a_1]
            ├─ Sorting Est. ? rows
            │  │     Order by: {a DESC NULLS LAST, b DESC NULLS LAST, c DESC NULLS LAST}
            │  │     Prefix Order: {a, b, c}
            │  └─ TableScan default.test Est. ? rows
            │           Input Order Info: {a DESC ANY, b DESC ANY, c DESC ANY}
            │           Outputs: [a, b, c]
            └─ Sorting Est. ? rows
               │     Order by: {a_1 DESC NULLS LAST, b_1 DESC NULLS LAST, c_1 DESC NULLS LAST}
               │     Prefix Order: {a_1, b_1, c_1}
               └─ TableScan default.test Est. ? rows
                        Input Order Info: {a DESC ANY, b DESC ANY, c DESC ANY}
                        Outputs: a_1:=a, b_1:=b, c_1:=c
explain select a, b, c from (select a, b, c from test where a = '1' and b = '1' union all select a, b, c from test where a = '3' and b = '3') order by c desc limit 10;
Projection Est. 10 rows, cost 2.500000e+00
│     Expressions: a:=a_2, b:=b_2, c:=c_2
└─ Limit Est. 10 rows, cost 1.760000e+00
   │     Limit: 10
   └─ Sorting Est. 10 rows, cost 1.760000e+00
      │     Order by: {c_2 DESC NULLS LAST}
      │     Limit: 10
      └─ Gather Exchange Est. 10 rows, cost 1.760000e+00
         └─ Sorting Est. 10 rows, cost 0.000000e+00
            │     Order by: {c_2 DESC NULLS LAST}
            │     Limit: 10
            └─ Union Est. 20 rows, cost 0.000000e+00
               │     OutputToInputs: c_2 = [c,c_1], b_2 = [b,b_1], a_2 = [a,a_1]
               ├─ Sorting Est. 10 rows, cost 0.000000e+00
               │  │     Order by: {c DESC NULLS LAST}
               │  │     Prefix Order: {c}
               │  │     Limit: 10
               │  └─ Filter Est. ? rows, cost 0.000000e+00
               │     │     Condition: (a = \'1\') AND (b = \'1\')
               │     └─ TableScan default.test Est. ? rows, cost 0.000000e+00
               │              Input Order Info: {a DESC ANY, b DESC ANY, c DESC ANY}
               │              Where: (a = \'1\') AND (b = \'1\')
               │              Outputs: [a, b, c]
               └─ Sorting Est. 10 rows, cost 0.000000e+00
                  │     Order by: {c_1 DESC NULLS LAST}
                  │     Prefix Order: {c_1}
                  │     Limit: 10
                  └─ Filter Est. ? rows, cost 0.000000e+00
                     │     Condition: (a_1 = \'3\') AND (b_1 = \'3\')
                     └─ TableScan default.test Est. ? rows, cost 0.000000e+00
                              Input Order Info: {a DESC ANY, b DESC ANY, c DESC ANY}
                              Where: (a = \'3\') AND (b = \'3\')
                              Outputs: a_1:=a, b_1:=b, c_1:=c
-- { echoOn }
select a as e, b, concat(c, d) as f from test order by e desc, b desc, f desc;
3	3	44
3	3	33
1	1	22
1	1	11
select a, b, c from (select a, b, c from test union all select a, b, c from test) order by a desc, b desc, c desc;
3	3	4
3	3	4
3	3	3
3	3	3
1	1	2
1	1	2
1	1	1
1	1	1
select a, b, c from (select a, b, c from test where a = '1' and b = '1' union all select a, b, c from test where a = '3' and b = '3') order by c desc limit 10;
3	3	4
3	3	3
1	1	2
1	1	1
